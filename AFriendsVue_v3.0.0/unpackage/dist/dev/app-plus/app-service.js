if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global = uni.requireGlobal();
  ArrayBuffer = global.ArrayBuffer;
  Int8Array = global.Int8Array;
  Uint8Array = global.Uint8Array;
  Uint8ClampedArray = global.Uint8ClampedArray;
  Int16Array = global.Int16Array;
  Uint16Array = global.Uint16Array;
  Int32Array = global.Int32Array;
  Uint32Array = global.Uint32Array;
  Float32Array = global.Float32Array;
  Float64Array = global.Float64Array;
  BigInt64Array = global.BigInt64Array;
  BigUint64Array = global.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue) {
  "use strict";
  const _imports_0$1 = "/static/afriends-logo.png";
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$18 = {
    name: "IndexPage",
    data() {
      return {};
    },
    methods: {
      // 登录入口
      goToLogin() {
        uni.navigateTo({
          url: "/pages/login/login-replica"
        });
      },
      // 首页
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      // 聊天列表
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      // AI聊天
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/ai/ai-chat"
        });
      },
      // 好友列表
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      // 个人主页
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      // 设置
      goToSettings() {
        uni.navigateTo({
          url: "/pages/settings/settings"
        });
      },
      // 钱包
      goToWallet() {
        uni.navigateTo({
          url: "/pages/wallet/wallet"
        });
      },
      // 帮助
      goToHelp() {
        uni.showToast({
          title: "帮助功能开发中",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "index-page" }, [
      vue.createCommentVNode(" 应用Logo和标题 "),
      vue.createElementVNode("view", { class: "app-header" }, [
        vue.createElementVNode("image", {
          class: "app-logo",
          src: _imports_0$1,
          mode: "aspectFit"
        }),
        vue.createElementVNode("text", { class: "app-title" }, "Afriends"),
        vue.createElementVNode("text", { class: "app-subtitle" }, "智能交友平台")
      ]),
      vue.createCommentVNode(" 功能导航区域 "),
      vue.createElementVNode("view", { class: "navigation-grid" }, [
        vue.createCommentVNode(" 登录入口 "),
        vue.createElementVNode("view", {
          class: "nav-item login-item",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goToLogin && $options.goToLogin(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-icon login-icon" }, [
            vue.createElementVNode("text", { class: "icon-text" }, "🔐")
          ]),
          vue.createElementVNode("text", { class: "nav-text" }, "登录/注册"),
          vue.createElementVNode("text", { class: "nav-desc" }, "开始你的交友之旅")
        ]),
        vue.createCommentVNode(" 首页 "),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-icon home-icon" }, [
            vue.createElementVNode("text", { class: "icon-text" }, "🏠")
          ]),
          vue.createElementVNode("text", { class: "nav-text" }, "首页"),
          vue.createElementVNode("text", { class: "nav-desc" }, "发现精彩内容")
        ]),
        vue.createCommentVNode(" 聊天列表 "),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToChatList && $options.goToChatList(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-icon chat-icon" }, [
            vue.createElementVNode("text", { class: "icon-text" }, "💬")
          ]),
          vue.createElementVNode("text", { class: "nav-text" }, "消息"),
          vue.createElementVNode("text", { class: "nav-desc" }, "查看聊天记录")
        ]),
        vue.createCommentVNode(" AI聊天 "),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToAIChat && $options.goToAIChat(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-icon ai-icon" }, [
            vue.createElementVNode("text", { class: "icon-text" }, "🤖")
          ]),
          vue.createElementVNode("text", { class: "nav-text" }, "AI助手"),
          vue.createElementVNode("text", { class: "nav-desc" }, "智能对话体验")
        ]),
        vue.createCommentVNode(" 好友列表 "),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-icon friend-icon" }, [
            vue.createElementVNode("text", { class: "icon-text" }, "👥")
          ]),
          vue.createElementVNode("text", { class: "nav-text" }, "好友"),
          vue.createElementVNode("text", { class: "nav-desc" }, "管理好友关系")
        ]),
        vue.createCommentVNode(" 个人主页 "),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-icon profile-icon" }, [
            vue.createElementVNode("text", { class: "icon-text" }, "👤")
          ]),
          vue.createElementVNode("text", { class: "nav-text" }, "我的"),
          vue.createElementVNode("text", { class: "nav-desc" }, "个人资料管理")
        ])
      ]),
      vue.createCommentVNode(" 快速功能区域 "),
      vue.createElementVNode("view", { class: "quick-actions" }, [
        vue.createElementVNode("text", { class: "section-title" }, "快速功能"),
        vue.createElementVNode("view", { class: "action-buttons" }, [
          vue.createElementVNode("view", {
            class: "action-btn",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.goToSettings && $options.goToSettings(...args))
          }, [
            vue.createElementVNode("text", { class: "action-icon" }, "⚙️"),
            vue.createElementVNode("text", { class: "action-text" }, "设置")
          ]),
          vue.createElementVNode("view", {
            class: "action-btn",
            onClick: _cache[7] || (_cache[7] = (...args) => $options.goToWallet && $options.goToWallet(...args))
          }, [
            vue.createElementVNode("text", { class: "action-icon" }, "💰"),
            vue.createElementVNode("text", { class: "action-text" }, "钱包")
          ]),
          vue.createElementVNode("view", {
            class: "action-btn",
            onClick: _cache[8] || (_cache[8] = (...args) => $options.goToHelp && $options.goToHelp(...args))
          }, [
            vue.createElementVNode("text", { class: "action-icon" }, "❓"),
            vue.createElementVNode("text", { class: "action-text" }, "帮助")
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部信息 "),
      vue.createElementVNode("view", { class: "footer-info" }, [
        vue.createElementVNode("text", { class: "version-text" }, "版本 3.0.0"),
        vue.createElementVNode("text", { class: "copyright-text" }, "© 2024 Afriends. All rights reserved.")
      ])
    ]);
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$17], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/index/index.vue"]]);
  function formatAppLog(type, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type, filename, ...args);
    } else {
      console[type].apply(console, [...args, filename]);
    }
  }
  const _sfc_main$17 = {
    name: "AiPage",
    data() {
      return {
        showSideMenu: false
        // 控制左侧菜单显示
      };
    },
    methods: {
      openMenu() {
        this.showSideMenu = true;
      },
      closeSideMenu() {
        this.showSideMenu = false;
      },
      // 侧边菜单相关方法
      goToMyAI() {
        uni.navigateTo({
          url: "/pages/ai/ai"
        });
      },
      goToMyCertification() {
        uni.navigateTo({
          url: "/pages/verification/official-certification"
        });
      },
      goToMyPreferences() {
        uni.navigateTo({
          url: "/pages/feed/likes-dislikes"
        });
      },
      goToMyAchievements() {
        uni.navigateTo({
          url: "/pages/feed/achievements"
        });
      },
      goToAlbum() {
        uni.showToast({
          title: "相册功能开发中",
          icon: "none"
        });
      },
      goToHistoryComments() {
        uni.navigateTo({
          url: "/pages/feed/interaction-messages"
        });
      },
      goToBrowsingHistory() {
        uni.showToast({
          title: "浏览记录功能开发中",
          icon: "none"
        });
      },
      goToDraftBox() {
        uni.showToast({
          title: "草稿箱功能开发中",
          icon: "none"
        });
      },
      goToPurchaseRecord() {
        uni.navigateTo({
          url: "/pages/wallet/purchase-record"
        });
      },
      goToShoppingCart() {
        uni.showToast({
          title: "购物车功能开发中",
          icon: "none"
        });
      },
      goToWallet() {
        uni.navigateTo({
          url: "/pages/wallet/wallet"
        });
      },
      goToEditProfile() {
        uni.showToast({
          title: "编辑资料功能开发中",
          icon: "none"
        });
      },
      goToAIImage() {
        formatAppLog("log", "at pages/ai/ai.vue:177", "点击AI形象，准备跳转");
        uni.navigateTo({
          url: "/pages/ai/gift"
        });
      }
    }
  };
  function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "ai-page" }, [
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "btn back",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.openMenu && $options.openMenu(...args))
        }),
        vue.createElementVNode("view", { class: "btn settings" })
      ]),
      vue.createElementVNode("view", { class: "profile" }, [
        vue.createElementVNode("view", { class: "avatar-wrap" }, [
          vue.createElementVNode("image", {
            class: "avatar",
            src: "",
            mode: "aspectFill"
          })
        ]),
        vue.createElementVNode("text", { class: "name" }, "相亲AI"),
        vue.createElementVNode("text", { class: "level" }, "lv10 经验2000/4000")
      ]),
      vue.createElementVNode("view", { class: "sections" }, [
        vue.createElementVNode("view", {
          class: "cell",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToAIImage && $options.goToAIImage(...args))
        }, [
          vue.createElementVNode("view", { class: "cell-icon" }),
          vue.createElementVNode("text", { class: "cell-title" }, "AI形象")
        ]),
        vue.createElementVNode("view", { class: "cell" }, [
          vue.createElementVNode("view", { class: "cell-icon" }),
          vue.createElementVNode("text", { class: "cell-title" }, "任务")
        ])
      ]),
      vue.createCommentVNode(" 左侧菜单面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["side-menu", { "active": $data.showSideMenu }]),
          onClick: _cache[15] || (_cache[15] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "menu-content",
            onClick: _cache[14] || (_cache[14] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createCommentVNode(" 菜单头部 "),
            vue.createElementVNode("view", { class: "menu-header" }, [
              vue.createElementVNode("view", {
                class: "menu-close",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
              }, [
                vue.createElementVNode("text", { class: "close-icon" }, "×")
              ])
            ]),
            vue.createCommentVNode(" 菜单选项列表 "),
            vue.createElementVNode("view", { class: "menu-list" }, [
              vue.createCommentVNode(" 我的AI "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[3] || (_cache[3] = (...args) => $options.goToMyAI && $options.goToMyAI(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的AI")
                ])
              ]),
              vue.createCommentVNode(" 我的认证、喜恶、成就 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[4] || (_cache[4] = (...args) => $options.goToMyCertification && $options.goToMyCertification(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的认证")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[5] || (_cache[5] = (...args) => $options.goToMyPreferences && $options.goToMyPreferences(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的喜恶")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[6] || (_cache[6] = (...args) => $options.goToMyAchievements && $options.goToMyAchievements(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的成就")
                ])
              ]),
              vue.createCommentVNode(" 相册、历史评论、浏览记录、草稿箱 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[7] || (_cache[7] = (...args) => $options.goToAlbum && $options.goToAlbum(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "相册")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[8] || (_cache[8] = (...args) => $options.goToHistoryComments && $options.goToHistoryComments(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "互动消息")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[9] || (_cache[9] = (...args) => $options.goToBrowsingHistory && $options.goToBrowsingHistory(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "浏览记录")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[10] || (_cache[10] = (...args) => $options.goToDraftBox && $options.goToDraftBox(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "草稿箱")
                ])
              ]),
              vue.createCommentVNode(" 购买记录、钱包 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[11] || (_cache[11] = (...args) => $options.goToPurchaseRecord && $options.goToPurchaseRecord(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "购买记录")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[12] || (_cache[12] = (...args) => $options.goToWallet && $options.goToWallet(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "钱包")
                ])
              ]),
              vue.createCommentVNode(" 编辑资料 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[13] || (_cache[13] = (...args) => $options.goToEditProfile && $options.goToEditProfile(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "编辑资料")
                ])
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesAiAi = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$16], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/ai.vue"]]);
  const _sfc_main$16 = {
    name: "CustomizeAiPage",
    data() {
      return {};
    },
    methods: {
      goToLevelUp() {
        uni.navigateTo({
          url: "/pages/ai/level-up"
        });
      }
    }
  };
  function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "customize-ai-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-btn">\n				<text class="back-arrow">&lt;</text>\n			</view>\n			<text class="title">自定义AI</text>\n		</view> '),
      vue.createCommentVNode(" AI资料区域 "),
      vue.createElementVNode("view", { class: "ai-profile" }, [
        vue.createElementVNode("view", { class: "ai-avatar-wrap" }, [
          vue.createElementVNode("image", {
            class: "ai-avatar",
            src: "",
            mode: "aspectFill"
          })
        ]),
        vue.createElementVNode("view", { class: "ai-info" }, [
          vue.createElementVNode("text", { class: "ai-name" }, "相亲AI"),
          vue.createElementVNode("view", { class: "ai-level-row" }, [
            vue.createElementVNode("text", { class: "ai-level" }, "Lv10"),
            vue.createElementVNode("text", {
              class: "level-up-link",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.goToLevelUp && $options.goToLevelUp(...args))
            }, "等级提升")
          ])
        ])
      ]),
      vue.createCommentVNode(" 分割线 "),
      vue.createElementVNode("view", { class: "divider" }),
      vue.createCommentVNode(" 声音设定区域 "),
      vue.createCommentVNode(' <view class="voice-section">\n			<text class="section-title">声音设定</text>\n			<view class="voice-selector">\n				<text class="voice-label">声音</text>\n				<view class="voice-dropdown">\n					<text class="voice-value">我的声音</text>\n					<view class="dropdown-arrow"></view>\n				</view>\n			</view>\n			<view class="record-btn">\n				<text class="record-text">按住录音</text>\n			</view>\n			<view class="playback-controls">\n				<view class="play-btn"></view>\n				<view class="volume-slider">\n					<view class="slider-track">\n						<view class="slider-fill"></view>\n						<view class="slider-handle"></view>\n					</view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 分割线 "),
      vue.createElementVNode("view", { class: "divider" }),
      vue.createCommentVNode(" 礼物限额区域 "),
      vue.createElementVNode("view", { class: "gift-section" }, [
        vue.createElementVNode("text", { class: "section-title" }, "礼物限额"),
        vue.createElementVNode("text", { class: "section-desc" }, "设置要给AI的额度"),
        vue.createElementVNode("view", { class: "gift-input" }, [
          vue.createElementVNode("view", { class: "input-field" }, [
            vue.createElementVNode("text", { class: "placeholder" }, "请输入")
          ]),
          vue.createElementVNode("text", { class: "currency" }, "金币")
        ])
      ]),
      vue.createCommentVNode(" 保存按钮 "),
      vue.createElementVNode("view", { class: "save-section" }, [
        vue.createElementVNode("view", { class: "save-btn" }, [
          vue.createElementVNode("text", { class: "save-text" }, "保存")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesAiCustomizeAi = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$15], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/customize-ai.vue"]]);
  const _sfc_main$15 = {
    name: "GiftPage",
    data() {
      return {
        // AI模型信息
        userAiId: null,
        userId: null,
        aiName: "",
        aiAvatar: "/static/logo.png",
        level: 1,
        currentExp: 0,
        nextExp: 1e3,
        power: 0,
        // 任务信息
        activeTaskCount: 0,
        // 礼物信息
        gifts: [],
        showGiftsList: true,
        // 等级规则信息
        levelRules: [],
        currentLevelRule: null,
        nextLevelRule: null,
        // 加载状态
        loading: false,
        errorMessage: ""
      };
    },
    onLoad(options) {
      formatAppLog("log", "at pages/ai/gift.vue:163", "gift页面加载，接收到的参数:", options);
      if (options.userAiId) {
        this.userAiId = parseInt(options.userAiId);
      }
      if (options.aiName) {
        this.aiName = decodeURIComponent(options.aiName);
      }
      if (!this.aiName && this.userAiId) {
        this.aiName = this.userAiId.toString();
      }
      this.userId = uni.getStorageSync("userId") || 1;
      this.loadAiModelData();
      this.loadLevelRules();
      this.loadGiftData();
      this.loadActiveTaskCount();
    },
    // 页面显示时刷新数据（从level-up页面返回时会触发）
    onShow() {
      formatAppLog("log", "at pages/ai/gift.vue:190", "gift页面显示，刷新AI模型数据");
      this.loadAiModelData();
      this.loadLevelRules();
      this.loadActiveTaskCount();
    },
    computed: {
      progressPercent() {
        const p = Math.min(100, Math.max(0, this.currentExp / this.nextExp * 100));
        return Number(p.toFixed(2));
      },
      selectedGiftsCount() {
        return this.gifts.reduce((sum, g) => sum + g.count, 0);
      }
    },
    methods: {
      // 加载AI模型数据
      async loadAiModelData() {
        if (!this.userAiId) {
          formatAppLog("log", "at pages/ai/gift.vue:209", "没有userAiId，无法加载AI模型数据");
          return;
        }
        try {
          this.loading = true;
          formatAppLog("log", "at pages/ai/gift.vue:215", "开始加载AI模型数据，userAiId:", this.userAiId);
          let response = await uni.request({
            url: `http://localhost:8888/api/user-ai-model/${this.userAiId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/gift.vue:226", "用户AI模型数据响应:", response);
          if (response.statusCode !== 200 || !response.data) {
            formatAppLog("log", "at pages/ai/gift.vue:230", "用户AI模型不存在，尝试从基础模型获取");
            response = await uni.request({
              url: `http://localhost:8888/api/a-entities/aimodel-base-info/${this.userAiId}`,
              method: "GET",
              header: {
                "Content-Type": "application/json"
              }
            });
            formatAppLog("log", "at pages/ai/gift.vue:238", "基础AI模型数据响应:", response);
          }
          if (response.statusCode === 200 && response.data) {
            const modelData = response.data;
            if (modelData.modelName || modelData.name) {
              this.aiName = modelData.modelName || modelData.name;
            }
            const imageUrl = modelData.modelImageUrl || modelData.imageUrl;
            if (imageUrl && this.isValidImageUrl(imageUrl)) {
              this.aiAvatar = imageUrl;
            } else {
              this.aiAvatar = "";
              formatAppLog("log", "at pages/ai/gift.vue:255", "AI模型图片URL无效，使用默认头像:", imageUrl);
            }
            this.level = modelData.level || 1;
            this.currentExp = modelData.totalExp || modelData.exp || 0;
            this.power = modelData.power || 0;
            this.updateLevelRules();
            formatAppLog("log", "at pages/ai/gift.vue:265", "AI模型数据加载成功:", {
              aiName: this.aiName,
              level: this.level,
              currentExp: this.currentExp,
              nextExp: this.nextExp
            });
          } else {
            formatAppLog("error", "at pages/ai/gift.vue:272", "加载AI模型数据失败:", response);
            formatAppLog("log", "at pages/ai/gift.vue:274", "保持传入的AI名称:", this.aiName);
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/gift.vue:277", "加载AI模型数据异常:", error);
          this.errorMessage = "网络错误，请检查连接";
        } finally {
          this.loading = false;
        }
      },
      // 加载等级规则数据
      async loadLevelRules() {
        try {
          formatAppLog("log", "at pages/ai/gift.vue:287", "=== 开始加载等级规则数据 ===");
          const response = await uni.request({
            url: "http://localhost:8888/api/aimodel-level-rule/all-ordered",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/gift.vue:297", "等级规则数据响应:", response);
          formatAppLog("log", "at pages/ai/gift.vue:298", "响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/ai/gift.vue:299", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            this.levelRules = response.data.data;
            formatAppLog("log", "at pages/ai/gift.vue:303", "等级规则数据加载成功，数量:", this.levelRules.length);
            formatAppLog("log", "at pages/ai/gift.vue:304", "前3条等级规则数据:", this.levelRules.slice(0, 3));
            this.updateLevelRules();
          } else {
            formatAppLog("error", "at pages/ai/gift.vue:309", "加载等级规则数据失败:", response);
            formatAppLog("error", "at pages/ai/gift.vue:310", "失败原因:", response.data ? response.data.message : "未知错误");
            this.setDefaultLevelRules();
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/gift.vue:315", "加载等级规则数据异常:", error);
          formatAppLog("error", "at pages/ai/gift.vue:316", "异常详情:", error.message);
          this.setDefaultLevelRules();
        }
      },
      // 更新等级规则
      updateLevelRules() {
        formatAppLog("log", "at pages/ai/gift.vue:324", "=== 开始更新等级规则 ===");
        formatAppLog("log", "at pages/ai/gift.vue:325", "当前状态:", {
          levelRulesLength: this.levelRules.length,
          currentLevel: this.level,
          currentExp: this.currentExp
        });
        if (this.levelRules.length === 0) {
          formatAppLog("warn", "at pages/ai/gift.vue:332", "等级规则数据为空，使用默认规则");
          this.setDefaultLevelRules();
          return;
        }
        this.currentLevelRule = this.levelRules.find((rule) => rule.level === this.level);
        formatAppLog("log", "at pages/ai/gift.vue:339", "当前等级规则查找结果:", this.currentLevelRule);
        if (this.currentLevelRule) {
          this.nextExp = this.currentLevelRule.expRequirement;
          formatAppLog("log", "at pages/ai/gift.vue:344", "设置nextExp为当前等级所需经验:", this.nextExp);
          formatAppLog("log", "at pages/ai/gift.vue:345", "等级规则说明: 等级", this.level, "需要", this.nextExp, "经验才能升级");
        } else {
          this.nextExp = 0;
          formatAppLog("error", "at pages/ai/gift.vue:349", "找不到当前等级", this.level, "的规则，设置nextExp为0");
        }
        formatAppLog("log", "at pages/ai/gift.vue:352", "等级规则更新完成:", {
          currentLevel: this.level,
          currentExp: this.currentExp,
          nextExp: this.nextExp,
          currentLevelRule: this.currentLevelRule,
          nextLevelRule: this.nextLevelRule
        });
      },
      // 设置默认等级规则
      setDefaultLevelRules() {
        formatAppLog("log", "at pages/ai/gift.vue:363", "使用默认等级规则 - 数据未正确加载");
        this.levelRules = [];
        this.currentLevelRule = null;
        this.nextLevelRule = null;
        this.nextExp = 0;
        formatAppLog("warn", "at pages/ai/gift.vue:369", "等级规则数据未加载，nextExp设置为0，请检查数据加载逻辑");
      },
      // 加载礼物数据
      async loadGiftData() {
        try {
          formatAppLog("log", "at pages/ai/gift.vue:375", "开始加载礼物数据");
          const response = await uni.request({
            url: "http://localhost:8888/api/efmprt-entities-wlq/gift-base/all",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/gift.vue:385", "礼物数据响应:", response);
          if (response.statusCode === 200 && response.data) {
            this.gifts = this.convertGiftDataToDisplayFormat(response.data);
            formatAppLog("log", "at pages/ai/gift.vue:389", "礼物数据加载成功，数量:", this.gifts.length);
          } else {
            formatAppLog("error", "at pages/ai/gift.vue:391", "加载礼物数据失败:", response);
            this.errorMessage = "加载礼物数据失败";
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/gift.vue:395", "加载礼物数据异常:", error);
          this.errorMessage = "网络错误，请检查连接";
        }
      },
      // 转换礼物数据为显示格式
      convertGiftDataToDisplayFormat(giftData) {
        return giftData.map((gift, index) => {
          let name = "";
          let description = "";
          if (gift.description && gift.description.includes("：")) {
            const parts = gift.description.split("：", 2);
            name = parts[0].trim();
            description = parts[1].trim();
          } else if (gift.description && gift.description.includes(":")) {
            const parts = gift.description.split(":", 2);
            name = parts[0].trim();
            description = parts[1].trim();
          } else {
            name = gift.description || `礼物${index + 1}`;
            description = "暂无描述";
          }
          const priceInGold = Math.round((gift.price || 0) * 100);
          const iconClass = this.getGiftIconClass(name);
          return {
            id: gift.giftId,
            name,
            description,
            price: priceInGold,
            count: 0,
            iconClass
          };
        });
      },
      // 根据礼物名称获取图标类
      getGiftIconClass(name) {
        const nameLower = name.toLowerCase();
        if (nameLower.includes("花") || nameLower.includes("flower"))
          return "gift-flower";
        if (nameLower.includes("啤酒") || nameLower.includes("beer"))
          return "gift-beer";
        if (nameLower.includes("糖") || nameLower.includes("candy") || nameLower.includes("lollipop"))
          return "gift-lollipop";
        if (nameLower.includes("圈") || nameLower.includes("donut"))
          return "gift-donut";
        if (nameLower.includes("巧克力") || nameLower.includes("chocolate"))
          return "gift-chocolate";
        if (nameLower.includes("心") || nameLower.includes("heart"))
          return "gift-heart";
        if (nameLower.includes("发箍") || nameLower.includes("hairband"))
          return "gift-hairband";
        if (nameLower.includes("游戏") || nameLower.includes("game"))
          return "gift-game";
        return "gift-flower";
      },
      goBack() {
        uni.navigateBack();
      },
      goLevelUp() {
        formatAppLog("log", "at pages/ai/gift.vue:454", "gift.vue goLevelUp 被调用，userAiId:", this.userAiId);
        uni.navigateTo({
          url: `/pages/ai/level-up?userAiId=${this.userAiId}`
        });
      },
      goToPermissions() {
        uni.navigateTo({ url: "/pages/ai/permissions" });
      },
      goToTasks() {
        uni.navigateTo({ url: "/pages/ai/tasks" });
      },
      // 加载进行中的任务数量
      async loadActiveTaskCount() {
        try {
          formatAppLog("log", "at pages/ai/gift.vue:465", "开始加载进行中的任务数量，用户ID:", this.userId);
          const response = await uni.request({
            url: "http://localhost:8888/api/u-entities/user-task-relationship/all",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/gift.vue:475", "用户任务关系数据响应:", response);
          if (response.statusCode === 200 && response.data) {
            const userTasks = response.data.filter((task) => task.userId === this.userId);
            const activeTasks = userTasks.filter((task) => task.status === 1);
            this.activeTaskCount = activeTasks.length;
            formatAppLog("log", "at pages/ai/gift.vue:482", "用户任务总数:", userTasks.length, "进行中的任务数量:", this.activeTaskCount);
          } else {
            formatAppLog("error", "at pages/ai/gift.vue:484", "加载任务数据失败");
            this.activeTaskCount = 0;
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/gift.vue:488", "加载任务数据异常:", error);
          this.activeTaskCount = 0;
        }
      },
      toggleGiftsList() {
        this.showGiftsList = !this.showGiftsList;
      },
      increaseGift(index) {
        this.gifts[index].count++;
      },
      decreaseGift(index) {
        if (this.gifts[index].count > 0) {
          this.gifts[index].count--;
        }
      },
      async checkout() {
        if (this.selectedGiftsCount <= 0) {
          uni.showToast({ title: "请选择礼物", icon: "none" });
          return;
        }
        try {
          uni.showLoading({
            title: "正在赠送礼物..."
          });
          const purchaseRecords = [];
          let totalCoinsSpent = 0;
          for (const gift of this.gifts) {
            if (gift.count > 0) {
              for (let i = 0; i < gift.count; i++) {
                const purchaseRecord = {
                  userId: this.userId,
                  itemType: "gift",
                  // 商品类型：礼物
                  itemId: gift.id,
                  itemName: gift.name,
                  coinsSpent: gift.price,
                  coinsBalance: 0,
                  // 这里可以计算用户剩余金币
                  purchasePath: `gift_page_${this.userAiId}`
                  // 购买路径，包含userAiId用于AI模型金币日志
                };
                purchaseRecords.push(purchaseRecord);
                totalCoinsSpent += gift.price;
              }
            }
          }
          formatAppLog("log", "at pages/ai/gift.vue:538", "准备保存的购买记录:", purchaseRecords);
          formatAppLog("log", "at pages/ai/gift.vue:539", "总花费金币:", totalCoinsSpent);
          const response = await uni.request({
            url: "http://localhost:8888/api/purchase-record/save-batch",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: purchaseRecords
          });
          formatAppLog("log", "at pages/ai/gift.vue:551", "购买记录保存响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            uni.hideLoading();
            uni.showToast({
              title: `成功赠送 ${this.selectedGiftsCount} 个礼物！花费 ${totalCoinsSpent} 金币`,
              icon: "success",
              duration: 2e3
            });
            this.gifts.forEach((gift) => gift.count = 0);
          } else {
            if (response.data.message && response.data.message.includes("金币不足")) {
              uni.hideLoading();
              uni.showToast({
                title: "金币不足，无法赠送礼物",
                icon: "none",
                duration: 2e3
              });
            } else {
              throw new Error(response.data.message || "赠送失败");
            }
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/gift.vue:577", "赠送礼物失败:", error);
          uni.hideLoading();
          uni.showToast({
            title: "赠送失败，请重试",
            icon: "none"
          });
        }
      },
      modifyPhoto() {
        uni.showActionSheet({
          itemList: ["拍照", "从相册选择"],
          success: (res) => {
            if (res.tapIndex === 0) {
              this.openCamera();
            } else if (res.tapIndex === 1) {
              this.selectFromAlbum();
            }
          }
        });
      },
      modifyName() {
        uni.showModal({
          title: "修改AI名称",
          editable: true,
          placeholderText: "请输入新的AI名称",
          content: this.aiName,
          success: (res) => {
            if (res.confirm && res.content.trim()) {
              const newName = res.content.trim();
              this.updateAiName(newName);
            }
          }
        });
      },
      // 更新AI名字到数据库
      async updateAiName(newName) {
        try {
          if (!this.userAiId) {
            uni.showToast({
              title: "AI模型ID不存在",
              icon: "none"
            });
            return;
          }
          this.aiName = newName;
          const response = await uni.request({
            url: `http://localhost:8888/api/user-ai-model/update-name/${this.userAiId}`,
            method: "PUT",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              modelName: newName
            }
          });
          if (response.statusCode === 200) {
            uni.showToast({
              title: "AI名字修改成功",
              icon: "success"
            });
          } else {
            throw new Error("更新失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/gift.vue:649", "更新AI名字失败:", error);
          uni.showToast({
            title: "修改失败，请重试",
            icon: "none"
          });
        }
      },
      openCamera() {
        uni.chooseImage({
          count: 1,
          sourceType: ["camera"],
          success: (res) => {
            this.aiAvatar = res.tempFilePaths[0];
            uni.showToast({
              title: "照片修改成功",
              icon: "success"
            });
          }
        });
      },
      selectFromAlbum() {
        uni.chooseImage({
          count: 1,
          sourceType: ["album"],
          success: (res) => {
            this.aiAvatar = res.tempFilePaths[0];
            uni.showToast({
              title: "照片修改成功",
              icon: "success"
            });
          }
        });
      },
      // 验证图片URL是否有效
      isValidImageUrl(url) {
        if (!url || typeof url !== "string") {
          return false;
        }
        const validExtensions = [".jpg", ".jpeg", ".png", ".gif", ".webp", ".svg"];
        const hasValidExtension = validExtensions.some(
          (ext) => url.toLowerCase().includes(ext)
        );
        const isFakeUrl = url.includes("example.com") || url.includes("placeholder") || url.includes("fake") || url.startsWith("http://localhost") && url.includes("static");
        const isValidHttpUrl = url.startsWith("http://") || url.startsWith("https://");
        return hasValidExtension && !isFakeUrl && isValidHttpUrl;
      },
      // 图片加载错误处理
      onImageError() {
        formatAppLog("log", "at pages/ai/gift.vue:711", "图片加载失败，切换到默认头像");
        this.aiAvatar = "";
      },
      // 获取头像显示文字
      getAvatarText() {
        if (!this.aiName) {
          return "AI";
        }
        return this.aiName.charAt(0).toUpperCase();
      }
    }
  };
  function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "gift-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<svg t="1756247334143" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1052" width="32" height="32">\n					<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666" p-id="1053"></path>\n				</svg>\n			</view>\n			<view class="header-title">\n				<text class="title-text">模型信息</text>\n			</view>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" AI 概览 "),
      vue.createElementVNode("view", { class: "ai-summary" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载AI信息中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.loadAiModelData && $options.loadAiModelData(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 正常显示 "),
            vue.createElementVNode("view", null, [
              vue.createElementVNode("view", {
                class: "avatar-wrap",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.modifyPhoto && $options.modifyPhoto(...args))
              }, [
                $options.isValidImageUrl($data.aiAvatar) ? (vue.openBlock(), vue.createElementBlock("image", {
                  key: 0,
                  class: "avatar",
                  src: $data.aiAvatar,
                  mode: "aspectFill",
                  onError: _cache[1] || (_cache[1] = (...args) => $options.onImageError && $options.onImageError(...args))
                }, null, 40, ["src"])) : (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "avatar avatar-placeholder"
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "avatar-text" },
                    vue.toDisplayString($options.getAvatarText()),
                    1
                    /* TEXT */
                  )
                ])),
                vue.createElementVNode("view", { class: "edit-overlay" }, [
                  vue.createElementVNode("text", null, "点击修改照片")
                ])
              ]),
              vue.createElementVNode("view", { class: "ai-info" }, [
                vue.createElementVNode("view", { class: "name-row" }, [
                  vue.createElementVNode("view", {
                    class: "ai-name",
                    onClick: _cache[3] || (_cache[3] = (...args) => $options.modifyName && $options.modifyName(...args))
                  }, [
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString($data.aiName || "AI小助手"),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "edit-icon" }, "✏️")
                  ]),
                  vue.createElementVNode("view", {
                    class: "perm-pill",
                    onClick: _cache[4] || (_cache[4] = (...args) => $options.goToPermissions && $options.goToPermissions(...args))
                  }, [
                    vue.createElementVNode("view", { class: "perm-dot" }, "!"),
                    vue.createElementVNode("text", { class: "perm-text" }, "权限")
                  ])
                ]),
                vue.createElementVNode("view", { class: "level-row" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "level-text" },
                    "Lv" + vue.toDisplayString($data.level),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", {
                    class: "level-up-btn",
                    onClick: _cache[5] || (_cache[5] = (...args) => $options.goLevelUp && $options.goLevelUp(...args))
                  }, [
                    vue.createElementVNode("text", { class: "btn-text" }, "等级提升")
                  ])
                ]),
                vue.createElementVNode("view", { class: "progress-row" }, [
                  vue.createElementVNode("view", { class: "progress" }, [
                    vue.createElementVNode("view", { class: "track" }),
                    vue.createElementVNode(
                      "view",
                      {
                        class: "fill",
                        style: vue.normalizeStyle({ width: $options.progressPercent + "%" })
                      },
                      null,
                      4
                      /* STYLE */
                    ),
                    vue.createCommentVNode(' <view class="thumb"></view> ')
                  ]),
                  vue.createElementVNode(
                    "text",
                    { class: "progress-text" },
                    vue.toDisplayString($data.currentExp) + "/" + vue.toDisplayString($data.nextExp),
                    1
                    /* TEXT */
                  )
                ])
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 任务行 "),
      vue.createElementVNode("view", {
        class: "task-row",
        onClick: _cache[6] || (_cache[6] = (...args) => $options.goToTasks && $options.goToTasks(...args))
      }, [
        vue.createElementVNode("view", { class: "task-left" }, [
          vue.createElementVNode("view", { class: "task-icon" }, "📋"),
          vue.createElementVNode("text", { class: "task-text" }, "任务")
        ]),
        vue.createElementVNode("view", { class: "task-right" }, [
          vue.createElementVNode(
            "text",
            { class: "task-count" },
            vue.toDisplayString($data.activeTaskCount) + " 个进行中",
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "task-arrow" }, ">")
        ])
      ]),
      vue.createCommentVNode(" 礼物列表 "),
      vue.createElementVNode("view", { class: "gift-list" }, [
        vue.createElementVNode("view", {
          class: "gift-header",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.toggleGiftsList && $options.toggleGiftsList(...args))
        }, [
          vue.createElementVNode("view", { class: "header-left" }, [
            vue.createCommentVNode(' 				<view class="back-arrow-svg" @click="goBack">\n					<svg t="1756247334143" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1052" width="32" height="32">\n						<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666" p-id="1053"></path>\n					</svg>\n				</view> '),
            vue.createElementVNode("text", { class: "header-title" }, "礼物"),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["dropdown-arrow", { "rotated": $data.showGiftsList }])
              },
              null,
              2
              /* CLASS */
            )
          ]),
          vue.createElementVNode("text", { class: "header-subtitle" }, "定价 (金币)")
        ]),
        vue.withDirectives(vue.createElementVNode(
          "view",
          { class: "gift-items" },
          [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.gifts, (gift, i) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "gift-item",
                  key: i
                }, [
                  vue.createElementVNode("view", { class: "gift-left" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["gift-icon", gift.iconClass])
                      },
                      null,
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode("view", { class: "gift-info" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "gift-name" },
                        vue.toDisplayString(gift.name),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "gift-description" },
                        vue.toDisplayString(gift.description),
                        1
                        /* TEXT */
                      )
                    ])
                  ]),
                  vue.createElementVNode("view", { class: "gift-right" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "gift-price" },
                      vue.toDisplayString(gift.price),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "quantity-controls" }, [
                      vue.createElementVNode("view", {
                        class: vue.normalizeClass(["control-btn minus", { disabled: gift.count <= 0 }]),
                        onClick: ($event) => $options.decreaseGift(i)
                      }, "-", 10, ["onClick"]),
                      vue.createElementVNode(
                        "text",
                        { class: "quantity-display" },
                        vue.toDisplayString(gift.count),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("view", {
                        class: "control-btn plus",
                        onClick: ($event) => $options.increaseGift(i)
                      }, "+", 8, ["onClick"])
                    ])
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          512
          /* NEED_PATCH */
        ), [
          [vue.vShow, $data.showGiftsList]
        ])
      ]),
      vue.createCommentVNode(" 底部购物条 "),
      vue.createElementVNode("view", { class: "cart-bar" }, [
        vue.createElementVNode(
          "text",
          { class: "cart-total" },
          "已选礼物：" + vue.toDisplayString($options.selectedGiftsCount) + " 个",
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", {
          class: "checkout-btn",
          onClick: _cache[8] || (_cache[8] = (...args) => $options.checkout && $options.checkout(...args))
        }, [
          vue.createElementVNode("text", { class: "checkout-text" }, "赠送")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesAiGift = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$14], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/gift.vue"]]);
  const _sfc_main$14 = {
    name: "LevelUpPage",
    data() {
      return {
        packs: [],
        selectedIndex: 0,
        coinBalance: 0,
        loading: false,
        errorMessage: "",
        // AI模型信息
        userAiId: null,
        userId: null,
        currentLevel: 1,
        currentExp: 0,
        levelRules: []
      };
    },
    onLoad(options) {
      if (options.userAiId) {
        this.userAiId = parseInt(options.userAiId);
      }
      this.userId = uni.getStorageSync("userId") || 1;
      this.loadProducts();
      this.loadUserBalance();
      this.loadAiModelData();
      this.loadLevelRules();
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      selectPack(idx) {
        this.selectedIndex = idx;
      },
      async recharge() {
        const p = this.packs[this.selectedIndex];
        if (!p) {
          uni.showToast({
            title: "请选择升级套餐",
            icon: "error"
          });
          return;
        }
        if (this.coinBalance < p.price) {
          uni.showToast({
            title: "金币不足，无法升级",
            icon: "error"
          });
          return;
        }
        const confirmResult = await new Promise((resolve) => {
          uni.showModal({
            title: "确认升级",
            content: `确定要花费 ${p.price} 金币购买 ${p.coin} 经验吗？`,
            success: (res) => resolve(res.confirm),
            fail: () => resolve(false)
          });
        });
        if (!confirmResult) {
          return;
        }
        uni.showLoading({
          title: "升级中..."
        });
        try {
          const purchaseRecord = {
            userId: uni.getStorageSync("userId") || 1,
            itemType: "level_up",
            itemId: p.id,
            itemName: `${p.coin}金币升级套餐`,
            coinsSpent: p.price,
            coinsBalance: 0,
            // 将在后端计算
            purchasePath: "level_up_page"
          };
          const response = await uni.request({
            url: "http://localhost:8888/api/purchase-record/save-batch",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: [purchaseRecord]
          });
          if (response.statusCode === 200 && response.data.success) {
            await this.loadUserBalance();
            const expGained = p.price;
            formatAppLog("log", "at pages/ai/level-up.vue:170", "购买成功，准备增加经验:", {
              expGained,
              currentLevel: this.currentLevel,
              currentExp: this.currentExp,
              userAiId: this.userAiId
            });
            uni.showToast({
              title: `准备增加经验：+${expGained}`,
              icon: "none",
              duration: 2e3
            });
            await this.addExperience(expGained);
            uni.showToast({
              title: "购买成功！",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateBack();
            }, 1500);
          } else {
            throw new Error(response.data.message || "购买失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/level-up.vue:199", "升级失败:", error);
          if (error.message && error.message.includes("金币不足")) {
            uni.showToast({
              title: "金币不足，升级失败",
              icon: "error"
            });
          } else {
            uni.showToast({
              title: "升级失败，请重试",
              icon: "error"
            });
          }
        } finally {
          uni.hideLoading();
        }
      },
      // 加载产品数据
      async loadProducts() {
        this.loading = true;
        this.errorMessage = "";
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/products-base/available",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          if (response.statusCode === 200 && response.data.success) {
            this.packs = this.convertProductsToDisplayFormat(response.data.data);
            formatAppLog("log", "at pages/ai/level-up.vue:234", "产品数据加载成功:", this.packs);
          } else {
            throw new Error(response.data.message || "加载产品数据失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/level-up.vue:239", "加载产品数据失败:", error);
          this.errorMessage = "加载产品数据失败，请重试";
          this.packs = [
            { coin: 10, price: 100, coinExtra: 0, expExtra: 0 },
            { coin: 100, price: 1e3, coinExtra: 0, expExtra: 0 },
            { coin: 500, price: 5e3, coinExtra: 0, expExtra: 0 },
            { coin: 1e3, price: 1e4, coinExtra: 0, expExtra: 0 }
          ];
        } finally {
          this.loading = false;
        }
      },
      // 加载用户金币余额
      async loadUserBalance() {
        try {
          const userId = uni.getStorageSync("userId") || 1;
          const response = await uni.request({
            url: `http://localhost:8888/api/users/${userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          if (response.statusCode === 200 && response.data) {
            this.coinBalance = response.data.gold || 0;
            formatAppLog("log", "at pages/ai/level-up.vue:267", "用户金币余额:", this.coinBalance);
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/level-up.vue:270", "加载用户余额失败:", error);
          this.coinBalance = 0;
        }
      },
      // 转换产品数据为显示格式
      convertProductsToDisplayFormat(products) {
        return products.map((product) => ({
          id: product.coinRechargeId,
          coin: product.coinNum || 0,
          price: product.expNum || 0,
          coinExtra: product.coinExtraNum || 0,
          expExtra: product.expExtraNum || 0,
          extraNum: product.extraNum || 0,
          status: product.status || 0
        }));
      },
      // 加载AI模型数据
      async loadAiModelData() {
        formatAppLog("log", "at pages/ai/level-up.vue:290", "loadAiModelData 被调用，userAiId:", this.userAiId);
        if (!this.userAiId) {
          formatAppLog("log", "at pages/ai/level-up.vue:292", "没有userAiId，无法加载AI模型数据");
          return;
        }
        try {
          formatAppLog("log", "at pages/ai/level-up.vue:297", "开始加载AI模型数据，userAiId:", this.userAiId);
          const response = await uni.request({
            url: `http://localhost:8888/api/user-ai-model/${this.userAiId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/level-up.vue:307", "AI模型数据响应:", response);
          if (response.statusCode === 200 && response.data) {
            const modelData = response.data;
            this.currentLevel = modelData.level || 1;
            this.currentExp = modelData.totalExp || 0;
            formatAppLog("log", "at pages/ai/level-up.vue:314", "AI模型数据加载成功:", {
              level: this.currentLevel,
              exp: this.currentExp
            });
          } else {
            formatAppLog("error", "at pages/ai/level-up.vue:319", "加载AI模型数据失败:", response);
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/level-up.vue:322", "加载AI模型数据异常:", error);
        }
      },
      // 加载等级规则数据
      async loadLevelRules() {
        try {
          formatAppLog("log", "at pages/ai/level-up.vue:329", "开始加载等级规则数据");
          const response = await uni.request({
            url: "http://localhost:8888/api/aimodel-level-rule/all-ordered",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/level-up.vue:339", "等级规则数据响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            this.levelRules = response.data.data;
            formatAppLog("log", "at pages/ai/level-up.vue:343", "等级规则数据加载成功，数量:", this.levelRules.length);
          } else {
            formatAppLog("error", "at pages/ai/level-up.vue:345", "加载等级规则数据失败:", response);
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/level-up.vue:348", "加载等级规则数据异常:", error);
        }
      },
      // 增加经验并执行升级逻辑
      async addExperience(expGained) {
        formatAppLog("log", "at pages/ai/level-up.vue:354", "=== 开始增加经验并检查升级 ===");
        formatAppLog("log", "at pages/ai/level-up.vue:355", "addExperience 被调用，参数:", {
          userAiId: this.userAiId,
          expGained,
          currentLevel: this.currentLevel,
          currentExp: this.currentExp,
          levelRulesLength: this.levelRules.length
        });
        if (!this.userAiId) {
          formatAppLog("log", "at pages/ai/level-up.vue:364", "缺少userAiId，无法增加经验");
          uni.showToast({
            title: "缺少AI模型ID，无法增加经验",
            icon: "error",
            duration: 3e3
          });
          return;
        }
        if (!this.levelRules.length) {
          formatAppLog("log", "at pages/ai/level-up.vue:374", "缺少等级规则数据，无法检查升级");
          uni.showToast({
            title: "等级规则数据未加载，无法升级",
            icon: "error",
            duration: 3e3
          });
          return;
        }
        let totalExp = this.currentExp + expGained;
        let currentLevel = this.currentLevel;
        let leveledUp = false;
        let upgradeCount = 0;
        formatAppLog("log", "at pages/ai/level-up.vue:389", "经验累加后:", {
          originalExp: this.currentExp,
          expGained,
          totalExp,
          currentLevel
        });
        formatAppLog("log", "at pages/ai/level-up.vue:397", "=== 开始循环升级检查 ===");
        formatAppLog("log", "at pages/ai/level-up.vue:398", "升级检查前状态:", {
          currentLevel,
          totalExp,
          levelRulesCount: this.levelRules.length
        });
        while (true) {
          const currentLevelRule = this.levelRules.find((rule) => rule.level === currentLevel);
          formatAppLog("log", "at pages/ai/level-up.vue:408", `查找等级 ${currentLevel} 的规则:`, currentLevelRule);
          if (!currentLevelRule) {
            formatAppLog("log", "at pages/ai/level-up.vue:411", "没有当前等级规则，停止升级检查");
            break;
          }
          formatAppLog("log", "at pages/ai/level-up.vue:415", `检查等级 ${currentLevel} 升级条件:`, {
            level: currentLevel,
            requiredExp: currentLevelRule.expRequirement,
            currentTotalExp: totalExp,
            canUpgrade: totalExp >= currentLevelRule.expRequirement,
            comparison: `${totalExp} >= ${currentLevelRule.expRequirement} = ${totalExp >= currentLevelRule.expRequirement}`
          });
          if (totalExp >= currentLevelRule.expRequirement) {
            totalExp = totalExp - currentLevelRule.expRequirement;
            currentLevel = currentLevel + 1;
            leveledUp = true;
            upgradeCount++;
            formatAppLog("log", "at pages/ai/level-up.vue:432", `升级成功！等级 ${currentLevel - 1} -> ${currentLevel}，消耗经验: ${currentLevelRule.expRequirement}，剩余经验: ${totalExp}`);
          } else {
            formatAppLog("log", "at pages/ai/level-up.vue:435", `经验不足，无法升级到等级 ${currentLevel + 1}，需要: ${currentLevelRule.expRequirement}，当前: ${totalExp}`);
            break;
          }
        }
        formatAppLog("log", "at pages/ai/level-up.vue:440", "升级检查完成:", {
          originalLevel: this.currentLevel,
          originalExp: this.currentExp,
          finalLevel: currentLevel,
          finalExp: totalExp,
          leveledUp,
          upgradeCount
        });
        await this.updateAiModelLevel(currentLevel, totalExp);
        this.currentLevel = currentLevel;
        this.currentExp = totalExp;
        if (leveledUp) {
          uni.showToast({
            title: `升级成功！等级${currentLevel}，剩余经验${totalExp}`,
            icon: "success",
            duration: 2e3
          });
        } else {
          uni.showToast({
            title: `经验+${expGained}，当前等级${currentLevel}，总经验${totalExp}`,
            icon: "success",
            duration: 2e3
          });
        }
      },
      // 获取当前等级所需经验
      getNextLevelRequirement() {
        if (!this.levelRules.length)
          return 0;
        const currentLevelRule = this.levelRules.find((rule) => rule.level === this.currentLevel);
        formatAppLog("log", "at pages/ai/level-up.vue:476", "getNextLevelRequirement: 当前等级", this.currentLevel, "所需经验", currentLevelRule ? currentLevelRule.expRequirement : 0);
        return currentLevelRule ? currentLevelRule.expRequirement : 0;
      },
      // 更新AI模型等级和经验
      async updateAiModelLevel(newLevel, newExp) {
        try {
          const response = await uni.request({
            url: `http://localhost:8888/api/user-ai-model/update-level/${this.userAiId}`,
            method: "PUT",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              level: newLevel,
              totalExp: newExp
            }
          });
          if (response.statusCode === 200 && response.data.success) {
            this.currentLevel = newLevel;
            this.currentExp = newExp;
            formatAppLog("log", "at pages/ai/level-up.vue:498", "AI模型等级更新成功");
          } else {
            formatAppLog("error", "at pages/ai/level-up.vue:500", "更新AI模型等级失败:", response);
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/level-up.vue:503", "更新AI模型等级异常:", error);
        }
      }
    }
  };
  function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "level-up-page" }, [
      vue.createCommentVNode(" 头部导航（简单占位） "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">等级提升</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 加载状态 "),
      $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "loading-container"
      }, [
        vue.createElementVNode("text", { class: "loading-text" }, "加载中...")
      ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 1 },
        [
          vue.createCommentVNode(" 错误状态 "),
          vue.createElementVNode("view", { class: "error-container" }, [
            vue.createElementVNode(
              "text",
              { class: "error-text" },
              vue.toDisplayString($data.errorMessage),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", {
              class: "retry-btn",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.loadProducts && $options.loadProducts(...args))
            }, [
              vue.createElementVNode("text", { class: "retry-text" }, "重试")
            ])
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )) : (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 2 },
        [
          vue.createCommentVNode(" 金币礼包网格 "),
          vue.createElementVNode("view", { class: "packs-grid" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.packs, (pack, idx) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: vue.normalizeClass(["pack-card", { active: $data.selectedIndex === idx }]),
                  key: pack.id || idx,
                  onClick: ($event) => $options.selectPack(idx)
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "coin-text" },
                    vue.toDisplayString(pack.coin) + "金币",
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "price-text" },
                    vue.toDisplayString(pack.price) + "经验",
                    1
                    /* TEXT */
                  )
                ], 10, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )),
      vue.createCommentVNode(" AI模型状态显示 "),
      vue.createElementVNode("view", { class: "ai-model-status" }, [
        vue.createElementVNode("view", { class: "status-item" }, [
          vue.createElementVNode("text", { class: "label" }, "当前等级："),
          vue.createElementVNode(
            "text",
            { class: "value" },
            vue.toDisplayString($data.currentLevel),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("view", { class: "status-item" }, [
          vue.createElementVNode("text", { class: "label" }, "当前经验："),
          vue.createElementVNode(
            "text",
            { class: "value" },
            vue.toDisplayString($data.currentExp),
            1
            /* TEXT */
          )
        ]),
        $options.getNextLevelRequirement() > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "status-item"
        }, [
          vue.createElementVNode("text", { class: "label" }, "升级需要："),
          vue.createElementVNode(
            "text",
            { class: "value" },
            vue.toDisplayString($options.getNextLevelRequirement()) + "经验",
            1
            /* TEXT */
          )
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 余额显示 "),
      vue.createElementVNode("view", { class: "balance" }, [
        vue.createElementVNode("text", { class: "label" }, "金币余额："),
        vue.createElementVNode(
          "text",
          { class: "value" },
          vue.toDisplayString($data.coinBalance),
          1
          /* TEXT */
        )
      ]),
      vue.createCommentVNode(" 立即充值按钮 "),
      vue.createElementVNode("view", { class: "cta-wrapper" }, [
        vue.createElementVNode("view", {
          class: "cta-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.recharge && $options.recharge(...args))
        }, [
          vue.createElementVNode("text", { class: "cta-text" }, "立即升级")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesAiLevelUp = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$13], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/level-up.vue"]]);
  const _sfc_main$13 = {
    data() {
      return {};
    },
    methods: {
      goBack() {
        uni.navigateBack();
      }
    }
  };
  function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n					<view class="back-button" @click="goBack">\n			<svg t="1756247334143" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1052" width="32" height="32">\n				<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666" p-id="1053"></path>\n			</svg>\n		</view>\n			<text class="nav-title">AI理解等级</text>\n		</view> '),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 页面标题 "),
        vue.createElementVNode("view", { class: "page-header" }, [
          vue.createElementVNode("view", { class: "header-icon" }, "🤖"),
          vue.createElementVNode("text", { class: "header-title" }, "AI理解等级"),
          vue.createElementVNode("text", { class: "header-subtitle" }, "了解您的AI伙伴如何理解您")
        ]),
        vue.createCommentVNode(" 等级列表 "),
        vue.createElementVNode("view", { class: "levels-container" }, [
          vue.createCommentVNode(" 第一级：合得来 "),
          vue.createElementVNode("view", { class: "level-card level-1" }, [
            vue.createElementVNode("view", { class: "level-header" }, [
              vue.createElementVNode("view", { class: "level-icon" }, "🌱"),
              vue.createElementVNode("view", { class: "level-info" }, [
                vue.createElementVNode("text", { class: "level-title" }, "合得来 "),
                vue.createElementVNode("text", { class: "level-range" }, "1-5级")
              ]),
              vue.createElementVNode("view", { class: "level-badge" }, "100经验/级")
            ]),
            vue.createElementVNode("view", { class: "level-description" }, " 您的ai还不熟悉您,所以准确度可能比较低,试着和她多说说话 ")
          ]),
          vue.createCommentVNode(" 第二级：靠谱儿 "),
          vue.createElementVNode("view", { class: "level-card level-2" }, [
            vue.createElementVNode("view", { class: "level-header" }, [
              vue.createElementVNode("view", { class: "level-icon" }, "🌿"),
              vue.createElementVNode("view", { class: "level-info" }, [
                vue.createElementVNode("text", { class: "level-title" }, "靠谱儿 "),
                vue.createElementVNode("text", { class: "level-range" }, "6-10级")
              ]),
              vue.createElementVNode("view", { class: "level-badge" }, "1000经验/级")
            ]),
            vue.createElementVNode("view", { class: "level-description" }, " 您的ai对您已经有所了解,但是细节上可能存在一些偏差,而且效率也不高 ")
          ]),
          vue.createCommentVNode(" 第三级：懂我者 "),
          vue.createElementVNode("view", { class: "level-card level-3" }, [
            vue.createElementVNode("view", { class: "level-header" }, [
              vue.createElementVNode("view", { class: "level-icon" }, "🌳"),
              vue.createElementVNode("view", { class: "level-info" }, [
                vue.createElementVNode("text", { class: "level-title" }, "懂我者 "),
                vue.createElementVNode("text", { class: "level-range" }, "11-20级")
              ]),
              vue.createElementVNode("view", { class: "level-badge" }, "2000经验/级")
            ]),
            vue.createElementVNode("view", { class: "level-description" }, " ai可以相对准确获得您的想法,他们的语言更加优美 ")
          ]),
          vue.createCommentVNode(" 第四级：生死交 "),
          vue.createElementVNode("view", { class: "level-card level-4" }, [
            vue.createElementVNode("view", { class: "level-header" }, [
              vue.createElementVNode("view", { class: "level-icon" }, "💎"),
              vue.createElementVNode("view", { class: "level-info" }, [
                vue.createElementVNode("text", { class: "level-title" }, "生死交 "),
                vue.createElementVNode("text", { class: "level-range" }, "21-24级")
              ]),
              vue.createElementVNode("view", { class: "level-badge" }, "5000经验/级")
            ]),
            vue.createElementVNode("view", { class: "level-description" }, " 您的ai对您十分了解,可以为你找到您的心中所想 ")
          ]),
          vue.createCommentVNode(" 第五级：同行者 "),
          vue.createElementVNode("view", { class: "level-card level-5" }, [
            vue.createElementVNode("view", { class: "level-header" }, [
              vue.createElementVNode("view", { class: "level-icon" }, "🔥"),
              vue.createElementVNode("view", { class: "level-info" }, [
                vue.createElementVNode("text", { class: "level-title" }, "同行者 "),
                vue.createElementVNode("text", { class: "level-range" }, "25级")
              ]),
              vue.createElementVNode("view", { class: "level-badge" }, "10000经验/级")
            ]),
            vue.createElementVNode("view", { class: "level-description" }, " 您的ai效率非常高,并且有很高的话术可以得到您想要的消息,携带的礼物可以适当减少 ")
          ])
        ]),
        vue.createCommentVNode(" 提示信息 "),
        vue.createElementVNode("view", { class: "tip-section" }, [
          vue.createElementVNode("view", { class: "tip-icon" }, "💡"),
          vue.createElementVNode("text", { class: "tip-text" }, "多与AI聊天可以提升理解等级，提高准确度和效率")
        ])
      ])
    ]);
  }
  const PagesAiPermissions = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$12], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/permissions.vue"]]);
  const _sfc_main$12 = {
    name: "AIList",
    data() {
      return {
        userAiModels: [],
        groupedModels: {},
        loading: true,
        errorMessage: ""
      };
    },
    onLoad() {
      this.loadUserAiModels();
    },
    methods: {
      // 加载用户AI模型数据
      async loadUserAiModels() {
        this.loading = true;
        this.errorMessage = "";
        try {
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            this.errorMessage = "用户未登录";
            this.loading = false;
            return;
          }
          const response = await this.getUserAiModels(userId);
          if (response.data && response.data.length > 0) {
            this.userAiModels = response.data;
            this.groupModelsByFirstLetter();
          } else {
            this.userAiModels = [];
            this.groupedModels = {};
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/ai-list.vue:156", "加载用户AI模型失败:", error);
          this.errorMessage = "加载AI模型失败，请重试";
        } finally {
          this.loading = false;
        }
      },
      // 获取用户AI模型
      getUserAiModels(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/user-ai-model/user/${userId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 按首字母分组AI模型
      groupModelsByFirstLetter() {
        const groups = {};
        this.userAiModels.forEach((model) => {
          const modelName = model.modelName || "未知AI";
          const firstLetter = this.getFirstLetter(modelName);
          if (!groups[firstLetter]) {
            groups[firstLetter] = [];
          }
          groups[firstLetter].push(model);
        });
        Object.keys(groups).forEach((letter) => {
          groups[letter].sort((a, b) => {
            const nameA = a.modelName || "";
            const nameB = b.modelName || "";
            return nameA.localeCompare(nameB, "zh-CN");
          });
        });
        this.groupedModels = groups;
      },
      // 获取中文拼音首字母
      getFirstLetter(str) {
        if (!str)
          return "Z";
        if (/^[A-Za-z]/.test(str)) {
          return str.charAt(0).toUpperCase();
        }
        const firstChar = str.charAt(0);
        const charCode = firstChar.charCodeAt(0);
        if (charCode >= 19968 && charCode <= 40959) {
          const pinyinMap = {
            "宠": "C",
            "搭": "D",
            "学": "X",
            "游": "Y",
            "运": "Y",
            "工": "G",
            "商": "S",
            "医": "Y",
            "教": "J",
            "科": "K",
            "艺": "Y",
            "体": "T",
            "文": "W",
            "理": "L",
            "法": "F",
            "经": "J",
            "管": "G",
            "计": "J",
            "机": "J",
            "电": "D",
            "通": "T",
            "信": "X",
            "网": "W",
            "软": "R",
            "硬": "Y",
            "数": "S",
            "据": "J",
            "人": "R",
            "工": "G",
            "智": "Z",
            "能": "N",
            "机": "J",
            "器": "Q",
            "学": "X",
            "习": "X"
          };
          return pinyinMap[firstChar] || this.getPinyinFirstLetter(firstChar);
        }
        return "Z";
      },
      // 获取拼音首字母（简化版）
      getPinyinFirstLetter(char) {
        const charCode = char.charCodeAt(0);
        if (charCode >= 19968 && charCode <= 40959) {
          if (charCode < 20224)
            return "A";
          if (charCode < 20480)
            return "B";
          if (charCode < 20736)
            return "C";
          if (charCode < 20992)
            return "D";
          if (charCode < 21248)
            return "E";
          if (charCode < 21504)
            return "F";
          if (charCode < 21760)
            return "G";
          if (charCode < 22016)
            return "H";
          if (charCode < 22272)
            return "I";
          if (charCode < 22528)
            return "J";
          if (charCode < 22784)
            return "K";
          if (charCode < 23040)
            return "L";
          if (charCode < 23296)
            return "M";
          if (charCode < 23552)
            return "N";
          if (charCode < 23808)
            return "O";
          if (charCode < 24064)
            return "P";
          if (charCode < 24320)
            return "Q";
          if (charCode < 24576)
            return "R";
          if (charCode < 24832)
            return "S";
          if (charCode < 25088)
            return "T";
          if (charCode < 25344)
            return "U";
          if (charCode < 25600)
            return "V";
          if (charCode < 25856)
            return "W";
          if (charCode < 26112)
            return "X";
          if (charCode < 26368)
            return "Y";
          return "Z";
        }
        return "Z";
      },
      // 获取排序后的字母列表
      getSortedLetters() {
        return Object.keys(this.groupedModels).sort((a, b) => {
          if (/^[A-Z]$/.test(a) && /^[A-Z]$/.test(b)) {
            return a.localeCompare(b);
          }
          if (/^[A-Z]$/.test(a))
            return -1;
          if (/^[A-Z]$/.test(b))
            return 1;
          return a.localeCompare(b, "zh-CN");
        });
      },
      // 重试加载
      retryLoad() {
        this.loadUserAiModels();
      },
      goBack() {
        uni.navigateBack();
      },
      openSearch() {
        uni.showToast({
          title: "搜索功能",
          icon: "none"
        });
      },
      selectAI(model) {
        uni.navigateTo({
          url: `/pages/ai/ai-chat?modelId=${model.userAiId}&modelName=${encodeURIComponent(model.modelName || "未知AI")}`
        });
      },
      // 获取头像样式类
      getAvatarClass(modelName) {
        if (!modelName)
          return "default-ai-avatar";
        const name = modelName.toLowerCase();
        if (name.includes("宠") || name.includes("pet"))
          return "pet-ai-avatar";
        if (name.includes("搭") || name.includes("partner"))
          return "partner-ai-avatar";
        if (name.includes("学") || name.includes("study"))
          return "study-ai-avatar";
        if (name.includes("游") || name.includes("game"))
          return "gaming-ai-avatar";
        if (name.includes("运") || name.includes("sport"))
          return "sports-ai-avatar";
        if (name.includes("工") || name.includes("work"))
          return "work-ai-avatar";
        if (name.includes("商") || name.includes("business"))
          return "business-ai-avatar";
        return "default-ai-avatar";
      },
      // 获取头像文字
      getAvatarText(modelName) {
        if (!modelName)
          return "?";
        return modelName.charAt(0).toUpperCase();
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/content-feed/content-feed"
        });
      },
      goToMessages() {
        uni.showToast({
          title: "消息功能",
          icon: "none"
        });
      },
      goToFriends() {
        uni.navigateTo({
          url: "/pages/friend-list/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/user-profile/user-profile"
        });
      }
    }
  };
  function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "ai-list-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="status-time">9:41</text>\n			<view class="status-right">\n				<view class="signal-bars">\n					<view class="signal-bar"></view>\n					<view class="signal-bar"></view>\n					<view class="signal-bar"></view>\n					<view class="signal-bar"></view>\n				</view>\n				<text class="status-wifi">📶</text>\n				<text class="status-battery">🔋</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n					<view class="nav-left" @click="goBack">\n			<svg t="1756247334143" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1052" width="32" height="32">\n				<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666" p-id="1053"></path>\n			</svg>\n		</view>\n			<view class="nav-center">\n				<text class="nav-title">购买记录</text>\n			</view>\n			<view class="nav-right">\n				<view class="search-icon" @click="openSearch">\n					<text class="search-symbol">🔍</text>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-section"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载AI模型...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-section" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", {
                class: "retry-button",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.retryLoad && $options.retryLoad(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : $data.userAiModels.length === 0 ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 空状态 "),
            vue.createElementVNode("view", { class: "empty-section" }, [
              vue.createElementVNode("view", { class: "empty-icon" }, "🤖"),
              vue.createElementVNode("text", { class: "empty-text" }, "您还没有任何AI模型"),
              vue.createElementVNode("text", { class: "empty-desc" }, "快去购买或创建您的第一个AI助手吧！")
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 3 },
          [
            vue.createCommentVNode(" AI模型列表 "),
            vue.createElementVNode("view", null, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($options.getSortedLetters(), (letter) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: letter,
                    class: "category-section"
                  }, [
                    vue.createElementVNode("view", { class: "category-header" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "category-letter" },
                        vue.toDisplayString(letter),
                        1
                        /* TEXT */
                      )
                    ]),
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.groupedModels[letter], (model) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          key: model.userAiId,
                          class: "ai-item",
                          onClick: ($event) => $options.selectAI(model)
                        }, [
                          vue.createElementVNode("view", { class: "ai-avatar" }, [
                            model.modelImageUrl ? (vue.openBlock(), vue.createElementBlock("image", {
                              key: 0,
                              class: "avatar-image",
                              src: model.modelImageUrl,
                              mode: "aspectFill"
                            }, null, 8, ["src"])) : (vue.openBlock(), vue.createElementBlock(
                              "view",
                              {
                                key: 1,
                                class: vue.normalizeClass(["avatar-circle", $options.getAvatarClass(model.modelName)])
                              },
                              [
                                vue.createElementVNode(
                                  "text",
                                  { class: "avatar-text" },
                                  vue.toDisplayString($options.getAvatarText(model.modelName)),
                                  1
                                  /* TEXT */
                                )
                              ],
                              2
                              /* CLASS */
                            ))
                          ]),
                          vue.createElementVNode("view", { class: "ai-info" }, [
                            vue.createElementVNode(
                              "text",
                              { class: "ai-name" },
                              vue.toDisplayString(model.modelName || "未知AI"),
                              1
                              /* TEXT */
                            ),
                            model.customDesc ? (vue.openBlock(), vue.createElementBlock(
                              "text",
                              {
                                key: 0,
                                class: "ai-desc"
                              },
                              vue.toDisplayString(model.customDesc),
                              1
                              /* TEXT */
                            )) : vue.createCommentVNode("v-if", true),
                            vue.createElementVNode("view", { class: "ai-meta" }, [
                              vue.createElementVNode(
                                "text",
                                { class: "ai-level" },
                                "Lv." + vue.toDisplayString(model.level || 1),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode(
                                "text",
                                { class: "ai-power" },
                                vue.toDisplayString(model.power || 0) + " 能量",
                                1
                                /* TEXT */
                              )
                            ])
                          ])
                        ], 8, ["onClick"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-nav" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToMessages && $options.goToMessages(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", { class: "nav-item active" }, [
          vue.createElementVNode("view", { class: "ai-icon" }, "AI")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToFriends && $options.goToFriends(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-avatar" }, [
            vue.createElementVNode("view", { class: "mini-cat-avatar" }, [
              vue.createElementVNode("view", { class: "mini-cat-body" }),
              vue.createElementVNode("view", { class: "mini-cat-face" }, [
                vue.createElementVNode("view", { class: "mini-cat-eyes" }, [
                  vue.createElementVNode("view", { class: "mini-cat-eye" }),
                  vue.createElementVNode("view", { class: "mini-cat-eye" })
                ])
              ])
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesAiAiList = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$11], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/ai-list.vue"]]);
  const _sfc_main$11 = {
    data() {
      return {
        aiName: "宠物交友AI",
        modelId: null,
        aiModelData: null,
        // AI模型详细信息
        loading: false,
        // 加载状态
        errorMessage: "",
        // 错误信息
        // 用户购买状态
        hasPurchased: false,
        // 用户金币余额
        userGold: null,
        // 评价相关数据
        showReviewModal: false,
        reviewRating: 0,
        reviewText: "",
        // 移除回复相关数据
        // AI评价数据
        aiReviews: [],
        reviewsLoading: false,
        // 评论加载状态
        reviewsError: ""
        // 评论加载错误
      };
    },
    computed: {
      // 是否可以提交评价
      canSubmitReview() {
        return this.reviewRating > 0 && this.reviewText.trim().length > 0;
      }
    },
    onLoad(options) {
      if (options.aiName) {
        this.aiName = decodeURIComponent(options.aiName);
      }
      if (options.modelId) {
        this.modelId = options.modelId;
      }
      this.loadAiModelDetail();
      this.loadAiReviews();
      this.checkPurchaseStatus();
    },
    methods: {
      // 加载AI模型详细信息
      async loadAiModelDetail() {
        if (!this.modelId) {
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:271", "模型ID不存在");
          this.errorMessage = "模型ID不存在";
          return;
        }
        try {
          this.loading = true;
          this.errorMessage = "";
          const response = await this.getAimodelBaseInfoById(this.modelId);
          if (response && response.data) {
            this.aiModelData = response.data;
            this.aiName = response.data.modelName || this.aiName;
            formatAppLog("log", "at pages/ai/pet-ai-detail.vue:284", "AI模型详情加载成功:", this.aiModelData);
          } else {
            this.errorMessage = "AI模型不存在";
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:289", "加载AI模型详情失败:", error);
          this.errorMessage = "加载失败，请重试";
        } finally {
          this.loading = false;
        }
      },
      // 获取AI模型详情
      getAimodelBaseInfoById(modelId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/a-entities/aimodel-base-info/${modelId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 加载AI模型评论
      async loadAiReviews() {
        if (!this.modelId) {
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:316", "模型ID不存在，无法加载评论");
          return;
        }
        try {
          this.reviewsLoading = true;
          this.reviewsError = "";
          const response = await this.getUserAiCommentsByAimodelId(this.modelId);
          if (response && response.data) {
            this.aiReviews = this.convertCommentsToReviews(response.data);
            formatAppLog("log", "at pages/ai/pet-ai-detail.vue:327", "AI模型评论加载成功:", this.aiReviews);
          } else {
            this.aiReviews = [];
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:332", "加载AI模型评论失败:", error);
          this.reviewsError = "加载评论失败，请重试";
          this.aiReviews = [];
        } finally {
          this.reviewsLoading = false;
        }
      },
      // 获取AI模型评论
      getUserAiCommentsByAimodelId(aimodelId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/u-entities/user-ai-comment/aimodel/${aimodelId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 转换评论数据为前端显示格式
      convertCommentsToReviews(comments) {
        return comments.map((comment) => ({
          id: comment.userAiCommentId,
          username: `用户${comment.userId}`,
          userAvatar: "/static/avatar1.png",
          // 默认头像
          time: this.formatCommentTime(comment.createdAt),
          rating: comment.stars || 5,
          content: comment.commentText || "暂无评价内容"
        }));
      },
      // 格式化评论时间
      formatCommentTime(timestamp) {
        if (!timestamp)
          return "未知时间";
        const now = /* @__PURE__ */ new Date();
        const commentTime = new Date(timestamp);
        const diffMs = now - commentTime;
        const diffDays = Math.floor(diffMs / (1e3 * 60 * 60 * 24));
        if (diffDays === 0) {
          return "今天";
        } else if (diffDays === 1) {
          return "昨天";
        } else if (diffDays < 7) {
          return `${diffDays}天前`;
        } else if (diffDays < 30) {
          const weeks = Math.floor(diffDays / 7);
          return `${weeks}周前`;
        } else {
          const months = Math.floor(diffDays / 30);
          return `${months}个月前`;
        }
      },
      // 检查AI模型的购买状态
      async checkPurchaseStatus() {
        try {
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            formatAppLog("log", "at pages/ai/pet-ai-detail.vue:398", "用户未登录，无法检查购买状态");
            this.hasPurchased = false;
            this.userGold = null;
            return;
          }
          const [purchaseResponse, goldResponse] = await Promise.allSettled([
            this.getUserAiModels(userId),
            this.getUserGoldBalance(userId)
          ]);
          if (purchaseResponse.status === "fulfilled" && purchaseResponse.value && purchaseResponse.value.data) {
            this.hasPurchased = purchaseResponse.value.data.some(
              (userModel) => userModel.parentModelId == this.modelId || userModel.modelName === this.aiName
            );
            formatAppLog("log", "at pages/ai/pet-ai-detail.vue:417", `AI模型 ${this.aiName} (ID: ${this.modelId}) 购买状态:`, this.hasPurchased);
          } else {
            this.hasPurchased = false;
            formatAppLog("error", "at pages/ai/pet-ai-detail.vue:420", "获取购买状态失败:", purchaseResponse.reason);
          }
          if (goldResponse.status === "fulfilled" && goldResponse.value && goldResponse.value.data) {
            this.userGold = goldResponse.value.data.gold;
            formatAppLog("log", "at pages/ai/pet-ai-detail.vue:426", "用户金币余额:", this.userGold);
          } else {
            this.userGold = null;
            formatAppLog("error", "at pages/ai/pet-ai-detail.vue:429", "获取用户金币余额失败:", goldResponse.reason);
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:432", "检查购买状态失败:", error);
          this.hasPurchased = false;
          this.userGold = null;
        }
      },
      // 获取用户AI模型列表
      getUserAiModels(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/user-ai-model/user/${userId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 获取用户金币余额
      getUserGoldBalance(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/users/${userId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 保存购买状态到本地存储
      savePurchaseStatus() {
        const purchasedAIs = uni.getStorageSync("purchasedAIs") || [];
        if (!purchasedAIs.includes(this.aiName)) {
          purchasedAIs.push(this.aiName);
          uni.setStorageSync("purchasedAIs", purchasedAIs);
          formatAppLog("log", "at pages/ai/pet-ai-detail.vue:478", "购买状态已保存到本地存储");
        }
      },
      getAIDescription() {
        if (this.aiModelData && this.aiModelData.modelDesc) {
          return this.aiModelData.modelDesc;
        }
        return "这是一个智能交友AI，可以帮助你找到志同道合的朋友";
      },
      getAIPrice() {
        if (this.aiModelData && this.aiModelData.price) {
          const goldCoins = Math.round(this.aiModelData.price * 100);
          return goldCoins + "C";
        }
        return "15000C";
      },
      // 格式化金币余额显示
      formatGoldBalance(gold) {
        if (!gold && gold !== 0)
          return "0";
        if (gold >= 1e6) {
          return (gold / 1e6).toFixed(1) + "M";
        } else if (gold >= 1e3) {
          return (gold / 1e3).toFixed(1) + "K";
        } else {
          return gold.toString();
        }
      },
      async buyAI() {
        try {
          if (this.hasPurchased) {
            uni.showToast({
              title: "您已购买此AI模型",
              icon: "none"
            });
            return;
          }
          const confirmResult = await new Promise((resolve) => {
            uni.showModal({
              title: "确认购买",
              content: `确定要购买${this.aiName}吗？价格：${this.getAIPrice()}`,
              success: (res) => {
                resolve(res.confirm);
              },
              fail: () => {
                resolve(false);
              }
            });
          });
          if (!confirmResult) {
            return;
          }
          uni.showLoading({
            title: "购买中..."
          });
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.hideLoading();
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          const purchaseResult = await this.purchaseAiModel(userId);
          uni.hideLoading();
          if (purchaseResult.success) {
            this.hasPurchased = true;
            uni.showToast({
              title: "购买成功！",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateTo({
                url: `/pages/ai/ai-chat?modelId=${this.modelId}&modelName=${encodeURIComponent(this.aiName)}`
              });
            }, 1500);
          } else {
            uni.showToast({
              title: purchaseResult.message || "购买失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:582", "购买AI模型失败:", error);
          uni.showToast({
            title: "购买失败，请重试",
            icon: "none"
          });
        }
      },
      // 调用购买API
      purchaseAiModel(userId) {
        return new Promise((resolve, reject) => {
          const purchaseData = {
            userId: parseInt(userId),
            parentModelId: this.modelId,
            modelName: this.aiName,
            modelDesc: this.aiModelData ? this.aiModelData.modelDesc : "",
            modelImageUrl: this.aiModelData ? this.aiModelData.modelImageUrl : "",
            price: this.aiModelData ? this.aiModelData.price : 0
          };
          formatAppLog("log", "at pages/ai/pet-ai-detail.vue:602", "发送购买请求:", purchaseData);
          uni.request({
            url: "http://localhost:8888/api/u-entities/user-ai-model/purchase",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: purchaseData,
            timeout: 1e4,
            success: (res) => {
              formatAppLog("log", "at pages/ai/pet-ai-detail.vue:613", "购买响应:", res);
              resolve(res.data);
            },
            fail: (err) => {
              formatAppLog("error", "at pages/ai/pet-ai-detail.vue:617", "购买请求失败:", err);
              reject(err);
            }
          });
        });
      },
      async tryAI() {
        try {
          if (this.hasPurchased) {
            uni.showToast({
              title: "您已购买此AI模型，无需试用",
              icon: "none"
            });
            return;
          }
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          uni.showLoading({
            title: "试用中..."
          });
          const tryOutResult = await this.tryOutAiModel(userId);
          uni.hideLoading();
          if (tryOutResult.success) {
            uni.showToast({
              title: tryOutResult.message,
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateTo({
                url: `/pages/ai/ai-chat?modelId=${this.modelId}&modelName=${encodeURIComponent(this.aiName)}&isTryOut=true`
              });
            }, 1500);
          } else {
            uni.showToast({
              title: tryOutResult.message || "试用失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:674", "试用AI模型失败:", error);
          uni.showToast({
            title: "试用失败，请重试",
            icon: "none"
          });
        }
      },
      // 调用试用API
      tryOutAiModel(userId) {
        return new Promise((resolve, reject) => {
          const tryOutData = {
            userId: parseInt(userId),
            parentModelId: this.modelId
          };
          formatAppLog("log", "at pages/ai/pet-ai-detail.vue:690", "发送试用请求:", tryOutData);
          uni.request({
            url: "http://localhost:8888/api/user-ai-model/try-out",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: tryOutData,
            timeout: 1e4,
            success: (res) => {
              formatAppLog("log", "at pages/ai/pet-ai-detail.vue:701", "试用响应:", res);
              resolve(res.data);
            },
            fail: (err) => {
              formatAppLog("error", "at pages/ai/pet-ai-detail.vue:705", "试用请求失败:", err);
              reject(err);
            }
          });
        });
      },
      goBack() {
        uni.navigateBack();
      },
      // 格式化数字
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 格式化推荐数
      formatRecommendCount(count) {
        if (!count)
          return "0";
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 格式化购买数
      formatPurchaseCount(count) {
        if (!count)
          return "0";
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 获取总评价数
      getTotalReviewsCount() {
        return this.aiReviews.length;
      },
      // 移除点赞相关方法
      // 显示评价输入框
      showReviewInput() {
        if (!this.hasPurchased) {
          uni.showModal({
            title: "提示",
            content: "您需要先购买此AI模型才能评价",
            showCancel: false,
            confirmText: "知道了"
          });
          return;
        }
        this.reviewRating = 0;
        this.reviewText = "";
        this.showReviewModal = true;
      },
      // 隐藏评价输入框
      hideReviewModal() {
        this.showReviewModal = false;
        this.reviewRating = 0;
        this.reviewText = "";
      },
      // 设置评分
      setRating(rating) {
        this.reviewRating = rating;
      },
      // 提交评价
      async submitReview() {
        if (this.reviewRating === 0) {
          uni.showToast({
            title: "请选择评分",
            icon: "none"
          });
          return;
        }
        if (!this.reviewText.trim()) {
          uni.showToast({
            title: "请输入评价内容",
            icon: "none"
          });
          return;
        }
        try {
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          uni.showLoading({
            title: "提交中..."
          });
          const saveResult = await this.saveUserAiComment(userId);
          uni.hideLoading();
          if (saveResult.success) {
            await this.loadAiReviews();
            uni.showToast({
              title: "评价提交成功",
              icon: "success"
            });
            this.hideReviewModal();
          } else {
            uni.showToast({
              title: saveResult.message || "评价提交失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/ai/pet-ai-detail.vue:834", "提交评价失败:", error);
          uni.showToast({
            title: "评价提交失败，请重试",
            icon: "none"
          });
        }
      },
      // 调用保存评价API
      saveUserAiComment(userId) {
        return new Promise((resolve, reject) => {
          const commentData = {
            aimodelId: this.modelId,
            userId: parseInt(userId),
            commentText: this.reviewText,
            stars: this.reviewRating
          };
          formatAppLog("log", "at pages/ai/pet-ai-detail.vue:852", "发送评价请求:", commentData);
          uni.request({
            url: "http://localhost:8888/api/u-entities/user-ai-comment/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: commentData,
            timeout: 1e4,
            success: (res) => {
              formatAppLog("log", "at pages/ai/pet-ai-detail.vue:863", "评价响应:", res);
              resolve(res.data);
            },
            fail: (err) => {
              formatAppLog("error", "at pages/ai/pet-ai-detail.vue:867", "评价请求失败:", err);
              reject(err);
            }
          });
        });
      }
      // 移除回复相关方法
    }
  };
  function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部区域 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createCommentVNode(' <view class="back-button" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view> '),
        vue.createElementVNode("view", { class: "cartoon-character" })
      ]),
      vue.createCommentVNode(" 浮动信息卡片 "),
      $data.aiModelData ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "floating-card"
      }, [
        vue.createElementVNode("view", { class: "info-row" }, [
          vue.createElementVNode(
            "text",
            { class: "info-value" },
            vue.toDisplayString($options.formatRecommendCount($data.aiModelData.recommendCount)),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "info-label" }, "推荐数")
        ]),
        vue.createElementVNode("view", { class: "info-row" }, [
          vue.createElementVNode(
            "text",
            { class: "info-value" },
            vue.toDisplayString($options.formatPurchaseCount($data.aiModelData.purchaseCount)),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "info-label" }, "购买数")
        ]),
        vue.createElementVNode("view", { class: "info-row" }, [
          vue.createElementVNode(
            "text",
            { class: "info-value" },
            vue.toDisplayString($options.getAIPrice()),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "info-label" }, "价格")
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 加载状态 "),
      $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "loading-container"
      }, [
        vue.createElementVNode("view", { class: "loading-spinner" }),
        vue.createElementVNode("text", { class: "loading-text" }, "正在加载AI模型详情...")
      ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 2 },
        [
          vue.createCommentVNode(" 错误状态 "),
          vue.createElementVNode("view", { class: "error-container" }, [
            vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
            vue.createElementVNode(
              "text",
              { class: "error-text" },
              vue.toDisplayString($data.errorMessage),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", {
              class: "retry-button",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.loadAiModelDetail && $options.loadAiModelDetail(...args))
            }, [
              vue.createElementVNode("text", { class: "retry-text" }, "重试")
            ])
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )) : (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 3 },
        [
          vue.createCommentVNode(" 主要内容区域 "),
          vue.createElementVNode("view", { class: "main-content" }, [
            vue.createElementVNode(
              "view",
              { class: "product-title" },
              vue.toDisplayString($data.aiName),
              1
              /* TEXT */
            ),
            vue.createCommentVNode(" 产品信息和操作按钮区域 "),
            vue.createElementVNode("view", { class: "product-info-section" }, [
              vue.createElementVNode("view", { class: "product-content" }, [
                vue.createElementVNode(
                  "view",
                  { class: "product-description" },
                  " 产品描述: " + vue.toDisplayString($options.getAIDescription()),
                  1
                  /* TEXT */
                ),
                vue.createCommentVNode(" 图片网格 "),
                vue.createElementVNode("view", { class: "image-grid" }, [
                  vue.createElementVNode("view", { class: "image-item" }, [
                    vue.createElementVNode("view", { class: "cat-image cat-1" })
                  ]),
                  vue.createElementVNode("view", { class: "image-item" }, [
                    vue.createElementVNode("view", { class: "cat-image cat-2" })
                  ]),
                  vue.createElementVNode("view", { class: "image-item" }, [
                    vue.createElementVNode("view", { class: "cat-image cat-3" })
                  ]),
                  vue.createElementVNode("view", { class: "image-item" }, [
                    vue.createElementVNode("view", { class: "cat-image cat-4" })
                  ])
                ])
              ]),
              vue.createCommentVNode(" 右侧操作按钮 "),
              vue.createElementVNode("view", { class: "right-action-buttons" }, [
                vue.createCommentVNode(" 已购买状态 "),
                $data.hasPurchased ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "action-item purchased-item"
                }, [
                  vue.createElementVNode("view", { class: "action-icon purchased-icon" }, [
                    vue.createElementVNode("text", { class: "icon-text" }, "✅")
                  ]),
                  vue.createElementVNode("text", { class: "action-text" }, "已购买"),
                  vue.createElementVNode("text", { class: "purchase-time-text" }, "购买后可永久使用")
                ])) : (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 1 },
                  [
                    vue.createCommentVNode(" 未购买状态 "),
                    vue.createElementVNode("view", {
                      class: "action-item",
                      onClick: _cache[1] || (_cache[1] = (...args) => $options.buyAI && $options.buyAI(...args))
                    }, [
                      vue.createElementVNode("view", { class: "action-icon buy-icon" }, [
                        vue.createElementVNode("text", { class: "icon-text" }, "🛒")
                      ]),
                      vue.createElementVNode("text", { class: "action-text" }, "立刻购买"),
                      $data.userGold !== null ? (vue.openBlock(), vue.createElementBlock(
                        "text",
                        {
                          key: 0,
                          class: "balance-text"
                        },
                        "我的余额:" + vue.toDisplayString($options.formatGoldBalance($data.userGold)) + "C",
                        1
                        /* TEXT */
                      )) : (vue.openBlock(), vue.createElementBlock("text", {
                        key: 1,
                        class: "balance-text balance-error"
                      }, "获取余额失败"))
                    ])
                  ],
                  2112
                  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                )),
                vue.createElementVNode("view", {
                  class: "action-item",
                  onClick: _cache[2] || (_cache[2] = (...args) => $options.tryAI && $options.tryAI(...args))
                }, [
                  vue.createElementVNode("view", { class: "action-icon try-icon" }, [
                    vue.createElementVNode("text", { class: "icon-text" }, "⏰")
                  ]),
                  vue.createElementVNode("text", { class: "action-text" }, "试用模型")
                ])
              ])
            ]),
            vue.createCommentVNode(" 用户评价区域 "),
            vue.createElementVNode("view", { class: "reviews-section" }, [
              vue.createCommentVNode(" 购买状态提示 "),
              !$data.hasPurchased ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "purchase-status-hint"
              }, [
                vue.createElementVNode("text", { class: "hint-icon" }, "💡"),
                vue.createElementVNode("text", { class: "hint-text" }, "购买此AI模型后即可发表评价和回复")
              ])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("view", { class: "reviews-header" }, [
                vue.createElementVNode("view", { class: "reviews-left" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "reviews-title" },
                    "用户评价 (" + vue.toDisplayString($options.getTotalReviewsCount()) + ")",
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["review-button", { "disabled": !$data.hasPurchased }]),
                    onClick: _cache[3] || (_cache[3] = (...args) => $options.showReviewInput && $options.showReviewInput(...args))
                  },
                  [
                    vue.createElementVNode(
                      "text",
                      { class: "review-button-text" },
                      vue.toDisplayString($data.hasPurchased ? "评价" : "购买后评价"),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ]),
              vue.createCommentVNode(" 评论加载状态 "),
              $data.reviewsLoading ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "reviews-loading"
              }, [
                vue.createElementVNode("view", { class: "loading-spinner" }),
                vue.createElementVNode("text", { class: "loading-text" }, "正在加载评论...")
              ])) : $data.reviewsError ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 2 },
                [
                  vue.createCommentVNode(" 评论错误状态 "),
                  vue.createElementVNode("view", { class: "reviews-error" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "error-text" },
                      vue.toDisplayString($data.reviewsError),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", {
                      class: "retry-button",
                      onClick: _cache[4] || (_cache[4] = (...args) => $options.loadAiReviews && $options.loadAiReviews(...args))
                    }, [
                      vue.createElementVNode("text", { class: "retry-text" }, "重试")
                    ])
                  ])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : $data.aiReviews.length === 0 ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 3 },
                [
                  vue.createCommentVNode(" 暂无评论状态 "),
                  vue.createElementVNode("view", { class: "reviews-empty" }, [
                    vue.createElementVNode("view", { class: "empty-icon" }, "💬"),
                    vue.createElementVNode("text", { class: "empty-text" }, "暂无评价"),
                    vue.createElementVNode("text", { class: "empty-desc" }, "成为第一个评价此AI模型的用户吧！")
                  ])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              )) : (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 4 },
                [
                  vue.createCommentVNode(" 评价列表 "),
                  vue.createElementVNode("view", { class: "reviews-list" }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.aiReviews, (review, index) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "review-item",
                          key: review.id || index
                        }, [
                          vue.createElementVNode("view", { class: "review-avatar" }, [
                            vue.createElementVNode("image", {
                              class: "review-user-avatar",
                              src: review.userAvatar,
                              mode: "aspectFill"
                            }, null, 8, ["src"])
                          ]),
                          vue.createElementVNode("view", { class: "review-content" }, [
                            vue.createElementVNode("view", { class: "review-user-info" }, [
                              vue.createElementVNode(
                                "text",
                                { class: "review-username" },
                                vue.toDisplayString(review.username),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode(
                                "text",
                                { class: "review-time" },
                                vue.toDisplayString(review.time),
                                1
                                /* TEXT */
                              )
                            ]),
                            vue.createElementVNode("view", { class: "review-rating" }, [
                              (vue.openBlock(), vue.createElementBlock(
                                vue.Fragment,
                                null,
                                vue.renderList(5, (i) => {
                                  return vue.createElementVNode(
                                    "text",
                                    {
                                      class: vue.normalizeClass(["star", { "active": i <= review.rating }]),
                                      key: i
                                    },
                                    "⭐",
                                    2
                                    /* CLASS */
                                  );
                                }),
                                64
                                /* STABLE_FRAGMENT */
                              ))
                            ]),
                            vue.createElementVNode(
                              "text",
                              { class: "review-text" },
                              vue.toDisplayString(review.content),
                              1
                              /* TEXT */
                            ),
                            vue.createCommentVNode(" 移除点赞和回复功能 ")
                          ])
                        ]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])
                ],
                2112
                /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
              ))
            ])
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )),
      vue.createCommentVNode(" 评价输入弹窗 "),
      $data.showReviewModal ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 4,
        class: "review-modal",
        onClick: _cache[10] || (_cache[10] = (...args) => $options.hideReviewModal && $options.hideReviewModal(...args))
      }, [
        vue.createElementVNode("view", {
          class: "review-modal-content",
          onClick: _cache[9] || (_cache[9] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "review-modal-header" }, [
            vue.createElementVNode("text", { class: "review-modal-title" }, "写评价"),
            vue.createElementVNode("view", {
              class: "close-button",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.hideReviewModal && $options.hideReviewModal(...args))
            }, [
              vue.createElementVNode("text", { class: "close-icon" }, "×")
            ])
          ]),
          vue.createElementVNode("view", { class: "review-rating-input" }, [
            vue.createElementVNode("text", { class: "rating-label" }, "评分:"),
            vue.createElementVNode("view", { class: "stars-input" }, [
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(5, (i) => {
                  return vue.createElementVNode("text", {
                    class: vue.normalizeClass(["star-input", { "active": i <= $data.reviewRating }]),
                    key: i,
                    onClick: ($event) => $options.setRating(i)
                  }, "⭐", 10, ["onClick"]);
                }),
                64
                /* STABLE_FRAGMENT */
              ))
            ])
          ]),
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              class: "review-text-input",
              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.reviewText = $event),
              placeholder: "请输入您的评价内容...",
              maxlength: "500"
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.reviewText]
          ]),
          vue.createElementVNode("view", { class: "review-modal-actions" }, [
            vue.createElementVNode("view", {
              class: "cancel-button",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.hideReviewModal && $options.hideReviewModal(...args))
            }, [
              vue.createElementVNode("text", { class: "cancel-text" }, "取消")
            ]),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["submit-button", { "active": $options.canSubmitReview }]),
                onClick: _cache[8] || (_cache[8] = (...args) => $options.submitReview && $options.submitReview(...args))
              },
              [
                vue.createElementVNode("text", { class: "submit-text" }, "提交评价")
              ],
              2
              /* CLASS */
            )
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 移除回复弹窗 ")
    ]);
  }
  const PagesAiPetAiDetail = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$10], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/pet-ai-detail.vue"]]);
  const _imports_0 = "/static/logo.png";
  const _sfc_main$10 = {
    name: "AiChat",
    data() {
      return {
        showActionSheet: false,
        scrollTop: 0,
        inputMessage: "",
        inputFocus: false,
        isVoiceMode: false,
        // 语音模式标识
        showEmojiPanel: false,
        // 表情面板显示标识
        showPlusPanel: false,
        // 加号面板显示标识
        currentAiModel: {},
        // 当前AI模型信息
        loading: false,
        // 加载状态
        chatLoading: false,
        // 聊天记录加载状态
        messages: [],
        // 聊天消息列表
        modelId: null
        // AI模型ID
      };
    },
    onLoad(options) {
      formatAppLog("log", "at pages/ai/ai-chat.vue:233", "ai-chat页面加载，接收到的参数:", options);
      if (!options.modelId) {
        formatAppLog("log", "at pages/ai/ai-chat.vue:237", "没有modelId参数，显示错误");
        this.showModelNotFoundError();
        return;
      }
      this.modelId = options.modelId;
      formatAppLog("log", "at pages/ai/ai-chat.vue:244", "保存的modelId:", this.modelId);
      const userId = uni.getStorageSync("userId");
      formatAppLog("log", "at pages/ai/ai-chat.vue:248", "获取到的userId:", userId);
      if (!userId) {
        formatAppLog("log", "at pages/ai/ai-chat.vue:250", "没有userId，显示登录错误");
        this.showUserNotLoginError();
        return;
      }
      formatAppLog("log", "at pages/ai/ai-chat.vue:256", "开始加载AI模型数据和聊天记录");
      this.loadAiModelData(options.modelId, userId);
      this.loadChatMessages(userId, options.modelId);
      this.$nextTick(() => {
        this.scrollToBottom();
      });
    },
    methods: {
      // 加载AI模型数据
      async loadAiModelData(modelId, userId) {
        try {
          this.loading = true;
          const userModelResponse = await this.getUserAiModelByUserId(userId);
          if (userModelResponse && userModelResponse.data) {
            const userModels = userModelResponse.data;
            const targetModel = userModels.find(
              (model) => model.userAiId == modelId || model.parentModelId == modelId
            );
            if (targetModel) {
              this.currentAiModel = targetModel;
              return;
            }
          }
          const baseModelResponse = await this.getAimodelBaseInfoById(modelId);
          if (baseModelResponse && baseModelResponse.data) {
            this.currentAiModel = baseModelResponse.data;
            return;
          }
          this.showModelNotFoundError();
        } catch (error) {
          formatAppLog("error", "at pages/ai/ai-chat.vue:296", "加载AI模型数据失败:", error);
          this.showNetworkError();
        } finally {
          this.loading = false;
        }
      },
      // 获取用户AI模型数据（通过userId）
      getUserAiModelByUserId(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: "http://localhost:8888/api/user-ai-model/user/" + userId,
            method: "GET",
            timeout: 1e4,
            // 10秒超时
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 获取用户AI模型数据（通过userAiId）
      getUserAiModelById(modelId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: "http://localhost:8888/api/user-ai-model/" + modelId,
            method: "GET",
            timeout: 1e4,
            // 10秒超时
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 获取AI模型基础信息
      getAimodelBaseInfoById(modelId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: "http://localhost:8888/api/entity/aimodel-base-info/" + modelId,
            method: "GET",
            timeout: 1e4,
            // 10秒超时
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 加载聊天记录
      async loadChatMessages(userId, userAiId) {
        try {
          this.chatLoading = true;
          formatAppLog("log", "at pages/ai/ai-chat.vue:358", "开始加载聊天记录，userId:", userId, "userAiId:", userAiId);
          const response = await this.getChatMessages(userId, userAiId);
          formatAppLog("log", "at pages/ai/ai-chat.vue:361", "获取聊天记录响应:", response);
          if (response.data && response.data.length > 0) {
            formatAppLog("log", "at pages/ai/ai-chat.vue:364", "找到聊天记录，数量:", response.data.length);
            formatAppLog("log", "at pages/ai/ai-chat.vue:365", "原始聊天数据:", response.data);
            this.messages = this.convertChatDataToMessages(response.data);
            formatAppLog("log", "at pages/ai/ai-chat.vue:368", "转换后的消息:", this.messages);
          } else {
            formatAppLog("log", "at pages/ai/ai-chat.vue:370", "没有找到聊天记录，显示默认欢迎消息");
            this.messages = [{
              id: 1,
              type: "left",
              text: "你好！我是你的 AI 助手，有什么可以帮助你的吗？",
              time: this.getCurrentTime()
            }];
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/ai-chat.vue:380", "加载聊天记录失败:", error);
          this.messages = [{
            id: 1,
            type: "left",
            text: "你好！我是你的 AI 助手，有什么可以帮助你的吗？",
            time: this.getCurrentTime()
          }];
        } finally {
          this.chatLoading = false;
        }
      },
      // 获取聊天记录
      getChatMessages(userId, userAiId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/a-entities-wlq/ai-chat-list-detail-r/user/${userId}/ai/${userAiId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 将后端聊天数据转换为前端消息格式
      convertChatDataToMessages(chatData) {
        const messages = [];
        let messageId = 1;
        chatData.sort((a, b) => {
          if (a.messageTimestamp && b.messageTimestamp) {
            return new Date(a.messageTimestamp) - new Date(b.messageTimestamp);
          }
          return 0;
        });
        chatData.forEach((chat) => {
          if (chat.userMessage) {
            messages.push({
              id: messageId++,
              type: "right",
              text: chat.userMessage,
              time: this.formatTimestamp(chat.messageTimestamp)
            });
          }
          if (chat.aiResponse) {
            messages.push({
              id: messageId++,
              type: "left",
              text: chat.aiResponse,
              time: this.formatTimestamp(chat.messageTimestamp)
            });
          }
        });
        return messages;
      },
      // 格式化时间戳
      formatTimestamp(timestamp) {
        if (!timestamp)
          return this.getCurrentTime();
        const date = new Date(timestamp);
        const now = /* @__PURE__ */ new Date();
        const diff = now - date;
        if (diff < 24 * 60 * 60 * 1e3 && date.getDate() === now.getDate()) {
          const hours = date.getHours();
          const minutes = date.getMinutes();
          const timeStr = hours < 12 ? "上午" : "下午";
          const displayHours = hours < 12 ? hours : hours - 12;
          return `${timeStr}${displayHours}:${minutes.toString().padStart(2, "0")}`;
        }
        if (diff < 48 * 60 * 60 * 1e3 && date.getDate() === now.getDate() - 1) {
          return "昨天 " + this.formatTime(date);
        }
        return `${date.getMonth() + 1}月${date.getDate()}日 ${this.formatTime(date)}`;
      },
      // 格式化时间
      formatTime(date) {
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const timeStr = hours < 12 ? "上午" : "下午";
        const displayHours = hours < 12 ? hours : hours - 12;
        return `${timeStr}${displayHours}:${minutes.toString().padStart(2, "0")}`;
      },
      // 显示模型不存在错误
      showModelNotFoundError() {
        this.currentAiModel = {
          modelId: null,
          modelName: "模型不存在",
          modelDesc: "抱歉，您要访问的AI模型不存在或已被删除",
          modelImageUrl: null
        };
        uni.showToast({
          title: "AI模型不存在",
          icon: "none",
          duration: 3e3
        });
      },
      // 显示网络错误
      showNetworkError() {
        this.currentAiModel = {
          modelId: null,
          modelName: "网络连接失败",
          modelDesc: "网络连接超时，请检查网络设置后重试",
          modelImageUrl: null
        };
        uni.showToast({
          title: "网络连接超时",
          icon: "none",
          duration: 3e3
        });
      },
      // 显示用户未登录错误
      showUserNotLoginError() {
        this.currentAiModel = {
          modelId: null,
          modelName: "请先登录",
          modelDesc: "您需要先登录才能使用AI聊天功能",
          modelImageUrl: null
        };
        uni.showToast({
          title: "请先登录",
          icon: "none",
          duration: 3e3
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/login/login-replica"
          });
        }, 2e3);
      },
      goBack() {
        try {
          uni.navigateBack({
            fail: () => {
              uni.navigateTo({
                url: "/pages/ai/ai-list"
              });
            }
          });
        } catch (error) {
          uni.navigateTo({
            url: "/pages/ai/ai-list"
          });
        }
      },
      showMoreOptions() {
        this.showActionSheet = true;
      },
      hideActionSheet() {
        this.showActionSheet = false;
      },
      // 跳转到我购买的AI模型页面
      goToMyAIModels() {
        this.hideActionSheet();
        uni.navigateTo({
          url: "/pages/ai/ai-list"
        });
      },
      // 跳转到AI详情信息页面
      goToAIDetails() {
        this.hideActionSheet();
        const aiName = this.currentAiModel.modelName || this.modelId || "AI助手";
        uni.navigateTo({
          url: `/pages/ai/gift?userAiId=${this.modelId}&aiName=${encodeURIComponent(aiName)}`
        });
      },
      // 跳转到AI模型商城页面
      goToAIStore() {
        this.hideActionSheet();
        uni.navigateTo({
          url: "/pages/ai/ai-store"
        });
      },
      toggleVoiceInput() {
        this.isVoiceMode = !this.isVoiceMode;
        if (this.isVoiceMode) {
          this.showEmojiPanel = false;
          this.showPlusPanel = false;
        }
      },
      toggleEmoji() {
        this.showEmojiPanel = !this.showEmojiPanel;
        this.showPlusPanel = false;
      },
      togglePlusMenu() {
        this.showPlusPanel = !this.showPlusPanel;
        this.showEmojiPanel = false;
      },
      hideEmojiPanel() {
        this.showEmojiPanel = false;
      },
      hidePlusPanel() {
        this.showPlusPanel = false;
      },
      startVoiceRecord() {
        uni.showToast({
          title: "开始录音",
          icon: "none"
        });
      },
      endVoiceRecord() {
        uni.showToast({
          title: "录音完成",
          icon: "none"
        });
      },
      selectImage() {
        this.hidePlusPanel();
        uni.showToast({
          title: "图片选择功能开发中",
          icon: "none"
        });
      },
      openCamera() {
        this.hidePlusPanel();
        uni.showToast({
          title: "相机功能开发中",
          icon: "none"
        });
      },
      makeCall() {
        this.hidePlusPanel();
        uni.showToast({
          title: "通话功能开发中",
          icon: "none"
        });
      },
      shareLocation() {
        this.hidePlusPanel();
        uni.showToast({
          title: "位置分享功能开发中",
          icon: "none"
        });
      },
      onInputFocus() {
        this.inputFocus = true;
      },
      onInputBlur() {
        this.inputFocus = false;
      },
      async sendMessage() {
        if (!this.inputMessage.trim()) {
          return;
        }
        const userMessage = this.inputMessage.trim();
        const userId = uni.getStorageSync("userId");
        if (!userId) {
          uni.showToast({
            title: "请先登录",
            icon: "none"
          });
          return;
        }
        const userMsg = {
          id: Date.now(),
          type: "right",
          text: userMessage,
          time: this.getCurrentTime()
        };
        this.messages.push(userMsg);
        this.inputMessage = "";
        this.$nextTick(() => {
          this.scrollToBottom();
        });
        try {
          const aiResponse = this.generateAIResponse(userMessage);
          const aiMsg = {
            id: Date.now() + 1,
            type: "left",
            text: aiResponse,
            time: this.getCurrentTime()
          };
          this.messages.push(aiMsg);
          await this.saveChatMessage(userId, this.modelId, userMessage, aiResponse, "ai_chat");
          this.$nextTick(() => {
            this.scrollToBottom();
          });
        } catch (error) {
          formatAppLog("error", "at pages/ai/ai-chat.vue:733", "发送消息失败:", error);
          uni.showToast({
            title: "发送失败，请重试",
            icon: "none"
          });
        }
      },
      generateAIResponse(userMessage) {
        const responses = [
          "我理解你的问题，让我来帮你解答。",
          "这是一个很有趣的问题！",
          "根据我的分析，我认为...",
          "让我为你提供一些建议。",
          "这个问题需要仔细考虑，我的建议是...",
          "谢谢你的提问，让我想想...",
          "这是一个很好的观点！",
          "我建议你可以尝试..."
        ];
        return responses[Math.floor(Math.random() * responses.length)];
      },
      getCurrentTime() {
        const now = /* @__PURE__ */ new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes();
        const timeStr = hours < 12 ? "上午" : "下午";
        const displayHours = hours < 12 ? hours : hours - 12;
        return `${timeStr}${displayHours}:${minutes.toString().padStart(2, "0")}`;
      },
      scrollToBottom() {
        this.scrollTop = 999999;
      },
      // 获取头像显示文字
      getAvatarText() {
        if (!this.currentAiModel.modelName) {
          return "?";
        }
        return this.currentAiModel.modelName.charAt(0);
      },
      // 保存聊天消息到数据库
      async saveChatMessage(userId, userAiId, userMessage, aiResponse, chatType) {
        return new Promise((resolve, reject) => {
          const chatData = {
            userId: parseInt(userId),
            userAiId: userAiId ? parseInt(userAiId) : null,
            userMessage,
            aiResponse,
            chatType,
            messageTimestamp: (/* @__PURE__ */ new Date()).toISOString(),
            createdAt: (/* @__PURE__ */ new Date()).toISOString(),
            updatedAt: (/* @__PURE__ */ new Date()).toISOString()
          };
          formatAppLog("log", "at pages/ai/ai-chat.vue:793", "发送聊天数据:", chatData);
          uni.request({
            url: "http://localhost:8888/api/a-entities-wlq/ai-chat-list-detail-r/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: chatData,
            timeout: 1e4,
            success: (res) => {
              formatAppLog("log", "at pages/ai/ai-chat.vue:804", "聊天消息保存成功:", res);
              resolve(res);
            },
            fail: (err) => {
              formatAppLog("error", "at pages/ai/ai-chat.vue:808", "聊天消息保存失败:", err);
              reject(err);
            }
          });
        });
      }
    }
  };
  function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "chat-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部栏 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            class: "back-icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
              fill: "#666666",
              "p-id": "727"
            })
          ]))
        ]),
        vue.createElementVNode(
          "text",
          { class: "title" },
          vue.toDisplayString($data.currentAiModel.modelName || "AI 助手"),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", {
          class: "more-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.showMoreOptions && $options.showMoreOptions(...args))
        }, [
          vue.createElementVNode("view", { class: "dot" }),
          vue.createElementVNode("view", { class: "dot" }),
          vue.createElementVNode("view", { class: "dot" })
        ])
      ]),
      vue.createCommentVNode(" 聊天对话区域 "),
      vue.createElementVNode("scroll-view", {
        class: "chat-area",
        "scroll-y": "true",
        "scroll-top": $data.scrollTop
      }, [
        vue.createCommentVNode(" AI模型加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载AI模型...")
        ])) : $data.chatLoading ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 聊天记录加载状态 "),
            vue.createElementVNode("view", { class: "loading-container" }, [
              vue.createElementVNode("view", { class: "loading-spinner" }),
              vue.createElementVNode("text", { class: "loading-text" }, "正在加载聊天记录...")
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : $data.messages.length > 0 ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 聊天消息列表 "),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.messages, (message) => {
                return vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: message.id,
                    class: vue.normalizeClass(["message", message.type])
                  },
                  [
                    message.type === "left" && $data.currentAiModel.modelImageUrl ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 0,
                      class: "avatar",
                      src: $data.currentAiModel.modelImageUrl,
                      mode: "aspectFill"
                    }, null, 8, ["src"])) : message.type === "left" ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 1,
                      class: "avatar avatar-placeholder"
                    }, [
                      vue.createElementVNode(
                        "text",
                        { class: "avatar-text" },
                        vue.toDisplayString($options.getAvatarText()),
                        1
                        /* TEXT */
                      )
                    ])) : vue.createCommentVNode("v-if", true),
                    vue.createElementVNode("view", { class: "message-bubble" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "message-text" },
                        vue.toDisplayString(message.text),
                        1
                        /* TEXT */
                      ),
                      message.time ? (vue.openBlock(), vue.createElementBlock(
                        "text",
                        {
                          key: 0,
                          class: "message-time"
                        },
                        vue.toDisplayString(message.time),
                        1
                        /* TEXT */
                      )) : vue.createCommentVNode("v-if", true)
                    ]),
                    message.type === "right" ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 2,
                      class: "avatar",
                      src: _imports_0,
                      mode: "aspectFill"
                    })) : vue.createCommentVNode("v-if", true)
                  ],
                  2
                  /* CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          64
          /* STABLE_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 3 },
          [
            vue.createCommentVNode(" 无消息时显示提示 "),
            vue.createElementVNode("view", { class: "no-messages" }, [
              vue.createElementVNode("text", { class: "no-messages-text" }, "暂无聊天记录")
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ], 8, ["scroll-top"]),
      vue.createCommentVNode(" 消息输入栏 "),
      vue.createElementVNode("view", { class: "input-bar" }, [
        vue.createElementVNode("view", {
          class: "mic-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.toggleVoiceInput && $options.toggleVoiceInput(...args))
        }, [
          vue.createCommentVNode(" 语音按钮 "),
          !$data.isVoiceMode ? (vue.openBlock(), vue.createElementBlock("svg", {
            key: 0,
            class: "mic-icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M593.024 234.496l-46.165333 46.229333c0.106667 0.085333 0.149333 0.149333 0.277333 0.234667 127.552 127.658667 127.552 334.677333 0 462.336l46.122667 46.250667c153.045333-153.194667 153.045333-401.621333 0-554.816C593.173333 234.666667 593.130667 234.56 593.024 234.496z",
              "p-id": "3544"
            }),
            vue.createElementVNode("path", {
              d: "M500.885333 327.189333c-0.042667-0.085333-0.128-0.149333-0.234667-0.213333l-46.165333 46.229333c0.042667 0.085333 0.128 0.149333 0.234667 0.256 76.48 76.565333 76.48 200.789333 0 277.397333l46.144 46.229333C603.008 595.008 603.008 429.333333 500.885333 327.189333z",
              "p-id": "3545"
            }),
            vue.createElementVNode("path", {
              d: "M408.32 419.434667l-92.394667 92.458667 92.629333 92.714667c51.008-51.114667 51.008-133.888 0-184.938667C408.469333 419.584 408.362667 419.52 408.32 419.434667z",
              "p-id": "3546"
            }),
            vue.createElementVNode("path", {
              d: "M512 0C229.696 0 0 229.696 0 512c0 282.282667 229.696 512 512 512 282.282667 0 512-229.717333 512-512C1024 229.696 794.282667 0 512 0zM512 981.290667C253.226667 981.290667 42.688 770.773333 42.688 512S253.226667 42.688 512 42.688 981.290667 253.226667 981.290667 512 770.773333 981.290667 512 981.290667z",
              "p-id": "3547"
            })
          ])) : (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            [
              vue.createCommentVNode(" 键盘按钮 "),
              (vue.openBlock(), vue.createElementBlock("svg", {
                class: "keyboard-icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                width: "32",
                height: "32"
              }, [
                vue.createElementVNode("path", {
                  d: "M512 64A448 448 0 1 0 960 512 448.5 448.5 0 0 0 512 64z m0 832a384 384 0 1 1 384-384 384.5 384.5 0 0 1-384 384z",
                  fill: "#333333",
                  "p-id": "2120"
                }),
                vue.createElementVNode("path", {
                  d: "M320 400m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z",
                  fill: "#333333",
                  "p-id": "2121"
                }),
                vue.createElementVNode("path", {
                  d: "M448 448A48 48 0 1 0 400 400a48 48 0 0 0 48 48zM576 352a48 48 0 1 0 48 48 48 48 0 0 0-48-48zM704 352a48 48 0 1 0 48 48 48 48 0 0 0-48-48z",
                  fill: "#333333",
                  "p-id": "2122"
                }),
                vue.createElementVNode("path", {
                  d: "M320 528m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z",
                  fill: "#333333",
                  "p-id": "2123"
                }),
                vue.createElementVNode("path", {
                  d: "M448 576a48 48 0 1 0-48-48 48 48 0 0 0 48 48zM576 640H448a48 48 0 0 0 0 96h128a48 48 0 1 0 0-96zM576 480a48 48 0 1 0 48 48 48 48 0 0 0-48-48zM704 480a48 48 0 1 0 48 48 48 48 0 0 0-48-48z",
                  fill: "#333333",
                  "p-id": "2124"
                })
              ]))
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 输入框区域 "),
        !$data.isVoiceMode ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "input-field"
        }, [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "message-input",
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.inputMessage = $event),
            placeholder: "输入消息...",
            focus: $data.inputFocus,
            onFocus: _cache[4] || (_cache[4] = (...args) => $options.onInputFocus && $options.onInputFocus(...args)),
            onBlur: _cache[5] || (_cache[5] = (...args) => $options.onInputBlur && $options.onInputBlur(...args)),
            onConfirm: _cache[6] || (_cache[6] = (...args) => $options.sendMessage && $options.sendMessage(...args))
          }, null, 40, ["focus"]), [
            [vue.vModelText, $data.inputMessage]
          ])
        ])) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 语音按钮区域 "),
            vue.createElementVNode(
              "view",
              {
                class: "voice-field",
                onTouchstart: _cache[7] || (_cache[7] = (...args) => $options.startVoiceRecord && $options.startVoiceRecord(...args)),
                onTouchend: _cache[8] || (_cache[8] = (...args) => $options.endVoiceRecord && $options.endVoiceRecord(...args))
              },
              [
                vue.createElementVNode("text", { class: "voice-text" }, "按住说话")
              ],
              32
              /* NEED_HYDRATION */
            )
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )),
        vue.createElementVNode("view", { class: "action-btns" }, [
          vue.createElementVNode("view", {
            class: "emoji-btn",
            onClick: _cache[9] || (_cache[9] = (...args) => $options.toggleEmoji && $options.toggleEmoji(...args))
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              class: "emoji-icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M512 160C317.5936 160 160 317.5936 160 512S317.5936 864 512 864 864 706.4064 864 512 706.4064 160 512 160z m0 64c159.0528 0 288 128.9472 288 288S671.0528 800 512 800 224 671.0528 224 512 352.9472 224 512 224z",
                fill: "#2c2c2c",
                "p-id": "4603"
              }),
              vue.createElementVNode("path", {
                d: "M683.3408 501.248H340.6592a25.6 25.6 0 0 0-25.6 26.112l0.1536 6.912a196.9408 196.9408 0 0 0 393.728-7.3984 25.6 25.6 0 0 0-25.6-25.6z m-27.8784 51.2l-0.3072 1.792A145.7664 145.7664 0 0 1 512 672.5888l-5.7088-0.1024a145.8176 145.8176 0 0 1-137.2928-117.4272l-0.4864-2.6112h286.9504z",
                fill: "#2c2c2c",
                "p-id": "4604"
              }),
              vue.createElementVNode("path", {
                d: "M411.1104 411.4432m-38.7584 0a38.7584 38.7584 0 1 0 77.5168 0 38.7584 38.7584 0 1 0-77.5168 0Z",
                fill: "#2c2c2c",
                "p-id": "4605"
              }),
              vue.createElementVNode("path", {
                d: "M612.8896 411.4432m-38.7584 0a38.7584 38.7584 0 1 0 77.5168 0 38.7584 38.7584 0 1 0-77.5168 0Z",
                fill: "#2c2c2c",
                "p-id": "4606"
              })
            ]))
          ]),
          vue.createElementVNode("view", {
            class: "plus-btn",
            onClick: _cache[10] || (_cache[10] = (...args) => $options.togglePlusMenu && $options.togglePlusMenu(...args))
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              class: "plus-icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M511.5 957.9C264.9 957.9 65 758.2 65 511.9s199.9-446 446.5-446S958 265.6 958 511.9c0.1 246.3-199.8 446-446.5 446zM509 149.1c-200.4 0-355.8 162.2-355.8 362.3 0 200.1 155.4 356.8 355.8 356.8s362.9-156.7 362.9-356.8c0-200.1-162.5-362.3-362.9-362.3zM690.5 556h-134v133.8c0 24.6-20 44.6-44.6 44.6h-0.1c-24.6 0-44.6-19.9-44.6-44.6V556h-134c-24.7 0-44.6-19.9-44.6-44.5v-0.1c0-24.6 20-44.6 44.6-44.6h134V333c0-24.6 20-44.6 44.6-44.6h0.1c24.7 0 44.6 19.9 44.6 44.6v133.8h134c24.7 0 44.6 19.9 44.6 44.6v0.1c0 24.6-19.9 44.5-44.6 44.5z m0 0",
                "p-id": "1640"
              })
            ]))
          ])
        ])
      ]),
      vue.createCommentVNode(" 表情面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["emoji-panel", { "active": $data.showEmojiPanel }]),
          onClick: _cache[12] || (_cache[12] = (...args) => $options.hideEmojiPanel && $options.hideEmojiPanel(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "emoji-content",
            onClick: _cache[11] || (_cache[11] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "emoji-grid" }, [
              vue.createCommentVNode(" 第一行 "),
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(4, (i) => {
                  return vue.createElementVNode("view", {
                    class: "emoji-item",
                    key: `row1-${i}`
                  }, [
                    vue.createElementVNode("image", {
                      class: "emoji-image",
                      src: "",
                      mode: "aspectFill"
                    })
                  ]);
                }),
                64
                /* STABLE_FRAGMENT */
              )),
              vue.createCommentVNode(" 第二行 "),
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(4, (i) => {
                  return vue.createElementVNode("view", {
                    class: "emoji-item",
                    key: `row2-${i}`
                  }, [
                    vue.createElementVNode("image", {
                      class: "emoji-image",
                      src: "",
                      mode: "aspectFill"
                    })
                  ]);
                }),
                64
                /* STABLE_FRAGMENT */
              )),
              vue.createCommentVNode(" 第三行 "),
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(4, (i) => {
                  return vue.createElementVNode("view", {
                    class: "emoji-item",
                    key: `row3-${i}`
                  }, [
                    vue.createElementVNode("image", {
                      class: "emoji-image",
                      src: "",
                      mode: "aspectFill"
                    })
                  ]);
                }),
                64
                /* STABLE_FRAGMENT */
              ))
            ]),
            vue.createCommentVNode(" 翻页指示器 "),
            vue.createElementVNode("view", { class: "emoji-pagination" }, [
              vue.createElementVNode("view", { class: "page-dot active" }),
              vue.createElementVNode("view", { class: "page-dot" }),
              vue.createElementVNode("view", { class: "page-dot" })
            ])
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 加号功能面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["plus-panel", { "active": $data.showPlusPanel }]),
          onClick: _cache[18] || (_cache[18] = (...args) => $options.hidePlusPanel && $options.hidePlusPanel(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "plus-content",
            onClick: _cache[17] || (_cache[17] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "plus-grid" }, [
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[13] || (_cache[13] = (...args) => $options.selectImage && $options.selectImage(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zM338 304c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm513.9 436.1H172.1c-12.9 0-24.8-5.9-32.7-16.1L73.4 659.8c-7.9-10.2-7.9-23.4 0-33.6l66-84.2c7.9-10.2 19.8-16.1 32.7-16.1h679.8c12.9 0 24.8 5.9 32.7 16.1l66 84.2c7.9 10.2 7.9 23.4 0 33.6l-66 84.2c-7.9 10.2-19.8 16.1-32.7 16.1z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "图片与视频")
              ]),
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[14] || (_cache[14] = (...args) => $options.openCamera && $options.openCamera(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                      fill: "#333333"
                    }),
                    vue.createElementVNode("path", {
                      d: "M464 336a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "相机")
              ]),
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[15] || (_cache[15] = (...args) => $options.makeCall && $options.makeCall(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                      fill: "#333333"
                    }),
                    vue.createElementVNode("path", {
                      d: "M512 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "语音/视频通话")
              ]),
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[16] || (_cache[16] = (...args) => $options.shareLocation && $options.shareLocation(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                      fill: "#333333"
                    }),
                    vue.createElementVNode("path", {
                      d: "M512 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "定位")
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 底部操作菜单 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["action-sheet", { "active": $data.showActionSheet }]),
          onClick: _cache[24] || (_cache[24] = (...args) => $options.hideActionSheet && $options.hideActionSheet(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "action-content",
            onClick: _cache[23] || (_cache[23] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", {
              class: "action-item",
              onClick: _cache[19] || (_cache[19] = (...args) => $options.goToMyAIModels && $options.goToMyAIModels(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "我购买的AI模型")
            ]),
            vue.createElementVNode("view", {
              class: "action-item",
              onClick: _cache[20] || (_cache[20] = (...args) => $options.goToAIDetails && $options.goToAIDetails(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "AI详情信息")
            ]),
            vue.createElementVNode("view", {
              class: "action-item",
              onClick: _cache[21] || (_cache[21] = (...args) => $options.goToAIStore && $options.goToAIStore(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "AI模型商城")
            ]),
            vue.createElementVNode("view", {
              class: "action-cancel",
              onClick: _cache[22] || (_cache[22] = (...args) => $options.hideActionSheet && $options.hideActionSheet(...args))
            }, [
              vue.createElementVNode("text", { class: "cancel-text" }, "取消")
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesAiAiChat = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$$], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/ai-chat.vue"]]);
  const _sfc_main$$ = {
    name: "AIStore",
    data() {
      return {
        aiModels: [],
        // AI模型列表
        userAiModels: [],
        // 用户拥有的AI模型
        loading: true,
        // 加载状态
        errorMessage: ""
        // 错误信息
      };
    },
    onLoad() {
      this.loadAiStoreData();
    },
    methods: {
      // 加载AI商店数据
      async loadAiStoreData() {
        this.loading = true;
        this.errorMessage = "";
        try {
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            this.errorMessage = "用户未登录";
            this.loading = false;
            return;
          }
          const [aiModelsResponse, userAiModelsResponse] = await Promise.all([
            this.getAiModels(),
            this.getUserAiModels(userId)
          ]);
          if (aiModelsResponse.data && aiModelsResponse.data.length > 0) {
            this.aiModels = aiModelsResponse.data;
            formatAppLog("log", "at pages/ai/ai-store.vue:181", "加载的AI模型数据:", this.aiModels);
          } else {
            this.aiModels = [];
          }
          if (userAiModelsResponse.data && userAiModelsResponse.data.length > 0) {
            this.userAiModels = userAiModelsResponse.data;
            formatAppLog("log", "at pages/ai/ai-store.vue:188", "用户AI模型数据:", this.userAiModels);
          } else {
            this.userAiModels = [];
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/ai-store.vue:194", "加载AI商店数据失败:", error);
          this.errorMessage = "加载数据失败，请重试";
        } finally {
          this.loading = false;
        }
      },
      // 获取AI模型列表
      getAiModels() {
        return new Promise((resolve, reject) => {
          uni.request({
            url: "http://localhost:8888/api/a-entities/aimodel-base-info/all",
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 获取用户AI模型
      getUserAiModels(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: `http://localhost:8888/api/user-ai-model/user/${userId}`,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 检查AI模型是否已购买
      isPurchased(aiModel) {
        if (!aiModel || !this.userAiModels.length)
          return false;
        return this.userAiModels.some(
          (userModel) => userModel.parentModelId === aiModel.modelId || userModel.modelName === aiModel.modelName
        );
      },
      // 获取用户AI模型信息
      getUserAiModel(aiModel) {
        if (!aiModel || !this.userAiModels.length)
          return null;
        return this.userAiModels.find(
          (userModel) => userModel.parentModelId === aiModel.modelId || userModel.modelName === aiModel.modelName
        );
      },
      // 获取头像样式类
      getAvatarClass(modelName) {
        if (!modelName)
          return "default-ai-avatar";
        const name = modelName.toLowerCase();
        if (name.includes("宠") || name.includes("pet"))
          return "pet-ai-avatar";
        if (name.includes("搭") || name.includes("partner") || name.includes("生活"))
          return "lifestyle-ai-avatar";
        if (name.includes("学") || name.includes("study"))
          return "study-ai-avatar";
        if (name.includes("游") || name.includes("game"))
          return "gaming-ai-avatar";
        if (name.includes("运") || name.includes("sport"))
          return "sports-ai-avatar";
        if (name.includes("音") || name.includes("music"))
          return "music-ai-avatar";
        if (name.includes("旅") || name.includes("travel"))
          return "travel-ai-avatar";
        return "default-ai-avatar";
      },
      // 获取头像文字
      getAvatarText(modelName) {
        if (!modelName)
          return "?";
        return modelName.charAt(0).toUpperCase();
      },
      // 格式化价格（人民币转金币，乘以100）
      formatPrice(price) {
        if (!price)
          return "0C";
        const goldCoins = Math.round(price * 100);
        return goldCoins + "C";
      },
      // 格式化推荐数
      formatRecommendCount(count) {
        if (!count)
          return "0";
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 格式化购买数
      formatPurchaseCount(count) {
        if (!count)
          return "0";
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 格式化评分
      formatScore(score) {
        if (!score)
          return "0.0";
        return parseFloat(score).toFixed(1);
      },
      // 格式化购买时间
      formatPurchaseTime(aiModel) {
        const userModel = this.getUserAiModel(aiModel);
        if (!userModel || !userModel.createdAt)
          return "未知";
        const date = new Date(userModel.createdAt);
        return `${date.getMonth() + 1}月${date.getDate()}日`;
      },
      // 购买AI模型
      async buyAiModel(aiModel) {
        try {
          if (this.isPurchased(aiModel)) {
            uni.showToast({
              title: "您已购买此AI模型",
              icon: "none"
            });
            return;
          }
          const confirmResult = await new Promise((resolve) => {
            uni.showModal({
              title: "确认购买",
              content: `确定要购买 ${aiModel.modelName} 吗？
价格：${this.formatPrice(aiModel.price)}`,
              success: (res) => {
                resolve(res.confirm);
              },
              fail: () => {
                resolve(false);
              }
            });
          });
          if (!confirmResult) {
            return;
          }
          uni.showLoading({
            title: "购买中..."
          });
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.hideLoading();
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          const purchaseResult = await this.purchaseAiModel(userId, aiModel);
          uni.hideLoading();
          if (purchaseResult.success) {
            uni.showToast({
              title: "购买成功！",
              icon: "success"
            });
            await this.loadAiStoreData();
          } else {
            uni.showToast({
              title: purchaseResult.message || "购买失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/ai/ai-store.vue:384", "购买AI模型失败:", error);
          uni.showToast({
            title: "购买失败，请重试",
            icon: "none"
          });
        }
      },
      // 调用购买API
      purchaseAiModel(userId, aiModel) {
        return new Promise((resolve, reject) => {
          const purchaseData = {
            userId: parseInt(userId),
            parentModelId: aiModel.modelId,
            modelName: aiModel.modelName,
            modelDesc: aiModel.modelDesc,
            modelImageUrl: aiModel.modelImageUrl || "",
            price: aiModel.price
          };
          formatAppLog("log", "at pages/ai/ai-store.vue:404", "发送购买请求:", purchaseData);
          uni.request({
            url: "http://localhost:8888/api/u-entities/user-ai-model/purchase",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: purchaseData,
            timeout: 1e4,
            success: (res) => {
              formatAppLog("log", "at pages/ai/ai-store.vue:415", "购买响应:", res);
              resolve(res.data);
            },
            fail: (err) => {
              formatAppLog("error", "at pages/ai/ai-store.vue:419", "购买请求失败:", err);
              reject(err);
            }
          });
        });
      },
      goBack() {
        uni.navigateBack();
      },
      openSearch() {
        uni.showToast({
          title: "搜索功能开发中",
          icon: "none"
        });
      },
      goToAIDetail(aiModel) {
        formatAppLog("log", "at pages/ai/ai-store.vue:436", "跳转到AI详情页面:", aiModel);
        uni.navigateTo({
          url: `/pages/ai/pet-ai-detail?aiName=${encodeURIComponent(aiModel.modelName)}&modelId=${aiModel.modelId}`,
          success: () => {
            formatAppLog("log", "at pages/ai/ai-store.vue:441", "跳转成功");
          },
          fail: (err) => {
            formatAppLog("error", "at pages/ai/ai-store.vue:444", "跳转失败:", err);
            uni.showToast({
              title: "页面跳转失败",
              icon: "none"
            });
          }
        });
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToMessages() {
        uni.showToast({
          title: "消息功能",
          icon: "none"
        });
      },
      goToFriends() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      }
    }
  };
  function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "ai-store-page" }, [
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="nav-left" @click="goBack">\n				<svg class="back-icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32">\n					<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666"></path>\n				</svg>\n			</view>\n			<view class="nav-center">\n				<text class="nav-title">AI商店</text>\n			</view>\n			<view class="nav-right">\n				<view class="search-icon" @click="openSearch">\n					<text class="search-symbol">🔍</text>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-section"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载AI模型...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-section" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", {
                class: "retry-button",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.loadAiStoreData && $options.loadAiStoreData(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" AI模型列表 "),
            vue.createElementVNode("view", null, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.aiModels, (aiModel) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: aiModel.modelId,
                    class: "ai-item",
                    onClick: () => $options.goToAIDetail(aiModel)
                  }, [
                    vue.createElementVNode("view", { class: "ai-avatar" }, [
                      aiModel.modelImageUrl ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        class: "avatar-image",
                        src: aiModel.modelImageUrl,
                        mode: "aspectFill"
                      }, null, 8, ["src"])) : (vue.openBlock(), vue.createElementBlock(
                        "view",
                        {
                          key: 1,
                          class: vue.normalizeClass(["avatar-circle", $options.getAvatarClass(aiModel.modelName)])
                        },
                        [
                          vue.createElementVNode(
                            "text",
                            { class: "avatar-text" },
                            vue.toDisplayString($options.getAvatarText(aiModel.modelName)),
                            1
                            /* TEXT */
                          )
                        ],
                        2
                        /* CLASS */
                      ))
                    ]),
                    vue.createElementVNode("view", { class: "ai-info" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "ai-name" },
                        vue.toDisplayString(aiModel.modelName || "未知AI"),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "ai-description" },
                        vue.toDisplayString(aiModel.modelDesc || "暂无描述"),
                        1
                        /* TEXT */
                      ),
                      vue.createCommentVNode(" 统计信息 "),
                      vue.createElementVNode("view", { class: "ai-stats" }, [
                        vue.createElementVNode("view", { class: "stat-item" }, [
                          vue.createElementVNode(
                            "text",
                            { class: "stat-value" },
                            vue.toDisplayString($options.formatRecommendCount(aiModel.recommendCount)),
                            1
                            /* TEXT */
                          ),
                          vue.createElementVNode("text", { class: "stat-label" }, "推荐")
                        ]),
                        vue.createElementVNode("view", { class: "stat-item" }, [
                          vue.createElementVNode(
                            "text",
                            { class: "stat-value" },
                            vue.toDisplayString($options.formatPurchaseCount(aiModel.purchaseCount)),
                            1
                            /* TEXT */
                          ),
                          vue.createElementVNode("text", { class: "stat-label" }, "购买")
                        ]),
                        vue.createElementVNode("view", { class: "stat-item" }, [
                          vue.createElementVNode(
                            "text",
                            { class: "stat-value" },
                            vue.toDisplayString($options.formatScore(aiModel.score)),
                            1
                            /* TEXT */
                          ),
                          vue.createElementVNode("text", { class: "stat-label" }, "评分")
                        ])
                      ]),
                      vue.createCommentVNode(" 价格信息 "),
                      vue.createElementVNode("view", { class: "ai-price" }, [
                        vue.createElementVNode(
                          "text",
                          { class: "price-text" },
                          vue.toDisplayString($options.formatPrice(aiModel.price)),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode("text", { class: "price-label" }, "金币")
                      ]),
                      vue.createCommentVNode(" 互动数据 "),
                      vue.createElementVNode("view", { class: "ai-interactions" }, [
                        vue.createElementVNode("view", { class: "interaction-item" }, [
                          vue.createElementVNode("text", { class: "interaction-icon" }, "👍"),
                          vue.createElementVNode(
                            "text",
                            { class: "interaction-count" },
                            vue.toDisplayString(aiModel.likeCount || 0),
                            1
                            /* TEXT */
                          )
                        ]),
                        vue.createElementVNode("view", { class: "interaction-item" }, [
                          vue.createElementVNode("text", { class: "interaction-icon" }, "💬"),
                          vue.createElementVNode(
                            "text",
                            { class: "interaction-count" },
                            vue.toDisplayString(aiModel.commentCount || 0),
                            1
                            /* TEXT */
                          )
                        ]),
                        vue.createElementVNode("view", { class: "interaction-item" }, [
                          vue.createElementVNode("text", { class: "interaction-icon" }, "⭐"),
                          vue.createElementVNode(
                            "text",
                            { class: "interaction-count" },
                            vue.toDisplayString(aiModel.collectCount || 0),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      $options.isPurchased(aiModel) ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "purchase-info"
                      }, [
                        vue.createElementVNode(
                          "text",
                          { class: "purchase-time" },
                          "购买时间: " + vue.toDisplayString($options.formatPurchaseTime(aiModel)),
                          1
                          /* TEXT */
                        )
                      ])) : vue.createCommentVNode("v-if", true)
                    ]),
                    vue.createElementVNode("view", {
                      class: "ai-status",
                      onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {
                      }, ["stop"]))
                    }, [
                      $options.isPurchased(aiModel) ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "purchased-badge"
                      }, [
                        vue.createElementVNode("text", { class: "badge-text" }, "已购买")
                      ])) : (vue.openBlock(), vue.createElementBlock("view", {
                        key: 1,
                        class: "buy-btn",
                        onClick: ($event) => $options.buyAiModel(aiModel)
                      }, [
                        vue.createElementVNode("text", { class: "buy-text" }, "购买")
                      ], 8, ["onClick"]))
                    ])
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              vue.createCommentVNode(" 空状态 "),
              $data.aiModels.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "empty-section"
              }, [
                vue.createElementVNode("view", { class: "empty-icon" }, "🤖"),
                vue.createElementVNode("text", { class: "empty-text" }, "暂无AI模型"),
                vue.createElementVNode("text", { class: "empty-desc" }, "敬请期待更多AI模型上线！")
              ])) : vue.createCommentVNode("v-if", true)
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-nav" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToMessages && $options.goToMessages(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", { class: "nav-item active" }, [
          vue.createElementVNode("view", { class: "ai-icon" }, "AI")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToFriends && $options.goToFriends(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-avatar" }, [
            vue.createElementVNode("view", { class: "mini-cat-avatar" }, [
              vue.createElementVNode("view", { class: "mini-cat-body" }),
              vue.createElementVNode("view", { class: "mini-cat-face" }, [
                vue.createElementVNode("view", { class: "mini-cat-eyes" }, [
                  vue.createElementVNode("view", { class: "mini-cat-eye" }),
                  vue.createElementVNode("view", { class: "mini-cat-eye" })
                ])
              ])
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesAiAiStore = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$_], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/ai-store.vue"]]);
  const _sfc_main$_ = {
    name: "TasksPage",
    data() {
      return {
        currentFilter: "all",
        showRating: false,
        currentTask: null,
        rating: 0,
        comment: "",
        tasks: [],
        loading: false,
        errorMessage: "",
        userId: null,
        commentedTasks: /* @__PURE__ */ new Set()
        // 存储已评价的任务ID
      };
    },
    onLoad() {
      this.userId = uni.getStorageSync("userId") || 1;
      formatAppLog("log", "at pages/ai/tasks.vue:201", "tasks页面加载，用户ID:", this.userId);
      this.loadTasks();
    },
    computed: {
      totalTasks() {
        return this.tasks.length;
      },
      activeTasks() {
        return this.tasks.filter((task) => task.status === "active").length;
      },
      completedTasks() {
        return this.tasks.filter((task) => task.status === "completed").length;
      },
      filteredTasks() {
        if (this.currentFilter === "all") {
          return this.tasks;
        } else if (this.currentFilter === "active") {
          return this.tasks.filter((task) => task.status === "active");
        } else if (this.currentFilter === "completed") {
          return this.tasks.filter((task) => task.status === "completed");
        }
        return this.tasks;
      },
      ratingText() {
        const texts = ["", "很差", "较差", "一般", "较好", "很好"];
        return texts[this.rating] || "";
      }
    },
    methods: {
      // 加载任务数据
      async loadTasks() {
        this.loading = true;
        this.errorMessage = "";
        try {
          formatAppLog("log", "at pages/ai/tasks.vue:238", "开始加载用户任务数据，用户ID:", this.userId);
          const response = await uni.request({
            url: `http://localhost:8888/api/u-entities/user-task-relationship/all`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/tasks.vue:248", "任务数据响应:", response);
          if (response.statusCode === 200 && response.data) {
            const userTasks = response.data.filter((task) => task.userId === this.userId);
            formatAppLog("log", "at pages/ai/tasks.vue:253", "用户任务数据:", userTasks);
            this.tasks = this.convertTasksToDisplayFormat(userTasks);
            formatAppLog("log", "at pages/ai/tasks.vue:257", "转换后的任务数据:", this.tasks);
            await this.checkUserComments();
          } else {
            throw new Error("加载任务数据失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/tasks.vue:265", "加载任务数据异常:", error);
          this.errorMessage = "加载任务数据失败，请重试";
          uni.showToast({
            title: "加载任务失败",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      // 转换任务数据为显示格式
      convertTasksToDisplayFormat(tasks) {
        return tasks.map((task) => {
          let status = "pending";
          if (task.status === 1) {
            status = "active";
          } else if (task.status === 2) {
            status = "completed";
          } else if (task.status === 3) {
            status = "terminated";
          }
          const createTime = this.formatTime(task.createdAt);
          const completedTime = task.endedAt ? this.formatTime(task.endedAt) : null;
          return {
            id: task.userTaskId,
            title: `任务 ${task.userTaskId}`,
            description: `用户任务关系ID: ${task.userTaskId}，状态: ${this.getStatusText(status)}，进度: ${task.taskPercent || 0}%`,
            status,
            progress: task.taskPercent || 0,
            createTime,
            completedTime
          };
        });
      },
      // 格式化时间
      formatTime(timestamp) {
        if (!timestamp)
          return "";
        const date = new Date(timestamp);
        return date.toLocaleString("zh-CN", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit"
        });
      },
      // 获取状态文本
      getStatusText(status) {
        const statusMap = {
          "pending": "待开始",
          "active": "进行中",
          "completed": "已完成",
          "terminated": "已终止"
        };
        return statusMap[status] || "未知";
      },
      // 检查用户是否已评价
      async checkUserComments() {
        try {
          const response = await uni.request({
            url: `http://localhost:8888/api/efmprt-entities/task-comment/check?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          if (response.statusCode === 200 && response.data.exists) {
            this.tasks.forEach((task) => {
              if (task.status === "completed") {
                this.commentedTasks.add(task.id);
              }
            });
            formatAppLog("log", "at pages/ai/tasks.vue:347", "用户已评价，标记所有已完成任务为已评价");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/tasks.vue:350", "检查用户评价状态失败:", error);
        }
      },
      // 检查任务是否已评价
      async checkTaskCommented(taskId) {
        try {
          const response = await uni.request({
            url: `http://localhost:8888/api/efmprt-entities/task-comment/check?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          if (response.statusCode === 200) {
            return response.data.exists || false;
          }
          return false;
        } catch (error) {
          formatAppLog("error", "at pages/ai/tasks.vue:370", "检查任务评价状态失败:", error);
          return false;
        }
      },
      goBack() {
        uni.navigateBack();
      },
      setFilter(filter) {
        this.currentFilter = filter;
      },
      showTaskDetail(task) {
        uni.navigateTo({
          url: `/pages/ai/task-detail?taskId=${task.id}`
        });
      },
      updateTaskStatus(taskId, newStatus) {
        const taskIndex = this.tasks.findIndex((task) => task.id === taskId);
        if (taskIndex !== -1) {
          this.tasks[taskIndex].status = newStatus;
          if (newStatus === "terminated") {
            this.tasks[taskIndex].progress = 0;
          }
        }
      },
      async showRatingModal(task) {
        const isCommented = await this.checkTaskCommented(task.id);
        if (isCommented) {
          uni.showToast({
            title: "您已经评价过此任务",
            icon: "none",
            duration: 2e3
          });
          return;
        }
        this.currentTask = task;
        this.rating = 0;
        this.comment = "";
        this.showRating = true;
      },
      hideRatingModal() {
        this.showRating = false;
        this.currentTask = null;
      },
      setRating(score) {
        this.rating = score;
      },
      async submitRating() {
        if (this.rating === 0) {
          uni.showToast({
            title: "请选择评分",
            icon: "none"
          });
          return;
        }
        try {
          formatAppLog("log", "at pages/ai/tasks.vue:432", "提交评分:", {
            taskId: this.currentTask.id,
            userId: this.userId,
            rating: this.rating,
            comment: this.comment
          });
          uni.showLoading({
            title: "提交中..."
          });
          const response = await uni.request({
            url: "http://localhost:8888/api/efmprt-entities/task-comment/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              userId: this.userId,
              taskId: this.currentTask.id,
              stars: this.rating,
              commentText: this.comment || ""
            }
          });
          formatAppLog("log", "at pages/ai/tasks.vue:458", "评分提交响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            uni.showToast({
              title: "评分提交成功",
              icon: "success"
            });
            this.commentedTasks.add(this.currentTask.id);
            this.rating = 0;
            this.comment = "";
            this.hideRatingModal();
          } else {
            throw new Error(response.data.message || "提交失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/tasks.vue:479", "提交评分失败:", error);
          uni.showToast({
            title: "提交失败，请重试",
            icon: "error"
          });
        } finally {
          uni.hideLoading();
        }
      }
    }
  };
  function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    var _a, _b;
    return vue.openBlock(), vue.createElementBlock("view", { class: "tasks-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<svg t="1756247334143" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1052" width="32" height="32">\n					<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666" p-id="1053"></path>\n				</svg>\n			</view>\n			<view class="header-title">\n				<text class="title-text">任务</text>\n			</view>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 任务统计 "),
      vue.createElementVNode("view", { class: "stats-section" }, [
        vue.createElementVNode("view", { class: "stat-item" }, [
          vue.createElementVNode(
            "text",
            { class: "stat-number" },
            vue.toDisplayString($options.totalTasks),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "stat-label" }, "总任务")
        ]),
        vue.createElementVNode("view", { class: "stat-item" }, [
          vue.createElementVNode(
            "text",
            { class: "stat-number" },
            vue.toDisplayString($options.activeTasks),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "stat-label" }, "进行中")
        ]),
        vue.createElementVNode("view", { class: "stat-item" }, [
          vue.createElementVNode(
            "text",
            { class: "stat-number" },
            vue.toDisplayString($options.completedTasks),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "stat-label" }, "已完成")
        ])
      ]),
      vue.createCommentVNode(" 任务列表 "),
      vue.createElementVNode("view", { class: "tasks-list" }, [
        vue.createElementVNode("view", { class: "list-header" }, [
          vue.createElementVNode("text", { class: "header-title" }, "任务列表"),
          vue.createElementVNode("view", { class: "filter-tabs" }, [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["filter-tab", { active: $data.currentFilter === "all" }]),
                onClick: _cache[0] || (_cache[0] = ($event) => $options.setFilter("all"))
              },
              [
                vue.createElementVNode("text", null, "全部")
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["filter-tab", { active: $data.currentFilter === "active" }]),
                onClick: _cache[1] || (_cache[1] = ($event) => $options.setFilter("active"))
              },
              [
                vue.createElementVNode("text", null, "进行中")
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["filter-tab", { active: $data.currentFilter === "completed" }]),
                onClick: _cache[2] || (_cache[2] = ($event) => $options.setFilter("completed"))
              },
              [
                vue.createElementVNode("text", null, "已完成")
              ],
              2
              /* CLASS */
            )
          ])
        ]),
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载任务中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[3] || (_cache[3] = (...args) => $options.loadTasks && $options.loadTasks(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 任务列表 "),
            vue.createElementVNode("view", { class: "task-items" }, [
              $options.filteredTasks.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "empty-container"
              }, [
                vue.createElementVNode("text", { class: "empty-text" }, "暂无任务数据")
              ])) : (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                { key: 1 },
                vue.renderList($options.filteredTasks, (task) => {
                  return vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      class: vue.normalizeClass(["task-item", { completed: task.status === "completed" }]),
                      key: task.id
                    },
                    [
                      vue.createElementVNode("view", { class: "task-header" }, [
                        vue.createElementVNode("view", { class: "task-title-row" }, [
                          vue.createElementVNode(
                            "view",
                            {
                              class: vue.normalizeClass(["task-status", task.status])
                            },
                            [
                              task.status === "completed" ? (vue.openBlock(), vue.createElementBlock("view", {
                                key: 0,
                                class: "status-icon"
                              }, "✓")) : task.status === "active" ? (vue.openBlock(), vue.createElementBlock("view", {
                                key: 1,
                                class: "status-icon"
                              }, "●")) : (vue.openBlock(), vue.createElementBlock("view", {
                                key: 2,
                                class: "status-icon"
                              }, "○"))
                            ],
                            2
                            /* CLASS */
                          ),
                          vue.createElementVNode(
                            "text",
                            { class: "task-title" },
                            vue.toDisplayString(task.title),
                            1
                            /* TEXT */
                          ),
                          task.status === "completed" ? (vue.openBlock(), vue.createElementBlock("view", {
                            key: 0,
                            class: "completed-badge"
                          }, "已完成")) : vue.createCommentVNode("v-if", true)
                        ]),
                        vue.createElementVNode(
                          "text",
                          { class: "task-time" },
                          vue.toDisplayString(task.createTime),
                          1
                          /* TEXT */
                        )
                      ]),
                      vue.createElementVNode(
                        "text",
                        { class: "task-description" },
                        vue.toDisplayString(task.description),
                        1
                        /* TEXT */
                      ),
                      task.status === "active" ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "task-progress"
                      }, [
                        vue.createElementVNode("view", { class: "progress-bar" }, [
                          vue.createElementVNode(
                            "view",
                            {
                              class: "progress-fill",
                              style: vue.normalizeStyle({ width: task.progress + "%" })
                            },
                            null,
                            4
                            /* STYLE */
                          )
                        ]),
                        vue.createElementVNode(
                          "text",
                          { class: "progress-text" },
                          vue.toDisplayString(task.progress) + "%",
                          1
                          /* TEXT */
                        )
                      ])) : vue.createCommentVNode("v-if", true),
                      vue.createElementVNode("view", { class: "task-actions" }, [
                        task.status === "completed" ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 0,
                          class: vue.normalizeClass(["action-btn", $data.commentedTasks.has(task.id) ? "rated-btn" : "rate-btn"]),
                          onClick: ($event) => $data.commentedTasks.has(task.id) ? null : $options.showRatingModal(task)
                        }, [
                          vue.createElementVNode(
                            "text",
                            null,
                            vue.toDisplayString($data.commentedTasks.has(task.id) ? "已评价" : "评分评价"),
                            1
                            /* TEXT */
                          )
                        ], 10, ["onClick"])) : task.status === "terminated" ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 1,
                          class: "action-btn terminated-btn",
                          onClick: ($event) => $options.showTaskDetail(task)
                        }, [
                          vue.createElementVNode("text", null, "任务中止")
                        ], 8, ["onClick"])) : (vue.openBlock(), vue.createElementBlock("view", {
                          key: 2,
                          class: "action-btn detail-btn",
                          onClick: ($event) => $options.showTaskDetail(task)
                        }, [
                          vue.createElementVNode("text", null, "查看详情")
                        ], 8, ["onClick"]))
                      ])
                    ],
                    2
                    /* CLASS */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 评分评价弹窗 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["rating-modal", { active: $data.showRating }]),
          onClick: _cache[9] || (_cache[9] = (...args) => $options.hideRatingModal && $options.hideRatingModal(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "rating-content",
            onClick: _cache[8] || (_cache[8] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "rating-header" }, [
              vue.createElementVNode("text", { class: "rating-title" }, "任务评价"),
              vue.createElementVNode("view", {
                class: "close-btn",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.hideRatingModal && $options.hideRatingModal(...args))
              }, "×")
            ]),
            vue.createElementVNode("view", { class: "task-info" }, [
              vue.createElementVNode(
                "text",
                { class: "task-name" },
                vue.toDisplayString((_a = $data.currentTask) == null ? void 0 : _a.title),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "task-desc" },
                vue.toDisplayString((_b = $data.currentTask) == null ? void 0 : _b.description),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "rating-section" }, [
              vue.createElementVNode("text", { class: "rating-label" }, "请为AI的表现评分："),
              vue.createElementVNode("view", { class: "star-rating" }, [
                (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(5, (i) => {
                    return vue.createElementVNode("view", {
                      class: vue.normalizeClass(["star", { active: i <= $data.rating }]),
                      key: i,
                      onClick: ($event) => $options.setRating(i)
                    }, [
                      vue.createElementVNode("text", null, "★")
                    ], 10, ["onClick"]);
                  }),
                  64
                  /* STABLE_FRAGMENT */
                ))
              ]),
              vue.createElementVNode(
                "text",
                { class: "rating-text" },
                vue.toDisplayString($options.ratingText),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "comment-section" }, [
              vue.createElementVNode("text", { class: "comment-label" }, "评价内容："),
              vue.withDirectives(vue.createElementVNode(
                "textarea",
                {
                  class: "comment-input",
                  "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.comment = $event),
                  placeholder: "请输入您的评价...",
                  maxlength: "200"
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.comment]
              ]),
              vue.createElementVNode(
                "text",
                { class: "char-count" },
                vue.toDisplayString($data.comment.length) + "/200",
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "rating-actions" }, [
              vue.createElementVNode("view", {
                class: "cancel-btn",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.hideRatingModal && $options.hideRatingModal(...args))
              }, [
                vue.createElementVNode("text", null, "取消")
              ]),
              vue.createElementVNode("view", {
                class: "submit-btn",
                onClick: _cache[7] || (_cache[7] = (...args) => $options.submitRating && $options.submitRating(...args))
              }, [
                vue.createElementVNode("text", null, "提交评价")
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesAiTasks = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$Z], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/tasks.vue"]]);
  const _sfc_main$Z = {
    name: "TaskDetailPage",
    data() {
      return {
        taskId: null,
        showRating: false,
        showTerminate: false,
        rating: 0,
        comment: "",
        taskData: {}
      };
    },
    computed: {
      ratingText() {
        const texts = ["", "很差", "较差", "一般", "较好", "很好"];
        return texts[this.rating] || "";
      }
    },
    onLoad(options) {
      if (options.taskId) {
        this.taskId = parseInt(options.taskId);
        this.loadTaskDetail();
      } else {
        this.taskId = 1;
        this.loadTaskDetail();
      }
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      async loadTaskDetail() {
        this.loading = true;
        this.errorMessage = "";
        try {
          formatAppLog("log", "at pages/ai/task-detail.vue:241", "开始加载任务详情，任务ID:", this.taskId);
          const response = await uni.request({
            url: `http://localhost:8888/api/a-entities/ai-task-log/by-user-task/${this.taskId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/task-detail.vue:251", "任务详情响应:", response);
          if (response.statusCode === 200 && response.data) {
            this.taskData = this.convertTaskData(response.data);
            formatAppLog("log", "at pages/ai/task-detail.vue:256", "转换后的任务数据:", this.taskData);
          } else if (response.statusCode === 404) {
            this.errorMessage = "任务不存在";
            formatAppLog("log", "at pages/ai/task-detail.vue:259", "任务不存在，任务ID:", this.taskId);
          } else {
            throw new Error("加载任务详情失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/task-detail.vue:264", "加载任务详情异常:", error);
          this.errorMessage = "加载任务详情失败，请重试";
          uni.showToast({
            title: "加载失败",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      // 转换后端数据为前端显示格式
      convertTaskData(backendData) {
        let taskLog = backendData;
        let taskPercent = 0;
        if (backendData.aiTaskLog) {
          taskLog = backendData.aiTaskLog;
          taskPercent = backendData.taskPercent || 0;
          backendData.userTaskStatus || 0;
        }
        let status = "pending";
        if (taskLog.status === 0) {
          status = "pending";
        } else if (taskLog.status === 1) {
          status = "active";
        } else if (taskLog.status === 2) {
          status = "completed";
        } else if (taskLog.status === 3) {
          status = "error";
        }
        const formatTime = (timestamp) => {
          if (!timestamp)
            return "";
          const date = new Date(timestamp);
          return date.toLocaleString("zh-CN", {
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit"
          });
        };
        let progress = taskPercent;
        if (status === "completed") {
          progress = 100;
        } else if (status === "pending") {
          progress = 0;
        }
        const processSteps = this.generateProcessSteps(taskLog.aiTaskDesc, status);
        const analysisResult = this.generateAnalysisResult(taskLog.taskComment, taskLog.taskStar);
        const suggestions = this.generateSuggestions(status, taskLog.taskComment);
        return {
          id: taskLog.aiTaskLogId,
          title: taskLog.aiTaskName || "未命名任务",
          description: taskLog.aiTaskDesc || "暂无描述",
          status,
          progress,
          createTime: formatTime(taskLog.createdAt),
          completedTime: status === "completed" ? formatTime(taskLog.updatedAt) : null,
          processSteps,
          analysisResult,
          suggestions
        };
      },
      // 生成执行步骤
      generateProcessSteps(description, status) {
        if (!description)
          return [];
        const steps = [
          {
            title: "任务分析",
            description: "分析任务需求和目标",
            completed: true,
            completedTime: "09:00"
          },
          {
            title: "方案制定",
            description: "制定执行方案和策略",
            completed: status === "completed" || status === "active",
            active: status === "active",
            completedTime: status === "completed" ? "10:30" : null
          },
          {
            title: "任务执行",
            description: "执行具体任务内容",
            completed: status === "completed",
            active: status === "active",
            completedTime: status === "completed" ? "14:20" : null
          },
          {
            title: "结果评估",
            description: "评估任务执行结果",
            completed: status === "completed",
            completedTime: status === "completed" ? "16:45" : null
          }
        ];
        return steps;
      },
      // 生成分析结果
      generateAnalysisResult(comment, star) {
        if (!comment && !star)
          return [];
        const results = [];
        if (star) {
          let score = "B";
          if (star >= 4)
            score = "A";
          else if (star >= 3)
            score = "B+";
          else if (star <= 2)
            score = "C";
          results.push({
            title: "任务完成质量",
            score,
            description: this.getScoreDescription(score),
            details: this.getScoreDetails(score)
          });
        }
        if (comment) {
          results.push({
            title: "用户反馈",
            score: "A",
            description: comment,
            details: ["用户评价内容"]
          });
        }
        return results;
      },
      // 生成建议
      generateSuggestions(status, comment) {
        const suggestions = [];
        if (status === "completed") {
          suggestions.push({
            icon: "✅",
            title: "任务完成",
            description: "任务已成功完成，感谢您的使用"
          });
        } else if (status === "active") {
          suggestions.push({
            icon: "⏳",
            title: "继续执行",
            description: "任务正在执行中，请耐心等待"
          });
        } else {
          suggestions.push({
            icon: "🚀",
            title: "开始任务",
            description: "建议尽快开始执行任务"
          });
        }
        if (comment) {
          suggestions.push({
            icon: "💬",
            title: "用户反馈",
            description: "已收到您的反馈，我们会持续改进"
          });
        }
        return suggestions;
      },
      // 获取评分描述
      getScoreDescription(score) {
        const descriptions = {
          "A": "任务完成质量优秀，超出预期",
          "B+": "任务完成质量良好，符合预期",
          "B": "任务完成质量一般，基本符合预期",
          "C": "任务完成质量有待提升"
        };
        return descriptions[score] || "任务完成质量待评估";
      },
      // 获取评分详情
      getScoreDetails(score) {
        const details = {
          "A": ["执行效率高", "结果质量优秀", "用户体验良好"],
          "B+": ["执行效率良好", "结果质量较好", "用户体验满意"],
          "B": ["执行效率一般", "结果质量基本合格", "用户体验一般"],
          "C": ["执行效率较低", "结果质量需要改进", "用户体验有待提升"]
        };
        return details[score] || ["待评估"];
      },
      getTaskDetails() {
        return {
          1: {
            id: 1,
            title: "帮助用户制定学习计划",
            description: "根据用户的学习目标和时间安排，制定详细的学习计划，包括每日任务、复习安排等。",
            status: "completed",
            progress: 100,
            createTime: "2024-01-15 09:30",
            completedTime: "2024-01-15 16:45",
            processSteps: [
              {
                title: "分析用户需求",
                description: "了解用户的学习目标、当前水平、可用时间等基本信息",
                completed: true,
                completedTime: "09:35"
              },
              {
                title: "制定学习框架",
                description: "基于用户需求设计整体学习框架和阶段性目标",
                completed: true,
                completedTime: "10:15"
              },
              {
                title: "细化每日任务",
                description: "将学习目标分解为具体的每日学习任务和复习安排",
                completed: true,
                completedTime: "14:20"
              },
              {
                title: "优化学习计划",
                description: "根据用户反馈调整学习计划，确保可行性和有效性",
                completed: true,
                completedTime: "16:45"
              }
            ],
            analysisResult: [
              {
                title: "学习目标分析",
                score: "A+",
                description: "用户目标明确，时间安排合理，学习动机强烈",
                details: [
                  "目标具体可量化",
                  "时间分配科学合理",
                  "学习资源充足"
                ]
              },
              {
                title: "学习计划质量",
                score: "A",
                description: "制定的学习计划结构清晰，循序渐进",
                details: [
                  "计划层次分明",
                  "任务难度适中",
                  "复习安排科学"
                ]
              }
            ],
            suggestions: [
              {
                icon: "📚",
                title: "坚持执行",
                description: "建议严格按照计划执行，定期评估学习效果"
              },
              {
                icon: "📊",
                title: "定期调整",
                description: "根据学习进度和效果，适时调整学习计划"
              },
              {
                icon: "🎯",
                title: "目标导向",
                description: "保持目标导向，及时调整学习策略"
              }
            ]
          },
          2: {
            id: 2,
            title: "分析用户情感状态",
            description: "通过对话分析用户的情绪变化，提供相应的情感支持和建议。",
            status: "active",
            progress: 65,
            createTime: "2024-01-16 14:20",
            processSteps: [
              {
                title: "情感数据收集",
                description: "收集用户对话中的情感表达和情绪指标",
                completed: true,
                completedTime: "14:25"
              },
              {
                title: "情绪模式分析",
                description: "分析用户的情感变化模式和触发因素",
                completed: true,
                completedTime: "15:10"
              },
              {
                title: "情感支持策略",
                description: "制定个性化的情感支持和干预策略",
                completed: false,
                active: true
              },
              {
                title: "效果评估",
                description: "评估情感支持的效果并持续优化",
                completed: false
              }
            ],
            analysisResult: [
              {
                title: "情绪稳定性",
                score: "B+",
                description: "用户情绪波动较大，需要重点关注",
                details: [
                  "情绪变化频率较高",
                  "压力反应明显",
                  "需要情感支持"
                ]
              }
            ],
            suggestions: [
              {
                icon: "💝",
                title: "情感关怀",
                description: "提供更多情感支持和关怀，帮助稳定情绪"
              },
              {
                icon: "🧘",
                title: "放松技巧",
                description: "学习一些放松和情绪调节技巧"
              }
            ]
          },
          3: {
            id: 3,
            title: "推荐适合的社交活动",
            description: "基于用户的兴趣爱好和社交偏好，推荐合适的社交活动和交友建议。",
            status: "active",
            progress: 30,
            createTime: "2024-01-17 10:15",
            processSteps: [
              {
                title: "兴趣分析",
                description: "分析用户的兴趣爱好和社交偏好",
                completed: true,
                completedTime: "10:20"
              },
              {
                title: "活动匹配",
                description: "根据用户兴趣匹配合适的社交活动",
                completed: false,
                active: true
              },
              {
                title: "推荐优化",
                description: "优化推荐算法，提高推荐准确性",
                completed: false
              },
              {
                title: "效果跟踪",
                description: "跟踪推荐效果，持续改进",
                completed: false
              }
            ],
            analysisResult: [
              {
                title: "兴趣匹配度",
                score: "A-",
                description: "用户兴趣明确，匹配度较高",
                details: [
                  "兴趣爱好多样化",
                  "社交需求明确",
                  "参与意愿强烈"
                ]
              }
            ],
            suggestions: [
              {
                icon: "🎉",
                title: "积极参与",
                description: "建议积极参与推荐的社交活动"
              },
              {
                icon: "👥",
                title: "扩大社交圈",
                description: "通过活动认识更多志同道合的朋友"
              }
            ]
          },
          4: {
            id: 4,
            title: "协助用户解决问题",
            description: "帮助用户分析当前遇到的问题，提供解决方案和行动建议。",
            status: "completed",
            progress: 100,
            createTime: "2024-01-14 16:00",
            completedTime: "2024-01-15 11:30",
            processSteps: [
              {
                title: "问题识别",
                description: "准确识别用户遇到的核心问题",
                completed: true,
                completedTime: "16:05"
              },
              {
                title: "原因分析",
                description: "深入分析问题的根本原因",
                completed: true,
                completedTime: "16:30"
              },
              {
                title: "方案制定",
                description: "制定多种解决方案供用户选择",
                completed: true,
                completedTime: "09:15"
              },
              {
                title: "实施指导",
                description: "提供详细的实施指导和后续支持",
                completed: true,
                completedTime: "11:30"
              }
            ],
            analysisResult: [
              {
                title: "问题解决能力",
                score: "A+",
                description: "问题分析透彻，解决方案有效",
                details: [
                  "问题识别准确",
                  "分析深入全面",
                  "方案切实可行"
                ]
              }
            ],
            suggestions: [
              {
                icon: "✅",
                title: "执行方案",
                description: "按照制定的方案逐步执行"
              },
              {
                icon: "📞",
                title: "寻求支持",
                description: "如遇困难及时寻求帮助和支持"
              }
            ]
          },
          5: {
            id: 5,
            title: "制定健身计划",
            description: "根据用户的身体状况和健身目标，制定个性化的健身计划和饮食建议。",
            status: "pending",
            progress: 0,
            createTime: "2024-01-18 08:45",
            processSteps: [
              {
                title: "身体状况评估",
                description: "评估用户当前的身体状况和健康水平",
                completed: false
              },
              {
                title: "目标设定",
                description: "与用户一起设定合理的健身目标",
                completed: false
              },
              {
                title: "计划制定",
                description: "制定个性化的健身计划和饮食建议",
                completed: false
              },
              {
                title: "跟踪调整",
                description: "跟踪执行情况并适时调整计划",
                completed: false
              }
            ],
            analysisResult: [],
            suggestions: [
              {
                icon: "🏃",
                title: "开始行动",
                description: "建议尽快开始制定和执行健身计划"
              },
              {
                icon: "💪",
                title: "坚持锻炼",
                description: "制定计划后要坚持执行，才能看到效果"
              }
            ]
          }
        };
      },
      getProcessStatusText() {
        switch (this.taskData.status) {
          case "completed":
            return "已完成";
          case "active":
            return "进行中";
          case "pending":
            return "待开始";
          default:
            return "未知状态";
        }
      },
      getScoreClass(score) {
        if (score.includes("A+"))
          return "score-excellent";
        if (score.includes("A"))
          return "score-good";
        if (score.includes("B"))
          return "score-average";
        return "score-poor";
      },
      showRatingModal() {
        this.rating = 0;
        this.comment = "";
        this.showRating = true;
      },
      hideRatingModal() {
        this.showRating = false;
      },
      setRating(score) {
        this.rating = score;
      },
      submitRating() {
        if (this.rating === 0) {
          uni.showToast({
            title: "请选择评分",
            icon: "none"
          });
          return;
        }
        uni.showToast({
          title: "评价提交成功！",
          icon: "success"
        });
        this.hideRatingModal();
      },
      showTerminateModal() {
        this.showTerminate = true;
      },
      hideTerminateModal() {
        this.showTerminate = false;
      },
      confirmTerminate() {
        this.taskData.status = "terminated";
        this.taskData.progress = 0;
        this.hideTerminateModal();
        uni.showToast({
          title: "任务已终止",
          icon: "success"
        });
        const pages = getCurrentPages();
        const prevPage = pages[pages.length - 2];
        if (prevPage && prevPage.updateTaskStatus) {
          prevPage.updateTaskStatus(this.taskId, "terminated");
        }
        setTimeout(() => {
          uni.navigateBack();
        }, 1500);
      },
      // 开始任务
      async startTask() {
        try {
          formatAppLog("log", "at pages/ai/task-detail.vue:849", "开始任务，任务ID:", this.taskId);
          uni.showLoading({
            title: "正在开始任务..."
          });
          const response = await uni.request({
            url: `http://localhost:8888/api/a-entities/ai-task-log/start-task/${this.taskId}`,
            method: "POST",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/ai/task-detail.vue:863", "开始任务响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            this.taskData.status = "active";
            this.taskData.progress = 10;
            this.taskData.processSteps = this.generateProcessSteps(this.taskData.description, "active");
            this.taskData.suggestions = this.generateSuggestions("active", this.taskData.comment);
            uni.hideLoading();
            uni.showToast({
              title: "任务已开始",
              icon: "success"
            });
            const pages = getCurrentPages();
            const prevPage = pages[pages.length - 2];
            if (prevPage && prevPage.updateTaskStatus) {
              prevPage.updateTaskStatus(this.taskId, "active");
            }
          } else {
            uni.hideLoading();
            uni.showToast({
              title: response.data.message || "开始任务失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/ai/task-detail.vue:896", "开始任务异常:", error);
          uni.hideLoading();
          uni.showToast({
            title: "开始任务失败，请重试",
            icon: "error"
          });
        }
      }
    }
  };
  function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "task-detail-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            class: "icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
              fill: "#666666"
            })
          ]))
        ]),
        vue.createElementVNode("view", { class: "header-title" }, [
          vue.createElementVNode("text", { class: "title-text" }, "任务详情")
        ]),
        vue.createElementVNode("view", { class: "placeholder" })
      ]),
      vue.createCommentVNode(" 任务基本信息 "),
      $data.taskData && $data.taskData.title ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "task-info-card"
      }, [
        vue.createElementVNode("view", { class: "task-header" }, [
          vue.createElementVNode("view", { class: "task-title-row" }, [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["task-status", $data.taskData.status])
              },
              [
                $data.taskData.status === "completed" ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "status-icon"
                }, "✓")) : $data.taskData.status === "active" ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "status-icon"
                }, "●")) : (vue.openBlock(), vue.createElementBlock("view", {
                  key: 2,
                  class: "status-icon"
                }, "○"))
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "text",
              { class: "task-title" },
              vue.toDisplayString($data.taskData.title),
              1
              /* TEXT */
            ),
            $data.taskData.status === "completed" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "completed-badge"
            }, "已完成")) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode(
            "text",
            { class: "task-time" },
            vue.toDisplayString($data.taskData.createTime),
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode(
          "text",
          { class: "task-description" },
          vue.toDisplayString($data.taskData.description),
          1
          /* TEXT */
        ),
        $data.taskData.status === "active" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "task-progress"
        }, [
          vue.createElementVNode("view", { class: "progress-info" }, [
            vue.createElementVNode("text", { class: "progress-label" }, "完成进度"),
            vue.createElementVNode(
              "text",
              { class: "progress-text" },
              vue.toDisplayString($data.taskData.progress) + "%",
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "progress-bar" }, [
            vue.createElementVNode(
              "view",
              {
                class: "progress-fill",
                style: vue.normalizeStyle({ width: $data.taskData.progress + "%" })
              },
              null,
              4
              /* STYLE */
            )
          ])
        ])) : vue.createCommentVNode("v-if", true)
      ])) : (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 1 },
        [
          vue.createCommentVNode(" 加载中提示 "),
          vue.createElementVNode("view", { class: "loading-card" }, [
            vue.createElementVNode("text", { class: "loading-text" }, "加载中...")
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )),
      vue.createCommentVNode(" AI执行过程 "),
      $data.taskData && $data.taskData.processSteps ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "execution-process"
      }, [
        vue.createElementVNode("view", { class: "section-header" }, [
          vue.createElementVNode("text", { class: "section-title" }, "AI执行过程"),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["process-status", $data.taskData.status])
            },
            [
              vue.createElementVNode(
                "text",
                null,
                vue.toDisplayString($options.getProcessStatusText()),
                1
                /* TEXT */
              )
            ],
            2
            /* CLASS */
          )
        ]),
        vue.createElementVNode("view", { class: "process-steps" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.taskData.processSteps, (step, index) => {
              return vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  class: vue.normalizeClass(["process-step", { completed: step.completed, active: step.active }]),
                  key: index
                },
                [
                  vue.createElementVNode("view", { class: "step-indicator" }, [
                    step.completed ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "step-icon completed"
                    }, "✓")) : step.active ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 1,
                      class: "step-icon active"
                    }, "●")) : (vue.openBlock(), vue.createElementBlock("view", {
                      key: 2,
                      class: "step-icon"
                    }, "○"))
                  ]),
                  vue.createElementVNode("view", { class: "step-content" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "step-title" },
                      vue.toDisplayString(step.title),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "step-description" },
                      vue.toDisplayString(step.description),
                      1
                      /* TEXT */
                    ),
                    step.completed ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "step-time"
                      },
                      vue.toDisplayString(step.completedTime),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ])
                ],
                2
                /* CLASS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" AI分析结果 "),
      $data.taskData && $data.taskData.analysisResult && $data.taskData.analysisResult.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 3,
        class: "analysis-result"
      }, [
        vue.createElementVNode("view", { class: "section-header" }, [
          vue.createElementVNode("text", { class: "section-title" }, "AI分析结果")
        ]),
        vue.createElementVNode("view", { class: "result-content" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.taskData.analysisResult, (result, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "result-item",
                key: index
              }, [
                vue.createElementVNode("view", { class: "result-header" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "result-title" },
                    vue.toDisplayString(result.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["result-score", $options.getScoreClass(result.score)])
                    },
                    [
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(result.score),
                        1
                        /* TEXT */
                      )
                    ],
                    2
                    /* CLASS */
                  )
                ]),
                vue.createElementVNode(
                  "text",
                  { class: "result-description" },
                  vue.toDisplayString(result.description),
                  1
                  /* TEXT */
                ),
                result.details ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "result-details"
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(result.details, (detail, idx) => {
                      return vue.openBlock(), vue.createElementBlock(
                        "text",
                        {
                          class: "detail-item",
                          key: idx
                        },
                        "• " + vue.toDisplayString(detail),
                        1
                        /* TEXT */
                      );
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ])) : vue.createCommentVNode("v-if", true)
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 建议和下一步 "),
      $data.taskData && $data.taskData.suggestions && $data.taskData.suggestions.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 4,
        class: "suggestions"
      }, [
        vue.createElementVNode("view", { class: "section-header" }, [
          vue.createElementVNode("text", { class: "section-title" }, "建议和下一步")
        ]),
        vue.createElementVNode("view", { class: "suggestion-content" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.taskData.suggestions, (suggestion, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "suggestion-item",
                key: index
              }, [
                vue.createElementVNode(
                  "view",
                  { class: "suggestion-icon" },
                  vue.toDisplayString(suggestion.icon),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "suggestion-text" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "suggestion-title" },
                    vue.toDisplayString(suggestion.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "suggestion-desc" },
                    vue.toDisplayString(suggestion.description),
                    1
                    /* TEXT */
                  )
                ])
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 操作按钮 "),
      $data.taskData && $data.taskData.status ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 5,
        class: "action-buttons"
      }, [
        $data.taskData.status === "pending" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "action-btn start-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.startTask && $options.startTask(...args))
        }, [
          vue.createElementVNode("text", null, "开始任务")
        ])) : $data.taskData.status === "completed" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "action-btn rate-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.showRatingModal && $options.showRatingModal(...args))
        }, [
          vue.createElementVNode("text", null, "评价任务")
        ])) : $data.taskData.status === "active" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "action-btn terminate-btn",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.showTerminateModal && $options.showTerminateModal(...args))
        }, [
          vue.createElementVNode("text", null, "终止任务")
        ])) : vue.createCommentVNode("v-if", true)
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 评分弹窗 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["rating-modal", { active: $data.showRating }]),
          onClick: _cache[9] || (_cache[9] = (...args) => $options.hideRatingModal && $options.hideRatingModal(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "rating-content",
            onClick: _cache[8] || (_cache[8] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "rating-header" }, [
              vue.createElementVNode("text", { class: "rating-title" }, "任务评价"),
              vue.createElementVNode("view", {
                class: "close-btn",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.hideRatingModal && $options.hideRatingModal(...args))
              }, "×")
            ]),
            vue.createElementVNode("view", { class: "rating-section" }, [
              vue.createElementVNode("text", { class: "rating-label" }, "请为AI的表现评分："),
              vue.createElementVNode("view", { class: "star-rating" }, [
                (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(5, (i) => {
                    return vue.createElementVNode("view", {
                      class: vue.normalizeClass(["star", { active: i <= $data.rating }]),
                      key: i,
                      onClick: ($event) => $options.setRating(i)
                    }, [
                      vue.createElementVNode("text", null, "★")
                    ], 10, ["onClick"]);
                  }),
                  64
                  /* STABLE_FRAGMENT */
                ))
              ]),
              vue.createElementVNode(
                "text",
                { class: "rating-text" },
                vue.toDisplayString($options.ratingText),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "comment-section" }, [
              vue.createElementVNode("text", { class: "comment-label" }, "评价内容："),
              vue.withDirectives(vue.createElementVNode(
                "textarea",
                {
                  class: "comment-input",
                  "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.comment = $event),
                  placeholder: "请输入您的评价...",
                  maxlength: "200"
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.comment]
              ]),
              vue.createElementVNode(
                "text",
                { class: "char-count" },
                vue.toDisplayString($data.comment.length) + "/200",
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "rating-actions" }, [
              vue.createElementVNode("view", {
                class: "cancel-btn",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.hideRatingModal && $options.hideRatingModal(...args))
              }, [
                vue.createElementVNode("text", null, "取消")
              ]),
              vue.createElementVNode("view", {
                class: "submit-btn",
                onClick: _cache[7] || (_cache[7] = (...args) => $options.submitRating && $options.submitRating(...args))
              }, [
                vue.createElementVNode("text", null, "提交评价")
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 终止任务确认弹窗 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["terminate-modal", { active: $data.showTerminate }]),
          onClick: _cache[14] || (_cache[14] = (...args) => $options.hideTerminateModal && $options.hideTerminateModal(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "terminate-content",
            onClick: _cache[13] || (_cache[13] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "terminate-header" }, [
              vue.createElementVNode("text", { class: "terminate-title" }, "终止任务确认"),
              vue.createElementVNode("view", {
                class: "close-btn",
                onClick: _cache[10] || (_cache[10] = (...args) => $options.hideTerminateModal && $options.hideTerminateModal(...args))
              }, "×")
            ]),
            vue.createElementVNode("view", { class: "terminate-body" }, [
              vue.createElementVNode("text", { class: "terminate-message" }, "确定要终止当前任务吗？"),
              vue.createElementVNode("text", { class: "terminate-warning" }, "终止后任务将无法恢复，请谨慎操作。")
            ]),
            vue.createElementVNode("view", { class: "terminate-actions" }, [
              vue.createElementVNode("view", {
                class: "cancel-btn",
                onClick: _cache[11] || (_cache[11] = (...args) => $options.hideTerminateModal && $options.hideTerminateModal(...args))
              }, [
                vue.createElementVNode("text", null, "取消")
              ]),
              vue.createElementVNode("view", {
                class: "confirm-btn",
                onClick: _cache[12] || (_cache[12] = (...args) => $options.confirmTerminate && $options.confirmTerminate(...args))
              }, [
                vue.createElementVNode("text", null, "确认终止")
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesAiTaskDetail = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Y], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/ai/task-detail.vue"]]);
  const _sfc_main$Y = {
    name: "ChatPage",
    data() {
      return {
        friendName: "",
        friendId: null,
        sessionId: null,
        userId: null,
        showActionSheet: false,
        scrollTop: 0,
        inputMessage: "",
        inputFocus: false,
        isVoiceMode: false,
        // 语音模式标识
        showEmojiPanel: false,
        // 表情面板显示标识
        showPlusPanel: false,
        // 加号面板显示标识
        messages: [],
        loading: false,
        errorMessage: ""
      };
    },
    onLoad(options) {
      if (options.friendName) {
        this.friendName = decodeURIComponent(options.friendName);
      }
      if (options.friendId) {
        this.friendId = parseInt(options.friendId);
      }
      if (options.sessionId) {
        this.sessionId = parseInt(options.sessionId);
      }
      this.userId = uni.getStorageSync("userId") || 1;
      formatAppLog("log", "at pages/chat/chat.vue:250", "聊天页面参数:", {
        friendName: this.friendName,
        friendId: this.friendId,
        sessionId: this.sessionId,
        userId: this.userId
      });
      this.loadChatMessages();
    },
    methods: {
      // 加载聊天记录
      async loadChatMessages() {
        if (!this.sessionId) {
          this.errorMessage = "会话ID不存在";
          return;
        }
        this.loading = true;
        this.errorMessage = "";
        try {
          formatAppLog("log", "at pages/chat/chat.vue:272", "开始加载聊天记录，sessionId:", this.sessionId);
          const response = await uni.request({
            url: `http://localhost:8888/api/user-chat-detail/session/${this.sessionId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/chat/chat.vue:281", "API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/chat.vue:282", "API响应数据:", response.data);
          if (response.statusCode === 200 && response.data) {
            formatAppLog("log", "at pages/chat/chat.vue:285", "原始聊天记录数据:", response.data);
            this.messages = this.convertChatDataToMessages(response.data);
            formatAppLog("log", "at pages/chat/chat.vue:287", "转换后的聊天记录:", this.messages);
            this.$nextTick(() => {
              this.scrollToBottom();
            });
          } else {
            this.errorMessage = `加载聊天记录失败，状态码: ${response.statusCode}`;
            formatAppLog("error", "at pages/chat/chat.vue:295", "加载聊天记录失败:", response);
          }
        } catch (error) {
          this.errorMessage = "网络错误，请检查连接";
          formatAppLog("error", "at pages/chat/chat.vue:299", "加载聊天记录异常:", error);
        } finally {
          this.loading = false;
        }
      },
      // 转换数据库数据为消息格式
      convertChatDataToMessages(chatData) {
        formatAppLog("log", "at pages/chat/chat.vue:307", "开始转换聊天数据:", chatData);
        formatAppLog("log", "at pages/chat/chat.vue:308", "当前用户ID:", this.userId);
        if (!Array.isArray(chatData)) {
          formatAppLog("log", "at pages/chat/chat.vue:311", "聊天数据不是数组:", chatData);
          return [];
        }
        const sortedData = chatData.sort((a, b) => {
          const timeA = new Date(a.createdAt).getTime();
          const timeB = new Date(b.createdAt).getTime();
          return timeA - timeB;
        });
        const result = sortedData.map((chat, index) => {
          const isUserMessage = chat.demandParty && chat.demandParty.toString() === this.userId.toString();
          formatAppLog("log", "at pages/chat/chat.vue:328", `消息${index}:`, {
            id: chat.id,
            demandParty: chat.demandParty,
            message: chat.message,
            isUserMessage,
            userId: this.userId
          });
          return {
            id: chat.id,
            type: isUserMessage ? "right" : "left",
            text: chat.message || "",
            time: this.formatTime(chat.createdAt),
            demandParty: chat.demandParty,
            createdAt: chat.createdAt
          };
        });
        formatAppLog("log", "at pages/chat/chat.vue:346", "转换结果:", result);
        return result;
      },
      // 格式化时间
      formatTime(timestamp) {
        if (!timestamp)
          return "";
        const date = new Date(timestamp);
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const timeStr = hours < 12 ? "上午" : "下午";
        const displayHours = hours < 12 ? hours : hours - 12;
        return `${timeStr}${displayHours}:${minutes.toString().padStart(2, "0")}`;
      },
      goBack() {
        try {
          uni.navigateBack({
            fail: () => {
              uni.navigateTo({
                url: "/pages/chat/chat-list"
              });
            }
          });
        } catch (error) {
          uni.navigateTo({
            url: "/pages/chat/chat-list"
          });
        }
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      goToAI() {
        uni.navigateTo({
          url: "/pages/ai/ai"
        });
      },
      showMoreOptions() {
        uni.navigateTo({
          url: `/pages/chat/chat-info?friendName=${encodeURIComponent(this.friendName)}`
        });
      },
      hideActionSheet() {
        this.showActionSheet = false;
      },
      clearChat() {
        this.hideActionSheet();
        uni.showModal({
          title: "确认清空",
          content: "确定要清空所有聊天记录吗？",
          success: (res) => {
            if (res.confirm) {
              this.clearAllMessages();
              uni.showToast({
                title: "聊天记录已清空",
                icon: "success"
              });
            }
          }
        });
      },
      reportChat() {
        this.hideActionSheet();
        uni.navigateTo({
          url: "/pages/report/report"
        });
      },
      clearAllMessages() {
        this.messages = [];
        this.scrollTop = 0;
      },
      blockUser() {
        this.hideActionSheet();
        uni.showModal({
          title: "确认拉黑",
          content: `确定要拉黑 ${this.friendName || "该用户"} 吗？`,
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "用户已拉黑",
                icon: "success"
              });
              setTimeout(() => {
                uni.navigateBack();
              }, 1500);
            }
          }
        });
      },
      toggleVoiceInput() {
        this.isVoiceMode = !this.isVoiceMode;
        if (this.isVoiceMode) {
          this.showEmojiPanel = false;
          this.showPlusPanel = false;
        }
      },
      toggleEmoji() {
        this.showEmojiPanel = !this.showEmojiPanel;
        this.showPlusPanel = false;
      },
      togglePlusMenu() {
        this.showPlusPanel = !this.showPlusPanel;
        this.showEmojiPanel = false;
      },
      hideEmojiPanel() {
        this.showEmojiPanel = false;
      },
      hidePlusPanel() {
        this.showPlusPanel = false;
      },
      startVoiceRecord() {
        uni.showToast({
          title: "开始录音",
          icon: "none"
        });
      },
      endVoiceRecord() {
        uni.showToast({
          title: "录音完成",
          icon: "none"
        });
      },
      selectImage() {
        this.hidePlusPanel();
        uni.showToast({
          title: "图片选择功能开发中",
          icon: "none"
        });
      },
      openCamera() {
        this.hidePlusPanel();
        uni.showToast({
          title: "相机功能开发中",
          icon: "none"
        });
      },
      makeCall() {
        this.hidePlusPanel();
        uni.showToast({
          title: "通话功能开发中",
          icon: "none"
        });
      },
      shareLocation() {
        this.hidePlusPanel();
        uni.showToast({
          title: "位置分享功能开发中",
          icon: "none"
        });
      },
      onInputFocus() {
        this.inputFocus = true;
      },
      onInputBlur() {
        this.inputFocus = false;
      },
      async sendMessage() {
        if (this.inputMessage.trim()) {
          const messageText = this.inputMessage.trim();
          const newMessage = {
            id: Date.now(),
            // 临时ID
            type: "right",
            text: messageText,
            time: this.getCurrentTime(),
            demandParty: this.userId,
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          };
          this.messages.push(newMessage);
          this.inputMessage = "";
          this.$nextTick(() => {
            this.scrollToBottom();
          });
          await this.saveMessageToDatabase(messageText);
        }
      },
      // 保存消息到数据库
      async saveMessageToDatabase(messageText) {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/user-chat-detail/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              sessionId: this.sessionId,
              demandParty: this.userId.toString(),
              message: messageText,
              responseParty: this.friendId ? this.friendId.toString() : null,
              senderType: "user"
            }
          });
          if (response.statusCode === 200) {
            formatAppLog("log", "at pages/chat/chat.vue:594", "消息保存成功:", response.data);
          } else {
            formatAppLog("error", "at pages/chat/chat.vue:596", "消息保存失败:", response);
            uni.showToast({
              title: "消息发送失败",
              icon: "none"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/chat.vue:603", "保存消息异常:", error);
          uni.showToast({
            title: "消息发送失败",
            icon: "none"
          });
        }
      },
      getCurrentTime() {
        const now = /* @__PURE__ */ new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes();
        const timeStr = hours < 12 ? "上午" : "下午";
        const displayHours = hours < 12 ? hours : hours - 12;
        return `${timeStr}${displayHours}:${minutes.toString().padStart(2, "0")}`;
      },
      scrollToBottom() {
        this.scrollTop = 999999;
      },
      goToFriendCard() {
        formatAppLog("log", "at pages/chat/chat.vue:624", "goToFriendCard 被调用，当前 friendId:", this.friendId);
        formatAppLog("log", "at pages/chat/chat.vue:625", "当前 friendName:", this.friendName);
        if (!this.friendId) {
          uni.showToast({
            title: "好友信息不完整",
            icon: "error"
          });
          return;
        }
        uni.navigateTo({
          url: `/pages/chat/friend-card?friendName=${encodeURIComponent(this.friendName)}&friendId=${this.friendId}`
        });
      }
    }
  };
  function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "chat-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部栏 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-btn",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            class: "back-icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
              fill: "#666666",
              "p-id": "727"
            })
          ]))
        ]),
        vue.createElementVNode(
          "text",
          { class: "title" },
          vue.toDisplayString($data.friendName),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", {
          class: "more-btn",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.showMoreOptions && $options.showMoreOptions(...args))
        }, [
          vue.createElementVNode("view", { class: "dot" }),
          vue.createElementVNode("view", { class: "dot" }),
          vue.createElementVNode("view", { class: "dot" })
        ])
      ]),
      vue.createCommentVNode(" 聊天对话区域 "),
      vue.createElementVNode("scroll-view", {
        class: "chat-area",
        "scroll-y": "true",
        "scroll-top": $data.scrollTop
      }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.loadChatMessages && $options.loadChatMessages(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : $data.messages.length > 0 ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 聊天消息 "),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.messages, (message) => {
                return vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: message.id,
                    class: vue.normalizeClass(["message", message.type])
                  },
                  [
                    message.type === "left" ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 0,
                      class: "avatar",
                      src: "",
                      mode: "aspectFill",
                      onClick: _cache[3] || (_cache[3] = (...args) => $options.goToFriendCard && $options.goToFriendCard(...args))
                    })) : vue.createCommentVNode("v-if", true),
                    vue.createElementVNode("view", { class: "message-bubble" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "message-text" },
                        vue.toDisplayString(message.text),
                        1
                        /* TEXT */
                      )
                    ]),
                    message.type === "right" ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 1,
                      class: "avatar",
                      src: "",
                      mode: "aspectFill"
                    })) : vue.createCommentVNode("v-if", true)
                  ],
                  2
                  /* CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ],
          64
          /* STABLE_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 3 },
          [
            vue.createCommentVNode(" 无消息时显示提示 "),
            vue.createElementVNode("view", { class: "no-messages" }, [
              vue.createElementVNode("view", { class: "empty-icon" }, "💬"),
              vue.createElementVNode("text", { class: "no-messages-text" }, "暂无聊天记录"),
              vue.createElementVNode("text", { class: "no-messages-desc" }, "开始与好友聊天吧")
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ], 8, ["scroll-top"]),
      vue.createCommentVNode(" 消息输入栏 "),
      vue.createElementVNode("view", { class: "input-bar" }, [
        vue.createElementVNode("view", {
          class: "mic-btn",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleVoiceInput && $options.toggleVoiceInput(...args))
        }, [
          vue.createCommentVNode(" 语音按钮 "),
          !$data.isVoiceMode ? (vue.openBlock(), vue.createElementBlock("svg", {
            key: 0,
            class: "mic-icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M593.024 234.496l-46.165333 46.229333c0.106667 0.085333 0.149333 0.149333 0.277333 0.234667 127.552 127.658667 127.552 334.677333 0 462.336l46.122667 46.250667c153.045333-153.194667 153.045333-401.621333 0-554.816C593.173333 234.666667 593.130667 234.56 593.024 234.496z",
              "p-id": "3544"
            }),
            vue.createElementVNode("path", {
              d: "M500.885333 327.189333c-0.042667-0.085333-0.128-0.149333-0.234667-0.213333l-46.165333 46.229333c0.042667 0.085333 0.128 0.149333 0.234667 0.256 76.48 76.565333 76.48 200.789333 0 277.397333l46.144 46.229333C603.008 595.008 603.008 429.333333 500.885333 327.189333z",
              "p-id": "3545"
            }),
            vue.createElementVNode("path", {
              d: "M408.32 419.434667l-92.394667 92.458667 92.629333 92.714667c51.008-51.114667 51.008-133.888 0-184.938667C408.469333 419.584 408.362667 419.52 408.32 419.434667z",
              "p-id": "3546"
            }),
            vue.createElementVNode("path", {
              d: "M512 0C229.696 0 0 229.696 0 512c0 282.282667 229.696 512 512 512 282.282667 0 512-229.717333 512-512C1024 229.696 794.282667 0 512 0zM512 981.290667C253.226667 981.290667 42.688 770.773333 42.688 512S253.226667 42.688 512 42.688 981.290667 253.226667 981.290667 512 770.773333 981.290667 512 981.290667z",
              "p-id": "3547"
            })
          ])) : (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 1 },
            [
              vue.createCommentVNode(" 键盘按钮 "),
              (vue.openBlock(), vue.createElementBlock("svg", {
                class: "keyboard-icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                width: "32",
                height: "32"
              }, [
                vue.createElementVNode("path", {
                  d: "M512 64A448 448 0 1 0 960 512 448.5 448.5 0 0 0 512 64z m0 832a384 384 0 1 1 384-384 384.5 384.5 0 0 1-384 384z",
                  fill: "#333333",
                  "p-id": "2120"
                }),
                vue.createElementVNode("path", {
                  d: "M320 400m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z",
                  fill: "#333333",
                  "p-id": "2121"
                }),
                vue.createElementVNode("path", {
                  d: "M448 448A48 48 0 1 0 400 400a48 48 0 0 0 48 48zM576 352a48 48 0 1 0 48 48 48 48 0 0 0-48-48zM704 352a48 48 0 1 0 48 48 48 48 0 0 0-48-48z",
                  fill: "#333333",
                  "p-id": "2122"
                }),
                vue.createElementVNode("path", {
                  d: "M320 528m-48 0a48 48 0 1 0 96 0 48 48 0 1 0-96 0Z",
                  fill: "#333333",
                  "p-id": "2123"
                }),
                vue.createElementVNode("path", {
                  d: "M448 576a48 48 0 1 0-48-48 48 48 0 0 0 48 48zM576 640H448a48 48 0 0 0 0 96h128a48 48 0 1 0 0-96zM576 480a48 48 0 1 0 48 48 48 48 0 0 0-48-48zM704 480a48 48 0 1 0 48 48 48 48 0 0 0-48-48z",
                  fill: "#333333",
                  "p-id": "2124"
                })
              ]))
            ],
            2112
            /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 输入框区域 "),
        !$data.isVoiceMode ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "input-field"
        }, [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "message-input",
            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.inputMessage = $event),
            placeholder: "输入消息...",
            focus: $data.inputFocus,
            onFocus: _cache[6] || (_cache[6] = (...args) => $options.onInputFocus && $options.onInputFocus(...args)),
            onBlur: _cache[7] || (_cache[7] = (...args) => $options.onInputBlur && $options.onInputBlur(...args)),
            onConfirm: _cache[8] || (_cache[8] = (...args) => $options.sendMessage && $options.sendMessage(...args))
          }, null, 40, ["focus"]), [
            [vue.vModelText, $data.inputMessage]
          ])
        ])) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 语音按钮区域 "),
            vue.createElementVNode(
              "view",
              {
                class: "voice-field",
                onTouchstart: _cache[9] || (_cache[9] = (...args) => $options.startVoiceRecord && $options.startVoiceRecord(...args)),
                onTouchend: _cache[10] || (_cache[10] = (...args) => $options.endVoiceRecord && $options.endVoiceRecord(...args))
              },
              [
                vue.createElementVNode("text", { class: "voice-text" }, "按住说话")
              ],
              32
              /* NEED_HYDRATION */
            )
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )),
        vue.createElementVNode("view", { class: "action-btns" }, [
          vue.createElementVNode("view", {
            class: "emoji-btn",
            onClick: _cache[11] || (_cache[11] = (...args) => $options.toggleEmoji && $options.toggleEmoji(...args))
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              class: "emoji-icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M512 160C317.5936 160 160 317.5936 160 512S317.5936 864 512 864 864 706.4064 864 512 706.4064 160 512 160z m0 64c159.0528 0 288 128.9472 288 288S671.0528 800 512 800 224 671.0528 224 512 352.9472 224 512 224z",
                fill: "#2c2c2c",
                "p-id": "4603"
              }),
              vue.createElementVNode("path", {
                d: "M683.3408 501.248H340.6592a25.6 25.6 0 0 0-25.6 26.112l0.1536 6.912a196.9408 196.9408 0 0 0 393.728-7.3984 25.6 25.6 0 0 0-25.6-25.6z m-27.8784 51.2l-0.3072 1.792A145.7664 145.7664 0 0 1 512 672.5888l-5.7088-0.1024a145.8176 145.8176 0 0 1-137.2928-117.4272l-0.4864-2.6112h286.9504z",
                fill: "#2c2c2c",
                "p-id": "4604"
              }),
              vue.createElementVNode("path", {
                d: "M411.1104 411.4432m-38.7584 0a38.7584 38.7584 0 1 0 77.5168 0 38.7584 38.7584 0 1 0-77.5168 0Z",
                fill: "#2c2c2c",
                "p-id": "4605"
              }),
              vue.createElementVNode("path", {
                d: "M612.8896 411.4432m-38.7584 0a38.7584 38.7584 0 1 0 77.5168 0 38.7584 38.7584 0 1 0-77.5168 0Z",
                fill: "#2c2c2c",
                "p-id": "4606"
              })
            ]))
          ]),
          vue.createElementVNode("view", {
            class: "plus-btn",
            onClick: _cache[12] || (_cache[12] = (...args) => $options.togglePlusMenu && $options.togglePlusMenu(...args))
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              class: "plus-icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M511.5 957.9C264.9 957.9 65 758.2 65 511.9s199.9-446 446.5-446S958 265.6 958 511.9c0.1 246.3-199.8 446-446.5 446zM509 149.1c-200.4 0-355.8 162.2-355.8 362.3 0 200.1 155.4 356.8 355.8 356.8s362.9-156.7 362.9-356.8c0-200.1-162.5-362.3-362.9-362.3zM690.5 556h-134v133.8c0 24.6-20 44.6-44.6 44.6h-0.1c-24.6 0-44.6-19.9-44.6-44.6V556h-134c-24.7 0-44.6-19.9-44.6-44.5v-0.1c0-24.6 20-44.6 44.6-44.6h134V333c0-24.6 20-44.6 44.6-44.6h0.1c24.7 0 44.6 19.9 44.6 44.6v133.8h134c24.7 0 44.6 19.9 44.6 44.6v0.1c0 24.6-19.9 44.5-44.6 44.5z m0 0",
                "p-id": "1640"
              })
            ]))
          ])
        ])
      ]),
      vue.createCommentVNode(" 表情面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["emoji-panel", { "active": $data.showEmojiPanel }]),
          onClick: _cache[14] || (_cache[14] = (...args) => $options.hideEmojiPanel && $options.hideEmojiPanel(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "emoji-content",
            onClick: _cache[13] || (_cache[13] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "emoji-grid" }, [
              vue.createCommentVNode(" 第一行 "),
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(4, (i) => {
                  return vue.createElementVNode("view", {
                    class: "emoji-item",
                    key: `row1-${i}`
                  }, [
                    vue.createElementVNode("image", {
                      class: "emoji-image",
                      src: "",
                      mode: "aspectFill"
                    })
                  ]);
                }),
                64
                /* STABLE_FRAGMENT */
              )),
              vue.createCommentVNode(" 第二行 "),
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(4, (i) => {
                  return vue.createElementVNode("view", {
                    class: "emoji-item",
                    key: `row2-${i}`
                  }, [
                    vue.createElementVNode("image", {
                      class: "emoji-image",
                      src: "",
                      mode: "aspectFill"
                    })
                  ]);
                }),
                64
                /* STABLE_FRAGMENT */
              )),
              vue.createCommentVNode(" 第三行 "),
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(4, (i) => {
                  return vue.createElementVNode("view", {
                    class: "emoji-item",
                    key: `row3-${i}`
                  }, [
                    vue.createElementVNode("image", {
                      class: "emoji-image",
                      src: "",
                      mode: "aspectFill"
                    })
                  ]);
                }),
                64
                /* STABLE_FRAGMENT */
              ))
            ]),
            vue.createCommentVNode(" 翻页指示器 "),
            vue.createElementVNode("view", { class: "emoji-pagination" }, [
              vue.createElementVNode("view", { class: "page-dot active" }),
              vue.createElementVNode("view", { class: "page-dot" }),
              vue.createElementVNode("view", { class: "page-dot" })
            ])
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 加号功能面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["plus-panel", { "active": $data.showPlusPanel }]),
          onClick: _cache[20] || (_cache[20] = (...args) => $options.hidePlusPanel && $options.hidePlusPanel(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "plus-content",
            onClick: _cache[19] || (_cache[19] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", { class: "plus-grid" }, [
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[15] || (_cache[15] = (...args) => $options.selectImage && $options.selectImage(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zM338 304c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zm513.9 436.1H172.1c-12.9 0-24.8-5.9-32.7-16.1L73.4 659.8c-7.9-10.2-7.9-23.4 0-33.6l66-84.2c7.9-10.2 19.8-16.1 32.7-16.1h679.8c12.9 0 24.8 5.9 32.7 16.1l66 84.2c7.9 10.2 7.9 23.4 0 33.6l-66 84.2c-7.9 10.2-19.8 16.1-32.7 16.1z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "图片与视频")
              ]),
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[16] || (_cache[16] = (...args) => $options.openCamera && $options.openCamera(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                      fill: "#333333"
                    }),
                    vue.createElementVNode("path", {
                      d: "M464 336a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "相机")
              ]),
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[17] || (_cache[17] = (...args) => $options.makeCall && $options.makeCall(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                      fill: "#333333"
                    }),
                    vue.createElementVNode("path", {
                      d: "M512 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "语音/视频通话")
              ]),
              vue.createElementVNode("view", {
                class: "plus-item",
                onClick: _cache[18] || (_cache[18] = (...args) => $options.shareLocation && $options.shareLocation(...args))
              }, [
                vue.createElementVNode("view", { class: "plus-icon-wrapper" }, [
                  (vue.openBlock(), vue.createElementBlock("svg", {
                    class: "plus-feature-icon",
                    viewBox: "0 0 1024 1024",
                    version: "1.1",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "48",
                    height: "48"
                  }, [
                    vue.createElementVNode("path", {
                      d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                      fill: "#333333"
                    }),
                    vue.createElementVNode("path", {
                      d: "M512 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z",
                      fill: "#333333"
                    })
                  ]))
                ]),
                vue.createElementVNode("text", { class: "plus-text" }, "定位")
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 底部操作菜单 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["action-sheet", { "active": $data.showActionSheet }]),
          onClick: _cache[26] || (_cache[26] = (...args) => $options.hideActionSheet && $options.hideActionSheet(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "action-content",
            onClick: _cache[25] || (_cache[25] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createElementVNode("view", {
              class: "action-item",
              onClick: _cache[21] || (_cache[21] = (...args) => $options.clearChat && $options.clearChat(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "清空聊天记录")
            ]),
            vue.createElementVNode("view", {
              class: "action-item",
              onClick: _cache[22] || (_cache[22] = (...args) => $options.reportChat && $options.reportChat(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "举报")
            ]),
            vue.createElementVNode("view", {
              class: "action-item",
              onClick: _cache[23] || (_cache[23] = (...args) => $options.blockUser && $options.blockUser(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "拉黑")
            ]),
            vue.createElementVNode("view", {
              class: "action-cancel",
              onClick: _cache[24] || (_cache[24] = (...args) => $options.hideActionSheet && $options.hideActionSheet(...args))
            }, [
              vue.createElementVNode("text", { class: "cancel-text" }, "取消")
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesChatChat = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$X], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/chat.vue"]]);
  const _sfc_main$X = {
    name: "SearchPage",
    data() {
      return {
        searchKeyword: "",
        searchResults: [],
        allChatRecords: [],
        loading: false,
        // 日期搜索相关
        showDateSearchPanel: false,
        startDate: "",
        endDate: "",
        // 媒体搜索相关
        showMediaSearchPanel: false,
        currentMediaType: "all"
      };
    },
    onLoad() {
      this.loadChatRecords();
      this.initDateRange();
    },
    methods: {
      // 搜索输入处理
      onSearchInput() {
        formatAppLog("log", "at pages/chat/search.vue:98", "搜索关键词:", this.searchKeyword);
        this.performSearch();
      },
      onSearchFocus() {
        formatAppLog("log", "at pages/chat/search.vue:103", "搜索框获得焦点");
      },
      // 返回上一页
      goBack() {
        uni.navigateBack();
      },
      // 显示日期搜索面板
      showDateSearch() {
        this.showDateSearchPanel = true;
        this.showMediaSearchPanel = false;
        this.searchKeyword = "";
        this.searchResults = [];
      },
      // 隐藏日期搜索面板
      hideDateSearch() {
        this.showDateSearchPanel = false;
      },
      // 显示媒体搜索面板
      showMediaSearch() {
        this.showMediaSearchPanel = true;
        this.showDateSearchPanel = false;
        this.searchKeyword = "";
        this.searchResults = [];
      },
      // 隐藏媒体搜索面板
      hideMediaSearch() {
        this.showMediaSearchPanel = false;
      },
      // 初始化日期范围（默认为今天）
      initDateRange() {
        const today = /* @__PURE__ */ new Date();
        const todayStr = this.formatDateForPicker(today);
        this.startDate = todayStr;
        this.endDate = todayStr;
      },
      // 格式化日期为picker需要的格式
      formatDateForPicker(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
      },
      // 开始日期变化
      onStartDateChange(e) {
        this.startDate = e.detail.value;
        formatAppLog("log", "at pages/chat/search.vue:156", "开始日期:", this.startDate);
      },
      // 结束日期变化
      onEndDateChange(e) {
        this.endDate = e.detail.value;
        formatAppLog("log", "at pages/chat/search.vue:162", "结束日期:", this.endDate);
      },
      // 按日期搜索
      searchByDate() {
        formatAppLog("log", "at pages/chat/search.vue:167", "按日期搜索:", this.startDate, "到", this.endDate);
        if (!this.startDate || !this.endDate) {
          uni.showToast({
            title: "请选择日期范围",
            icon: "none"
          });
          return;
        }
        const startTime = new Date(this.startDate).getTime();
        const endTime = (/* @__PURE__ */ new Date(this.endDate + " 23:59:59")).getTime();
        const filteredResults = this.allChatRecords.filter((chat) => {
          const messageTime = new Date(chat.lastMessageTime || chat.createdAt || 0).getTime();
          return messageTime >= startTime && messageTime <= endTime;
        });
        this.searchResults = filteredResults.sort((a, b) => {
          const timeA = new Date(a.lastMessageTime || a.createdAt || 0).getTime();
          const timeB = new Date(b.lastMessageTime || b.createdAt || 0).getTime();
          return timeB - timeA;
        });
        formatAppLog("log", "at pages/chat/search.vue:192", "日期搜索结果:", this.searchResults);
        this.hideDateSearch();
      },
      // 按媒体类型搜索
      searchByMediaType(type) {
        formatAppLog("log", "at pages/chat/search.vue:198", "按媒体类型搜索:", type);
        this.currentMediaType = type;
        let keywords = [];
        if (type === "image") {
          keywords = ["图片", "照片", "image", "photo", "jpg", "png", "gif", "🖼️", "📷"];
        } else if (type === "video") {
          keywords = ["视频", "video", "mp4", "avi", "mov", "🎥", "📹"];
        } else {
          keywords = ["图片", "照片", "视频", "image", "photo", "video", "jpg", "png", "gif", "mp4", "avi", "mov", "🖼️", "📷", "🎥", "📹"];
        }
        const filteredResults = this.allChatRecords.filter((chat) => {
          const message = (chat.lastMessage || "").toLowerCase();
          return keywords.some((keyword) => message.includes(keyword.toLowerCase()));
        });
        this.searchResults = filteredResults.sort((a, b) => {
          const timeA = new Date(a.lastMessageTime || a.createdAt || 0).getTime();
          const timeB = new Date(b.lastMessageTime || b.createdAt || 0).getTime();
          return timeB - timeA;
        });
        formatAppLog("log", "at pages/chat/search.vue:224", "媒体搜索结果:", this.searchResults);
        this.hideMediaSearch();
      },
      // 加载聊天记录
      async loadChatRecords() {
        try {
          this.loading = true;
          const userId = uni.getStorageSync("userId") || 1000001;
          formatAppLog("log", "at pages/chat/search.vue:234", "开始加载聊天记录，userId:", userId);
          const [chatListResponse, chatDetailResponse] = await Promise.all([
            uni.request({
              url: `http://localhost:8888/api/u-entities/user-chat-list/user/${userId}`,
              method: "GET",
              header: {
                "Content-Type": "application/json"
              }
            }),
            uni.request({
              url: `http://localhost:8888/api/u-entities/user-chat-detail/all`,
              method: "GET",
              header: {
                "Content-Type": "application/json"
              }
            })
          ]);
          formatAppLog("log", "at pages/chat/search.vue:254", "聊天列表API响应状态码:", chatListResponse.statusCode);
          formatAppLog("log", "at pages/chat/search.vue:255", "聊天详情API响应状态码:", chatDetailResponse.statusCode);
          if (chatListResponse.statusCode === 200 && chatListResponse.data && chatDetailResponse.statusCode === 200 && chatDetailResponse.data) {
            formatAppLog("log", "at pages/chat/search.vue:260", "原始聊天列表数据:", chatListResponse.data);
            formatAppLog("log", "at pages/chat/search.vue:261", "原始聊天详情数据:", chatDetailResponse.data);
            this.allChatRecords = this.convertChatDataToSearchFormat(
              chatListResponse.data,
              chatDetailResponse.data
            );
            formatAppLog("log", "at pages/chat/search.vue:268", "聊天记录加载成功:", this.allChatRecords);
            formatAppLog("log", "at pages/chat/search.vue:269", "转换后的聊天记录数量:", this.allChatRecords.length);
            this.allChatRecords.forEach((chat, index) => {
              formatAppLog("log", "at pages/chat/search.vue:273", `聊天记录 ${index + 1}:`, {
                friendName: chat.friendName,
                lastMessage: chat.lastMessage,
                lastMessageTime: chat.lastMessageTime,
                friendId: chat.friendId
              });
            });
          } else {
            formatAppLog("error", "at pages/chat/search.vue:281", "加载聊天记录失败:", chatListResponse, chatDetailResponse);
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/search.vue:284", "加载聊天记录异常:", error);
        } finally {
          this.loading = false;
        }
      },
      // 转换聊天数据为搜索格式
      convertChatDataToSearchFormat(chatListData, chatDetailData) {
        if (!Array.isArray(chatListData) || !Array.isArray(chatDetailData)) {
          return [];
        }
        const chatDetailMap = /* @__PURE__ */ new Map();
        chatDetailData.forEach((detail) => {
          if (detail.sessionId) {
            if (!chatDetailMap.has(detail.sessionId)) {
              chatDetailMap.set(detail.sessionId, []);
            }
            chatDetailMap.get(detail.sessionId).push(detail);
          }
        });
        chatDetailMap.forEach((details, sessionId) => {
          details.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
        });
        return chatListData.map((chat) => {
          let avatarUrl = chat.avatarUrl;
          if (!avatarUrl || avatarUrl.trim() === "" || avatarUrl === "null") {
            avatarUrl = "/static/default-avatar.png";
          }
          let friendName = chat.friendName;
          if (!friendName || friendName.trim() === "" || friendName === "null") {
            friendName = "未知用户";
          }
          let lastMessage = chat.lastMessage || "暂无消息";
          let lastMessageTime = chat.lastMessageTime;
          if (chat.sessionId && chatDetailMap.has(chat.sessionId)) {
            const sessionDetails = chatDetailMap.get(chat.sessionId);
            if (sessionDetails.length > 0) {
              const latestDetail = sessionDetails[0];
              lastMessage = latestDetail.message || "暂无消息";
              lastMessageTime = latestDetail.createdAt;
            }
          }
          return {
            friendId: chat.friendId,
            friendName,
            avatarUrl,
            lastMessage,
            lastMessageTime,
            createdAt: chat.createdAt,
            sessionId: chat.sessionId,
            status: chat.status
          };
        });
      },
      // 执行搜索
      performSearch() {
        if (!this.searchKeyword || this.searchKeyword.trim() === "") {
          this.searchResults = [];
          return;
        }
        const keyword = this.searchKeyword.toLowerCase().trim();
        formatAppLog("log", "at pages/chat/search.vue:360", "执行搜索，关键词:", keyword);
        formatAppLog("log", "at pages/chat/search.vue:361", "所有聊天记录:", this.allChatRecords);
        formatAppLog("log", "at pages/chat/search.vue:362", "聊天记录数量:", this.allChatRecords.length);
        const filteredResults = this.allChatRecords.filter((chat) => {
          const friendName = (chat.friendName || "").toLowerCase();
          const lastMessage = (chat.lastMessage || "").toLowerCase();
          formatAppLog("log", "at pages/chat/search.vue:369", "检查聊天记录:", {
            friendName,
            lastMessage,
            keyword,
            friendNameMatch: friendName.includes(keyword),
            lastMessageMatch: lastMessage.includes(keyword)
          });
          return friendName.includes(keyword) || lastMessage.includes(keyword);
        });
        this.searchResults = filteredResults.sort((a, b) => {
          const timeA = new Date(a.lastMessageTime || a.createdAt || 0).getTime();
          const timeB = new Date(b.lastMessageTime || b.createdAt || 0).getTime();
          return timeB - timeA;
        });
        formatAppLog("log", "at pages/chat/search.vue:387", "搜索结果:", this.searchResults);
        formatAppLog("log", "at pages/chat/search.vue:388", "搜索结果数量:", this.searchResults.length);
      },
      // 格式化时间
      formatTime(timestamp) {
        if (!timestamp)
          return "";
        const date = new Date(timestamp);
        const now = /* @__PURE__ */ new Date();
        const diff = now - date;
        if (diff < 24 * 60 * 60 * 1e3 && date.getDate() === now.getDate()) {
          return date.toLocaleTimeString("zh-CN", {
            hour: "2-digit",
            minute: "2-digit"
          });
        }
        const yesterday = new Date(now);
        yesterday.setDate(yesterday.getDate() - 1);
        if (date.getDate() === yesterday.getDate() && date.getMonth() === yesterday.getMonth() && date.getFullYear() === yesterday.getFullYear()) {
          return "昨天";
        }
        return date.toLocaleDateString("zh-CN", {
          month: "2-digit",
          day: "2-digit"
        });
      },
      // 打开聊天
      openChat(chat) {
        formatAppLog("log", "at pages/chat/search.vue:425", "打开聊天:", chat);
        uni.navigateTo({
          url: `/pages/chat/chat?friendName=${encodeURIComponent(chat.friendName)}&friendId=${chat.friendId}&sessionId=${chat.sessionId}`
        });
      }
    }
  };
  function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "search-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 搜索栏区域 "),
      vue.createElementVNode("view", { class: "search-bar-area" }, [
        vue.createElementVNode("view", { class: "search-input-field" }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              class: "search-input",
              type: "text",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchKeyword = $event),
              placeholder: "搜索",
              onInput: _cache[1] || (_cache[1] = (...args) => $options.onSearchInput && $options.onSearchInput(...args)),
              onFocus: _cache[2] || (_cache[2] = (...args) => $options.onSearchFocus && $options.onSearchFocus(...args))
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.searchKeyword]
          ])
        ]),
        vue.createElementVNode("view", {
          class: "cancel-btn",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("text", { class: "cancel-text" }, "取消")
        ])
      ]),
      vue.createCommentVNode(" 搜索结果区域 "),
      $data.searchKeyword && $data.searchResults.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "search-results-area"
      }, [
        vue.createElementVNode("view", { class: "results-header" }, [
          vue.createElementVNode(
            "text",
            { class: "results-count" },
            "找到 " + vue.toDisplayString($data.searchResults.length) + " 条相关记录",
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("scroll-view", {
          class: "results-list",
          "scroll-y": ""
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.searchResults, (result, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "result-item",
                key: index,
                onClick: ($event) => $options.openChat(result)
              }, [
                vue.createElementVNode("view", { class: "result-avatar" }, [
                  vue.createElementVNode("image", {
                    class: "avatar-image",
                    src: result.avatarUrl,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ]),
                vue.createElementVNode("view", { class: "result-content" }, [
                  vue.createElementVNode("view", { class: "result-header" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "result-name" },
                      vue.toDisplayString(result.friendName),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "result-time" },
                      vue.toDisplayString($options.formatTime(result.lastMessageTime)),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "result-message" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "message-text" },
                      vue.toDisplayString(result.lastMessage),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])) : !$data.searchKeyword ? (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 1 },
        [
          vue.createCommentVNode(" 内容过滤建议区域 "),
          vue.createElementVNode("view", { class: "content-filter-area" }, [
            vue.createElementVNode("text", { class: "filter-prompt" }),
            vue.createElementVNode("view", { class: "category-labels" }, [
              vue.createCommentVNode(" 日期和图片与视频搜索按钮已移除 ")
            ])
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )) : $data.searchKeyword && $data.searchResults.length === 0 ? (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 2 },
        [
          vue.createCommentVNode(" 无搜索结果 "),
          vue.createElementVNode("view", { class: "no-results-area" }, [
            vue.createElementVNode("view", { class: "no-results-icon" }, "🔍"),
            vue.createElementVNode("text", { class: "no-results-text" }, "未找到相关聊天记录"),
            vue.createElementVNode("text", { class: "no-results-desc" }, "试试其他关键词")
          ])
        ],
        2112
        /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
      )) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesChatSearch = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$W], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/search.vue"]]);
  const _sfc_main$W = {
    name: "DateSearchPage",
    data() {
      return {
        currentYear: 2021,
        currentMonth: 8,
        selectedDate: null,
        viewMode: "month",
        // 'month' 或 'year'
        showYearPicker: false,
        showMonthPicker: false,
        weekdays: ["一", "二", "三", "四", "五", "六", "七"]
      };
    },
    computed: {
      yearRange() {
        const years = [];
        for (let i = 2020; i <= 2025; i++) {
          years.push(i);
        }
        return years;
      },
      calendarDates() {
        const dates = [];
        const firstDay = new Date(this.currentYear, this.currentMonth - 1, 1);
        const lastDay = new Date(this.currentYear, this.currentMonth, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + 1);
        for (let i = 0; i < firstDay.getDay() - 1; i++) {
          const prevDate = new Date(startDate);
          prevDate.setDate(prevDate.getDate() + i);
          dates.push({
            day: prevDate.getDate(),
            otherMonth: true,
            selected: false,
            isToday: false,
            fullDate: prevDate
          });
        }
        for (let i = 1; i <= lastDay.getDate(); i++) {
          const currentDate = new Date(this.currentYear, this.currentMonth - 1, i);
          const isToday = this.isToday(currentDate);
          const isSelected = this.selectedDate && this.isSameDate(currentDate, this.selectedDate);
          dates.push({
            day: i,
            otherMonth: false,
            selected: isSelected,
            isToday,
            fullDate: currentDate
          });
        }
        const remainingCells = 42 - dates.length;
        for (let i = 1; i <= remainingCells; i++) {
          const nextDate = new Date(this.currentYear, this.currentMonth, i);
          dates.push({
            day: i,
            otherMonth: true,
            selected: false,
            isToday: false,
            fullDate: nextDate
          });
        }
        return dates;
      }
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      setViewMode(mode) {
        this.viewMode = mode;
      },
      openYearPicker() {
        this.showYearPicker = true;
      },
      hideYearPicker() {
        this.showYearPicker = false;
      },
      openMonthPicker() {
        this.showMonthPicker = true;
      },
      hideMonthPicker() {
        this.showMonthPicker = false;
      },
      selectYear(year) {
        this.currentYear = year;
        this.showYearPicker = false;
      },
      selectMonth(month) {
        this.currentMonth = month;
        this.showMonthPicker = false;
      },
      selectDate(date) {
        if (!date.otherMonth) {
          this.selectedDate = date.fullDate;
          uni.showToast({
            title: `已选择: ${date.fullDate.getFullYear()}-${(date.fullDate.getMonth() + 1).toString().padStart(2, "0")}-${date.fullDate.getDate().toString().padStart(2, "0")}`,
            icon: "none"
          });
        }
      },
      isToday(date) {
        const today = /* @__PURE__ */ new Date();
        return this.isSameDate(date, today);
      },
      isSameDate(date1, date2) {
        return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
      }
    }
  };
  function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "date-search-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("view", { class: "back-arrow" })
        ]),
        vue.createElementVNode("text", { class: "title" }, "按日期查找"),
        vue.createElementVNode("view", { class: "placeholder" })
      ]),
      vue.createCommentVNode(" 日期选择控件 "),
      vue.createElementVNode("view", { class: "date-controls" }, [
        vue.createElementVNode("view", { class: "year-month-row" }, [
          vue.createElementVNode("view", {
            class: "dropdown year-dropdown",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.openYearPicker && $options.openYearPicker(...args))
          }, [
            vue.createElementVNode(
              "text",
              { class: "dropdown-text" },
              vue.toDisplayString($data.currentYear) + "年",
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "dropdown-arrow" })
          ]),
          vue.createElementVNode("view", {
            class: "dropdown month-dropdown",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.openMonthPicker && $options.openMonthPicker(...args))
          }, [
            vue.createElementVNode(
              "text",
              { class: "dropdown-text" },
              vue.toDisplayString($data.currentMonth) + "月",
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "dropdown-arrow" })
          ])
        ]),
        vue.createElementVNode("view", { class: "view-toggle" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["toggle-btn", { active: $data.viewMode === "month" }]),
              onClick: _cache[3] || (_cache[3] = ($event) => $options.setViewMode("month"))
            },
            [
              vue.createElementVNode("text", { class: "toggle-text" }, "月")
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["toggle-btn", { active: $data.viewMode === "year" }]),
              onClick: _cache[4] || (_cache[4] = ($event) => $options.setViewMode("year"))
            },
            [
              vue.createElementVNode("text", { class: "toggle-text" }, "年")
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 日历网格 "),
      vue.createElementVNode("view", { class: "calendar-grid" }, [
        vue.createCommentVNode(" 星期标题行 "),
        vue.createElementVNode("view", { class: "weekdays-row" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.weekdays, (day) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "weekday",
                key: day
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "weekday-text" },
                  vue.toDisplayString(day),
                  1
                  /* TEXT */
                )
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 日期网格 "),
        vue.createElementVNode("view", { class: "dates-grid" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($options.calendarDates, (date, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["date-cell", {
                  "other-month": date.otherMonth,
                  "current-month": !date.otherMonth,
                  "selected": date.selected,
                  "today": date.isToday
                }]),
                key: index,
                onClick: ($event) => $options.selectDate(date)
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "date-number" },
                  vue.toDisplayString(date.day),
                  1
                  /* TEXT */
                ),
                date.selected ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "selected-dot"
                })) : vue.createCommentVNode("v-if", true)
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ]),
      vue.createCommentVNode(" 年份选择弹层 "),
      $data.showYearPicker ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "year-picker-overlay",
        onClick: _cache[6] || (_cache[6] = (...args) => $options.hideYearPicker && $options.hideYearPicker(...args))
      }, [
        vue.createElementVNode("view", {
          class: "year-picker-sheet",
          onClick: _cache[5] || (_cache[5] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "year-picker-content" }, [
            vue.createElementVNode("view", { class: "year-range" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($options.yearRange, (year) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: vue.normalizeClass(["year-item", { active: year === $data.currentYear }]),
                    key: year,
                    onClick: ($event) => $options.selectYear(year)
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "year-text" },
                      vue.toDisplayString(year),
                      1
                      /* TEXT */
                    )
                  ], 10, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 月份选择弹层 "),
      $data.showMonthPicker ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "month-picker-overlay",
        onClick: _cache[8] || (_cache[8] = (...args) => $options.hideMonthPicker && $options.hideMonthPicker(...args))
      }, [
        vue.createElementVNode("view", {
          class: "month-picker-sheet",
          onClick: _cache[7] || (_cache[7] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "month-picker-content" }, [
            vue.createElementVNode("view", { class: "month-grid" }, [
              (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(12, (month) => {
                  return vue.createElementVNode("view", {
                    class: vue.normalizeClass(["month-item", { active: month === $data.currentMonth }]),
                    key: month,
                    onClick: ($event) => $options.selectMonth(month)
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "month-text" },
                      vue.toDisplayString(month) + "月",
                      1
                      /* TEXT */
                    )
                  ], 10, ["onClick"]);
                }),
                64
                /* STABLE_FRAGMENT */
              ))
            ])
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesChatDateSearch = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$V], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/date-search.vue"]]);
  const _sfc_main$V = {
    name: "SearchResultsPage",
    data() {
      return {};
    }
  };
  function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "search-results-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 页面标题 "),
      vue.createCommentVNode(' <view class="page-title">\n			<text class="title-text">搜索结果</text>\n		</view> '),
      vue.createCommentVNode(" 搜索栏区域 "),
      vue.createElementVNode("view", { class: "search-bar-area" }, [
        vue.createElementVNode("view", { class: "search-input-field" }, [
          vue.createElementVNode("text", { class: "search-text" }, "意大利面")
        ]),
        vue.createElementVNode("view", { class: "cancel-btn" }, [
          vue.createElementVNode("text", { class: "cancel-text" }, "取消")
        ])
      ]),
      vue.createCommentVNode(" 标签页导航 "),
      vue.createElementVNode("view", { class: "tab-navigation" }, [
        vue.createElementVNode("view", { class: "tab-item active" }, [
          vue.createElementVNode("text", { class: "tab-text" }, "全部")
        ]),
        vue.createElementVNode("view", { class: "tab-item" }, [
          vue.createElementVNode("text", { class: "tab-text" }, "图片")
        ]),
        vue.createElementVNode("view", { class: "tab-item" }, [
          vue.createElementVNode("text", { class: "tab-text" }, "AI")
        ]),
        vue.createElementVNode("view", { class: "tab-item" }, [
          vue.createElementVNode("text", { class: "tab-text" }, "链接")
        ]),
        vue.createElementVNode("view", { class: "tab-item" }, [
          vue.createElementVNode("text", { class: "tab-text" }, "音乐与音频")
        ])
      ]),
      vue.createCommentVNode(" 搜索结果列表 "),
      vue.createElementVNode("view", { class: "search-results-list" }, [
        vue.createCommentVNode(" 第一个搜索结果 "),
        vue.createElementVNode("view", { class: "result-item" }, [
          vue.createElementVNode("view", { class: "item-left" }, [
            vue.createElementVNode("image", {
              class: "profile-pic",
              src: "",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.createElementVNode("text", { class: "item-title" }, "厚乳抹茶蛋糕"),
            vue.createElementVNode("view", { class: "item-snippet" }, [
              vue.createElementVNode("text", { class: "snippet-text" }, "问题的。我认为"),
              vue.createElementVNode("text", { class: "highlighted-text" }, "意大利面"),
              vue.createElementVNode("text", { class: "snippet-text" }, "就应该拌四十二号混凝土")
            ])
          ]),
          vue.createElementVNode("view", { class: "item-right" }, [
            vue.createElementVNode("text", { class: "item-date" }, "8月5日")
          ])
        ]),
        vue.createCommentVNode(" 第二个搜索结果 "),
        vue.createElementVNode("view", { class: "result-item" }, [
          vue.createElementVNode("view", { class: "item-left" }, [
            vue.createElementVNode("image", {
              class: "profile-pic",
              src: "",
              mode: "aspectFill"
            })
          ]),
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.createElementVNode("text", { class: "item-title" }, "猫又屋之主(AI)"),
            vue.createElementVNode("view", { class: "item-snippet" }, [
              vue.createElementVNode("text", { class: "snippet-text" }, "就"),
              vue.createElementVNode("text", { class: "highlighted-text" }, "意大利面"),
              vue.createElementVNode("text", { class: "snippet-text" }, "就行吧")
            ])
          ]),
          vue.createElementVNode("view", { class: "item-right" }, [
            vue.createElementVNode("text", { class: "item-date" }, "7月13日")
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesChatSearchResults = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$U], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/search-results.vue"]]);
  const _sfc_main$U = {
    data() {
      return {
        friendName: "念念",
        // 默认好友名称
        friendId: null,
        // 好友ID
        userId: null,
        // 用户ID
        chatSettings: [],
        // 聊天设置选项
        loading: false,
        errorMessage: "",
        // 用户设置状态
        userSettings: {
          doNotDisturb: false,
          pinChat: false,
          reminders: false,
          chatBackground: ""
          // 聊天背景URL
        }
      };
    },
    onLoad(options) {
      if (options.friendName) {
        this.friendName = decodeURIComponent(options.friendName);
      }
      if (options.friendId) {
        this.friendId = parseInt(options.friendId);
      }
      this.userId = uni.getStorageSync("userId") || 1;
      formatAppLog("log", "at pages/chat/chat-info.vue:139", "chat-info页面加载参数:", options);
      formatAppLog("log", "at pages/chat/chat-info.vue:140", "用户ID:", this.userId);
      formatAppLog("log", "at pages/chat/chat-info.vue:141", "好友ID:", this.friendId);
      formatAppLog("log", "at pages/chat/chat-info.vue:142", "好友名称:", this.friendName);
      if (!this.friendId) {
        this.friendId = uni.getStorageSync("currentFriendId");
        formatAppLog("log", "at pages/chat/chat-info.vue:147", "从存储中获取好友ID:", this.friendId);
      }
      if (!this.friendId) {
        formatAppLog("error", "at pages/chat/chat-info.vue:152", "好友ID不存在，无法加载设置");
        this.friendId = 1000001;
        formatAppLog("log", "at pages/chat/chat-info.vue:155", "使用默认好友ID:", this.friendId);
        uni.showToast({
          title: "使用默认好友设置",
          icon: "none",
          duration: 2e3
        });
      }
      this.loadChatSettings();
      this.loadUserSettings();
    },
    methods: {
      // 加载聊天设置选项
      async loadChatSettings() {
        this.loading = true;
        this.errorMessage = "";
        try {
          formatAppLog("log", "at pages/chat/chat-info.vue:175", "开始加载聊天设置选项...");
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/chat-settings-base/all",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/chat/chat-info.vue:184", "聊天设置API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/chat-info.vue:185", "聊天设置API响应数据:", response.data);
          if (response.statusCode === 200 && response.data) {
            this.chatSettings = response.data.filter((setting) => setting.status === 1);
            formatAppLog("log", "at pages/chat/chat-info.vue:189", "聊天设置加载成功:", this.chatSettings);
          } else {
            this.errorMessage = `加载聊天设置失败，状态码: ${response.statusCode}`;
            formatAppLog("error", "at pages/chat/chat-info.vue:192", "加载聊天设置失败:", response);
          }
        } catch (error) {
          this.errorMessage = "网络错误，请检查连接";
          formatAppLog("error", "at pages/chat/chat-info.vue:196", "加载聊天设置异常:", error);
        } finally {
          this.loading = false;
        }
      },
      // 根据设置类型获取设置状态
      getSettingStatus(settingName) {
        const settingMap = {
          "消息免打扰": "doNotDisturb",
          "置顶聊天": "pinChat",
          "提醒": "reminders"
        };
        const key = settingMap[settingName];
        return key ? this.userSettings[key] : false;
      },
      // 切换设置状态
      toggleSetting(settingName) {
        formatAppLog("log", "at pages/chat/chat-info.vue:215", "toggleSetting被调用，设置名称:", settingName);
        const settingMap = {
          "消息免打扰": { key: "doNotDisturb", settingId: 10000002 },
          "置顶聊天": { key: "pinChat", settingId: 10000003 },
          "提醒": { key: "reminders", settingId: 10000004 }
        };
        const setting = settingMap[settingName];
        if (setting) {
          this.userSettings[setting.key] = !this.userSettings[setting.key];
          formatAppLog("log", "at pages/chat/chat-info.vue:224", `${settingName} 状态切换为:`, this.userSettings[setting.key]);
          const settingValue = this.userSettings[setting.key] ? '["1"]' : '["0"]';
          formatAppLog("log", "at pages/chat/chat-info.vue:227", "准备保存设置值:", settingValue);
          this.saveSingleSetting(setting.settingId, settingValue);
        } else {
          formatAppLog("log", "at pages/chat/chat-info.vue:230", "未找到对应的设置映射:", settingName);
        }
      },
      // 加载用户设置
      async loadUserSettings() {
        if (!this.userId || !this.friendId) {
          formatAppLog("log", "at pages/chat/chat-info.vue:237", "用户ID或好友ID不存在，使用默认设置");
          return;
        }
        try {
          formatAppLog("log", "at pages/chat/chat-info.vue:242", "开始加载用户设置，userId:", this.userId, "friendId:", this.friendId);
          const response = await uni.request({
            url: `http://localhost:8888/api/u-entities/user-friends-relationship/settings/${this.userId}/${this.friendId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/chat/chat-info.vue:251", "用户设置API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/chat-info.vue:252", "用户设置API响应数据:", response.data);
          if (response.statusCode === 200 && response.data) {
            try {
              const doNotDisturbArray = JSON.parse(response.data.doNotDisturb || '["0"]');
              const pinChatArray = JSON.parse(response.data.pinChat || '["0"]');
              const remindersArray = JSON.parse(response.data.reminders || '["0"]');
              const chatBackgroundArray = JSON.parse(response.data.chatBackground || '[""]');
              this.userSettings.doNotDisturb = doNotDisturbArray[0] === "1";
              this.userSettings.pinChat = pinChatArray[0] === "1";
              this.userSettings.reminders = remindersArray[0] === "1";
              this.userSettings.chatBackground = chatBackgroundArray[0] || "";
              formatAppLog("log", "at pages/chat/chat-info.vue:266", "用户设置加载成功:", this.userSettings);
            } catch (e) {
              formatAppLog("error", "at pages/chat/chat-info.vue:268", "解析设置数据失败:", e);
              this.userSettings.doNotDisturb = false;
              this.userSettings.pinChat = false;
              this.userSettings.reminders = false;
              this.userSettings.chatBackground = "";
            }
          } else {
            formatAppLog("error", "at pages/chat/chat-info.vue:276", "加载用户设置失败:", response);
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/chat-info.vue:279", "加载用户设置异常:", error);
        }
      },
      // 保存单个设置
      async saveSingleSetting(settingId, settingValue) {
        formatAppLog("log", "at pages/chat/chat-info.vue:285", "saveSingleSetting被调用，参数:", { settingId, settingValue });
        formatAppLog("log", "at pages/chat/chat-info.vue:286", "当前用户ID:", this.userId);
        formatAppLog("log", "at pages/chat/chat-info.vue:287", "当前好友ID:", this.friendId);
        if (!this.userId) {
          formatAppLog("error", "at pages/chat/chat-info.vue:290", "用户ID不存在，无法保存设置");
          uni.showToast({
            title: "用户信息错误，无法保存设置",
            icon: "error",
            duration: 2e3
          });
          return;
        }
        if (!this.friendId) {
          formatAppLog("error", "at pages/chat/chat-info.vue:300", "好友ID不存在，无法保存设置");
          uni.showToast({
            title: "好友信息不完整，无法保存设置",
            icon: "error",
            duration: 2e3
          });
          return;
        }
        try {
          const settingsData = {
            userId: this.userId,
            friendId: this.friendId,
            settingId,
            settingValue
          };
          formatAppLog("log", "at pages/chat/chat-info.vue:317", "开始保存单个设置:", settingsData);
          const response = await uni.request({
            url: "http://localhost:8888/api/u-entities/user-friends-relationship/save-settings",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: settingsData
          });
          formatAppLog("log", "at pages/chat/chat-info.vue:327", "保存单个设置API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/chat-info.vue:328", "保存单个设置API响应数据:", response.data);
          if (response.statusCode === 200) {
            formatAppLog("log", "at pages/chat/chat-info.vue:331", "单个设置保存成功");
            uni.showToast({
              title: "设置已保存",
              icon: "success",
              duration: 1e3
            });
          } else {
            formatAppLog("error", "at pages/chat/chat-info.vue:338", "保存单个设置失败:", response);
            uni.showToast({
              title: "保存失败",
              icon: "error",
              duration: 1e3
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/chat-info.vue:346", "保存单个设置异常:", error);
          uni.showToast({
            title: "保存失败",
            icon: "error",
            duration: 1e3
          });
        }
      },
      // 判断是否为开关类型的设置
      isToggleSetting(settingName) {
        const toggleSettings = ["消息免打扰", "置顶聊天", "提醒"];
        return toggleSettings.includes(settingName);
      },
      // 处理设置项点击
      handleSettingClick(setting) {
        const settingName = setting.chatSettingName;
        if (this.isToggleSetting(settingName)) {
          return;
        }
        switch (settingName) {
          case "查找聊天记录":
            this.goToSearchHistory();
            break;
          case "设置聊天背景":
            this.goToSetBackground();
            break;
          case "清空聊天记录":
            this.goToClearHistory();
            break;
          case "举报":
            this.goToReport();
            break;
          default:
            formatAppLog("log", "at pages/chat/chat-info.vue:385", "未知设置项:", settingName);
            uni.showToast({
              title: `${settingName} 功能开发中`,
              icon: "none"
            });
        }
      },
      // 设置聊天背景
      goToSetBackground() {
        uni.chooseImage({
          count: 1,
          sizeType: ["original", "compressed"],
          sourceType: ["album", "camera"],
          success: (res) => {
            const tempFilePath = res.tempFilePaths[0];
            this.userSettings.chatBackground = tempFilePath;
            const settingValue = JSON.stringify([tempFilePath]);
            this.saveSingleSetting(10000005, settingValue);
            uni.showToast({
              title: "背景设置成功",
              icon: "success"
            });
          },
          fail: (err) => {
            formatAppLog("error", "at pages/chat/chat-info.vue:413", "选择图片失败:", err);
            uni.showToast({
              title: "选择图片失败",
              icon: "error"
            });
          }
        });
      },
      goBack() {
        uni.navigateBack();
      },
      goToSearchHistory() {
        uni.navigateTo({
          url: "/pages/chat/search"
        });
      },
      goToClearHistory() {
        uni.showToast({
          title: "清空聊天记录功能",
          icon: "none"
        });
      },
      goToReport() {
        uni.navigateTo({
          url: "/pages/report/report"
        });
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/content-feed/content-feed"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/friend-list/friend-list"
        });
      },
      goToAIList() {
        uni.navigateTo({
          url: "/pages/ai-list/ai-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/user-profile/user-profile"
        });
      },
      goToFriendCard() {
        uni.navigateTo({
          url: `/pages/chat/friend-card?friendName=${encodeURIComponent(this.friendName)}&friendId=${this.friendId}`
        });
      }
    }
  };
  function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button" @click="goBack">\n				<text class="back-arrow"></text>\n			</view>\n			<text class="nav-title">聊天信息</text>\n		</view> '),
      vue.createCommentVNode(" 头像和用户名区域 "),
      vue.createElementVNode("view", {
        class: "profile-section",
        onClick: _cache[0] || (_cache[0] = (...args) => $options.goToFriendCard && $options.goToFriendCard(...args))
      }, [
        vue.createElementVNode("view", { class: "avatar-container" }, [
          vue.createElementVNode("view", { class: "avatar" }, [
            vue.createElementVNode("text", { class: "avatar-text" }, "🐱")
          ])
        ]),
        vue.createElementVNode(
          "text",
          { class: "username" },
          vue.toDisplayString($data.friendName),
          1
          /* TEXT */
        )
      ]),
      vue.createCommentVNode(" 设置选项列表 "),
      vue.createElementVNode("view", { class: "settings-list" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载设置中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.loadChatSettings && $options.loadChatSettings(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 动态设置选项 "),
            vue.createElementVNode("view", null, [
              vue.createCommentVNode(" 动态设置选项 "),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.chatSettings, (setting) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: setting.chatSettingId,
                    class: "setting-item",
                    onClick: ($event) => $options.handleSettingClick(setting)
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "setting-text" },
                      vue.toDisplayString(setting.chatSettingName),
                      1
                      /* TEXT */
                    ),
                    vue.createCommentVNode(" 根据设置类型显示不同的控件 "),
                    $options.isToggleSetting(setting.chatSettingName) ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: vue.normalizeClass(["toggle-switch", { "active": $options.getSettingStatus(setting.chatSettingName) }]),
                      onClick: vue.withModifiers(($event) => $options.toggleSetting(setting.chatSettingName), ["stop"])
                    }, [
                      vue.createElementVNode("view", { class: "toggle-circle" })
                    ], 10, ["onClick"])) : (vue.openBlock(), vue.createElementBlock("text", {
                      key: 1,
                      class: "arrow"
                    }, "›"))
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-nav" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", { class: "nav-item" }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToAIList && $options.goToAIList(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-icon" }, "AI")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-avatar" }, [
            vue.createElementVNode("view", { class: "mini-cat-avatar" }, [
              vue.createElementVNode("view", { class: "mini-cat-body" }),
              vue.createElementVNode("view", { class: "mini-cat-face" }, [
                vue.createElementVNode("view", { class: "mini-cat-eyes" }, [
                  vue.createElementVNode("view", { class: "mini-cat-eye" }),
                  vue.createElementVNode("view", { class: "mini-cat-eye" })
                ])
              ])
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesChatChatInfo = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$T], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/chat-info.vue"]]);
  const _sfc_main$T = {
    data() {
      return {
        friendName: "",
        friendId: null,
        userId: null,
        friendInfo: {
          nickname: "",
          avatar: "",
          location: ""
        },
        loading: false,
        errorMessage: "",
        // 朋友资料弹窗相关
        showProfileModal: false,
        saving: false,
        profileData: {
          friendsProfile: ""
        }
      };
    },
    onLoad(options) {
      if (options.friendName) {
        this.friendName = decodeURIComponent(options.friendName);
      }
      if (options.friendId) {
        this.friendId = parseInt(options.friendId);
      }
      this.userId = uni.getStorageSync("userId") || 1;
      formatAppLog("log", "at pages/chat/friend-card.vue:165", "friend-card页面加载参数:", options);
      formatAppLog("log", "at pages/chat/friend-card.vue:166", "用户ID:", this.userId);
      formatAppLog("log", "at pages/chat/friend-card.vue:167", "好友ID:", this.friendId);
      formatAppLog("log", "at pages/chat/friend-card.vue:168", "好友名称:", this.friendName);
      this.loadFriendInfo();
      this.loadFriendProfile();
    },
    methods: {
      // 加载好友信息
      async loadFriendInfo() {
        if (!this.friendId) {
          formatAppLog("log", "at pages/chat/friend-card.vue:179", "好友ID不存在，使用默认信息");
          this.friendInfo.nickname = this.friendName;
          return;
        }
        this.loading = true;
        this.errorMessage = "";
        try {
          formatAppLog("log", "at pages/chat/friend-card.vue:188", "开始加载好友信息，friendId:", this.friendId);
          const response = await uni.request({
            url: `http://localhost:8888/api/users/${this.friendId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/chat/friend-card.vue:197", "好友信息API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/friend-card.vue:198", "好友信息API响应数据:", response.data);
          if (response.statusCode === 200 && response.data) {
            this.friendInfo = {
              nickname: response.data.realName || response.data.username || this.friendName,
              avatar: response.data.profilePicUrl || "",
              location: response.data.location || ""
            };
            formatAppLog("log", "at pages/chat/friend-card.vue:206", "好友信息加载成功:", this.friendInfo);
          } else {
            formatAppLog("error", "at pages/chat/friend-card.vue:208", "加载好友信息失败:", response);
            this.errorMessage = "加载好友信息失败";
            this.friendInfo.nickname = this.friendName;
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/friend-card.vue:214", "加载好友信息异常:", error);
          this.errorMessage = "网络错误，请检查连接";
          this.friendInfo.nickname = this.friendName;
        } finally {
          this.loading = false;
        }
      },
      goBack() {
        uni.navigateBack();
      },
      showMoreOptions() {
        uni.showActionSheet({
          itemList: ["设置备注和标签", "设置朋友圈权限", "加入黑名单", "删除好友"],
          success: (res) => {
            formatAppLog("log", "at pages/chat/friend-card.vue:231", "选择了第" + (res.tapIndex + 1) + "个选项");
          }
        });
      },
      goToFriendInfo() {
        this.showProfileModal = true;
        this.loadFriendProfile();
      },
      goToFriendHomepage() {
        uni.navigateTo({
          url: `/pages/feed/user-profile?friendName=${encodeURIComponent(this.friendName)}`
        });
      },
      sendMessage() {
        if (this.friendId) {
          uni.navigateTo({
            url: `/pages/chat/chat?friendId=${this.friendId}&friendName=${encodeURIComponent(this.friendInfo.nickname || this.friendName)}`
          });
        } else {
          uni.showToast({
            title: "好友信息不完整",
            icon: "error"
          });
        }
      },
      // 加载朋友资料
      async loadFriendProfile() {
        if (!this.userId || !this.friendId) {
          formatAppLog("log", "at pages/chat/friend-card.vue:264", "用户ID或好友ID不存在，无法加载朋友资料");
          return;
        }
        try {
          formatAppLog("log", "at pages/chat/friend-card.vue:269", "开始加载朋友资料，userId:", this.userId, "friendId:", this.friendId);
          const response = await uni.request({
            url: `http://localhost:8888/api/u-entities/friends-profile/${this.userId}/${this.friendId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/chat/friend-card.vue:278", "朋友资料API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/friend-card.vue:279", "朋友资料API响应数据:", response.data);
          if (response.statusCode === 200 && response.data) {
            this.profileData = {
              friendsProfile: response.data.friendsProfile || ""
            };
            formatAppLog("log", "at pages/chat/friend-card.vue:285", "朋友资料加载成功:", this.profileData);
          } else {
            formatAppLog("log", "at pages/chat/friend-card.vue:287", "朋友资料不存在，使用默认值");
            this.profileData = {
              friendsProfile: ""
            };
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/friend-card.vue:294", "加载朋友资料异常:", error);
          this.profileData = {
            friendsProfile: ""
          };
        }
      },
      // 保存朋友资料
      async saveProfile() {
        if (!this.userId || !this.friendId) {
          uni.showToast({
            title: "参数错误，无法保存",
            icon: "error"
          });
          return;
        }
        if (this.profileData.friendsProfile.length > 255) {
          uni.showToast({
            title: "备注内容不能超过255个字符",
            icon: "error"
          });
          return;
        }
        this.saving = true;
        try {
          const profileData = {
            userId: this.userId,
            friendId: this.friendId,
            friendsProfile: this.profileData.friendsProfile
          };
          formatAppLog("log", "at pages/chat/friend-card.vue:330", "开始保存朋友资料:", profileData);
          const response = await uni.request({
            url: "http://localhost:8888/api/u-entities/friends-profile/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: profileData
          });
          formatAppLog("log", "at pages/chat/friend-card.vue:340", "保存朋友资料API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/friend-card.vue:341", "保存朋友资料API响应数据:", response.data);
          if (response.statusCode === 200) {
            uni.showToast({
              title: "保存成功",
              icon: "success"
            });
            this.closeProfileModal();
          } else {
            formatAppLog("error", "at pages/chat/friend-card.vue:350", "保存朋友资料失败:", response);
            uni.showToast({
              title: "保存失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/friend-card.vue:357", "保存朋友资料异常:", error);
          uni.showToast({
            title: "保存失败",
            icon: "error"
          });
        } finally {
          this.saving = false;
        }
      },
      // 关闭朋友资料弹窗
      closeProfileModal() {
        this.showProfileModal = false;
        this.profileData = {
          friendsProfile: ""
        };
      }
    }
  };
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">16:38</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createElementVNode("view", { class: "nav-bar" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("text", { class: "back-arrow" }, "‹")
        ]),
        vue.createElementVNode(
          "text",
          { class: "nav-title" },
          vue.toDisplayString($data.friendName),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", {
          class: "more-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.showMoreOptions && $options.showMoreOptions(...args))
        }, [
          vue.createElementVNode("text", { class: "more-dots" }, "⋯")
        ])
      ]),
      vue.createCommentVNode(" 好友信息区域 "),
      vue.createElementVNode("view", { class: "friend-info-section" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载好友信息中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.loadFriendInfo && $options.loadFriendInfo(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 正常显示 "),
            vue.createElementVNode("view", null, [
              vue.createElementVNode("view", { class: "avatar-container" }, [
                vue.createElementVNode("view", { class: "avatar" }, [
                  $data.friendInfo.avatar ? (vue.openBlock(), vue.createElementBlock("image", {
                    key: 0,
                    class: "avatar-image",
                    src: $data.friendInfo.avatar,
                    mode: "aspectFill"
                  }, null, 8, ["src"])) : (vue.openBlock(), vue.createElementBlock("text", {
                    key: 1,
                    class: "avatar-text"
                  }, "🐱"))
                ])
              ]),
              vue.createElementVNode("view", { class: "friend-details" }, [
                vue.createElementVNode(
                  "text",
                  { class: "friend-name" },
                  vue.toDisplayString($data.friendInfo.nickname || $data.friendName),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  { class: "friend-nickname" },
                  "昵称: " + vue.toDisplayString($data.friendInfo.nickname || $data.friendName),
                  1
                  /* TEXT */
                ),
                $data.friendInfo.location ? (vue.openBlock(), vue.createElementBlock(
                  "text",
                  {
                    key: 0,
                    class: "friend-location"
                  },
                  "地区: " + vue.toDisplayString($data.friendInfo.location),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 功能选项列表 "),
      vue.createElementVNode("view", { class: "options-list" }, [
        vue.createElementVNode("view", {
          class: "option-item",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToFriendInfo && $options.goToFriendInfo(...args))
        }, [
          vue.createElementVNode("text", { class: "option-text" }, "朋友资料"),
          $data.profileData.friendsProfile ? (vue.openBlock(), vue.createElementBlock(
            "text",
            {
              key: 0,
              class: "option-desc"
            },
            vue.toDisplayString($data.profileData.friendsProfile),
            1
            /* TEXT */
          )) : (vue.openBlock(), vue.createElementBlock("text", {
            key: 1,
            class: "option-desc"
          }, "添加朋友的备注名、电话、标签、备忘、照片等。")),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ]),
        vue.createElementVNode("view", {
          class: "option-item",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToFriendHomepage && $options.goToFriendHomepage(...args))
        }, [
          vue.createElementVNode("text", { class: "option-text" }, "好友主页"),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ])
      ]),
      vue.createCommentVNode(" 操作按钮区域 "),
      vue.createElementVNode("view", { class: "action-buttons" }, [
        vue.createElementVNode("view", {
          class: "action-btn send-message",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.sendMessage && $options.sendMessage(...args))
        }, [
          vue.createElementVNode("view", { class: "btn-icon" }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              class: "message-icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                fill: "#333333"
              }),
              vue.createElementVNode("path", {
                d: "M512 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176z",
                fill: "#333333"
              })
            ]))
          ]),
          vue.createElementVNode("text", { class: "btn-text" }, "发消息")
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" }),
      vue.createCommentVNode(" 朋友资料编辑弹窗 "),
      $data.showProfileModal ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "modal-overlay",
        onClick: _cache[11] || (_cache[11] = (...args) => $options.closeProfileModal && $options.closeProfileModal(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[10] || (_cache[10] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "modal-header" }, [
            vue.createElementVNode("text", { class: "modal-title" }, "朋友资料"),
            vue.createElementVNode("view", {
              class: "close-button",
              onClick: _cache[6] || (_cache[6] = (...args) => $options.closeProfileModal && $options.closeProfileModal(...args))
            }, [
              vue.createElementVNode("text", { class: "close-icon" }, "×")
            ])
          ]),
          vue.createElementVNode("view", { class: "modal-body" }, [
            vue.createElementVNode("view", { class: "input-group" }, [
              vue.createElementVNode("text", { class: "input-label" }, "备注"),
              vue.withDirectives(vue.createElementVNode(
                "textarea",
                {
                  class: "textarea-field",
                  "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.profileData.friendsProfile = $event),
                  placeholder: "请输入备注信息",
                  maxlength: "255",
                  "show-confirm-bar": false
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.profileData.friendsProfile]
              ]),
              vue.createElementVNode(
                "text",
                { class: "char-count" },
                vue.toDisplayString($data.profileData.friendsProfile.length) + "/255",
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createElementVNode("view", { class: "modal-footer" }, [
            vue.createElementVNode("button", {
              class: "cancel-btn",
              onClick: _cache[8] || (_cache[8] = (...args) => $options.closeProfileModal && $options.closeProfileModal(...args))
            }, "取消"),
            vue.createElementVNode("button", {
              class: "save-btn",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.saveProfile && $options.saveProfile(...args)),
              disabled: $data.saving
            }, [
              $data.saving ? (vue.openBlock(), vue.createElementBlock("text", { key: 0 }, "保存中...")) : (vue.openBlock(), vue.createElementBlock("text", { key: 1 }, "保存"))
            ], 8, ["disabled"])
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesChatFriendCard = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$S], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/friend-card.vue"]]);
  const _sfc_main$S = {
    data() {
      return {
        userId: null,
        friends: [],
        groupedFriends: {},
        displayedFriends: {},
        searchKeyword: "",
        loading: false,
        errorMessage: ""
      };
    },
    onLoad() {
      this.userId = uni.getStorageSync("userId") || 1000001;
      formatAppLog("log", "at pages/chat/friend-list.vue:122", "好友列表页面加载，userId:", this.userId);
      this.loadFriends();
    },
    methods: {
      // 加载好友列表
      async loadFriends() {
        if (!this.userId) {
          this.errorMessage = "用户ID不存在";
          return;
        }
        this.loading = true;
        this.errorMessage = "";
        try {
          formatAppLog("log", "at pages/chat/friend-list.vue:137", "开始加载好友列表，userId:", this.userId);
          const response = await uni.request({
            url: `http://localhost:8888/api/u-entities/user-chat-list/user/${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/chat/friend-list.vue:146", "好友列表API响应状态码:", response.statusCode);
          formatAppLog("log", "at pages/chat/friend-list.vue:147", "好友列表API响应数据:", response.data);
          if (response.statusCode === 200 && response.data) {
            this.friends = this.convertChatListToFriends(response.data);
            this.groupedFriends = this.groupFriendsByFirstLetter(this.friends);
            this.displayedFriends = this.groupedFriends;
            formatAppLog("log", "at pages/chat/friend-list.vue:153", "好友列表加载成功:", this.friends);
            formatAppLog("log", "at pages/chat/friend-list.vue:154", "分组后的好友列表:", this.groupedFriends);
          } else {
            this.errorMessage = `加载好友列表失败，状态码: ${response.statusCode}`;
            formatAppLog("error", "at pages/chat/friend-list.vue:157", "加载好友列表失败:", response);
          }
        } catch (error) {
          this.errorMessage = "网络错误，请检查连接";
          formatAppLog("error", "at pages/chat/friend-list.vue:161", "加载好友列表异常:", error);
        } finally {
          this.loading = false;
        }
      },
      // 转换聊天列表数据为好友显示格式
      convertChatListToFriends(chatListData) {
        if (!Array.isArray(chatListData)) {
          return [];
        }
        return chatListData.map((chat) => {
          let avatarUrl = chat.avatarUrl;
          if (!avatarUrl || avatarUrl.trim() === "" || avatarUrl === "null") {
            avatarUrl = "/static/default-avatar.png";
          }
          let friendName = chat.friendName;
          if (!friendName || friendName.trim() === "" || friendName === "null") {
            friendName = "未知用户";
          }
          return {
            friendId: chat.friendId,
            friendName,
            avatarUrl,
            status: "online",
            // 默认状态
            lastActive: chat.lastMessageTime,
            createdAt: chat.createdAt,
            sessionId: chat.sessionId
          };
        });
      },
      // 按首字母分组好友
      groupFriendsByFirstLetter(friends) {
        const grouped = {};
        friends.forEach((friend) => {
          const firstLetter = this.getFirstLetter(friend.friendName || "");
          if (!grouped[firstLetter]) {
            grouped[firstLetter] = [];
          }
          grouped[firstLetter].push(friend);
        });
        Object.keys(grouped).forEach((letter) => {
          grouped[letter].sort((a, b) => {
            return (a.friendName || "").localeCompare(b.friendName || "");
          });
        });
        const sortedGrouped = {};
        const sortedLetters = Object.keys(grouped).sort((a, b) => {
          if (a === "#")
            return 1;
          if (b === "#")
            return -1;
          return a.localeCompare(b);
        });
        sortedLetters.forEach((letter) => {
          sortedGrouped[letter] = grouped[letter];
        });
        return sortedGrouped;
      },
      // 获取首字母（简化版拼音首字母）
      getFirstLetter(name) {
        if (!name)
          return "#";
        const firstChar = name.charAt(0);
        if (/[A-Za-z]/.test(firstChar)) {
          return firstChar.toUpperCase();
        }
        const pinyinMap = {
          // A组
          "阿": "A",
          "安": "A",
          "艾": "A",
          "爱": "A",
          // B组
          "白": "B",
          "北": "B",
          "本": "B",
          "包": "B",
          "边": "B",
          // C组
          "陈": "C",
          "程": "C",
          "成": "C",
          "春": "C",
          "蔡": "C",
          "曹": "C",
          // D组
          "大": "D",
          "丁": "D",
          "东": "D",
          "邓": "D",
          "段": "D",
          // E组
          "二": "E",
          "恩": "E",
          // F组
          "方": "F",
          "冯": "F",
          "付": "F",
          "风": "F",
          "范": "F",
          "费": "F",
          // G组
          "高": "G",
          "郭": "G",
          "顾": "G",
          "关": "G",
          "谷": "G",
          // H组
          "韩": "H",
          "何": "H",
          "黄": "H",
          "胡": "H",
          "华": "H",
          "侯": "H",
          // I组
          "伊": "I",
          // J组
          "江": "J",
          "金": "J",
          "贾": "J",
          "蒋": "J",
          "姜": "J",
          "季": "J",
          // K组
          "康": "K",
          "孔": "K",
          "柯": "K",
          // L组
          "李": "L",
          "刘": "L",
          "林": "L",
          "卢": "L",
          "梁": "L",
          "罗": "L",
          "陆": "L",
          // M组
          "马": "M",
          "毛": "M",
          "孟": "M",
          "莫": "M",
          "米": "M",
          // N组
          "南": "N",
          "牛": "N",
          "倪": "N",
          "奶": "N",
          "宁": "N",
          "聂": "N",
          // O组
          "欧": "O",
          "欧": "O",
          // P组
          "潘": "P",
          "彭": "P",
          "皮": "P",
          // Q组
          "钱": "Q",
          "秦": "Q",
          "邱": "Q",
          "齐": "Q",
          // R组
          "任": "R",
          "阮": "R",
          "荣": "R",
          // S组
          "孙": "S",
          "宋": "S",
          "苏": "S",
          "沈": "S",
          "石": "S",
          "史": "S",
          // T组
          "唐": "T",
          "田": "T",
          "陶": "T",
          "汤": "T",
          "谭": "T",
          // U组
          "吴": "U",
          "武": "U",
          // V组
          "王": "V",
          "魏": "V",
          "韦": "V",
          "温": "V",
          // W组
          "王": "W",
          "吴": "W",
          "武": "W",
          "魏": "W",
          "韦": "W",
          "温": "W",
          // X组
          "谢": "X",
          "徐": "X",
          "许": "X",
          "夏": "X",
          "星": "X",
          "小": "X",
          "肖": "X",
          "薛": "X",
          // Y组
          "杨": "Y",
          "叶": "Y",
          "于": "Y",
          "袁": "Y",
          "砚": "Y",
          "夜": "Y",
          "姚": "Y",
          "严": "Y",
          "易": "Y",
          // Z组
          "张": "Z",
          "赵": "Z",
          "周": "Z",
          "朱": "Z",
          "郑": "Z",
          "钟": "Z",
          "曾": "Z"
        };
        return pinyinMap[firstChar] || "#";
      },
      goBack() {
        uni.navigateBack();
      },
      selectFriend(friend) {
        const friendName = friend.friendName || friend;
        const friendId = friend.friendId || null;
        const sessionId = friend.sessionId || 1e7;
        formatAppLog("log", "at pages/chat/friend-list.vue:314", "选择好友:", {
          friendName,
          friendId,
          sessionId
        });
        uni.navigateTo({
          url: `/pages/chat/chat?friendName=${encodeURIComponent(friendName)}&friendId=${friendId}&sessionId=${sessionId}`
        });
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/ai/ai-chat"
        });
      },
      goToFriendList() {
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      // 搜索相关方法
      onSearchInput() {
        this.filterFriends();
      },
      onSearchFocus() {
        formatAppLog("log", "at pages/chat/friend-list.vue:354", "搜索框获得焦点");
      },
      onSearchBlur() {
        formatAppLog("log", "at pages/chat/friend-list.vue:358", "搜索框失去焦点");
      },
      clearSearch() {
        this.searchKeyword = "";
        this.filterFriends();
      },
      // 过滤好友
      filterFriends() {
        if (!this.searchKeyword || this.searchKeyword.trim() === "") {
          this.displayedFriends = this.groupedFriends;
        } else {
          const keyword = this.searchKeyword.toLowerCase().trim();
          const filteredFriends = this.friends.filter((friend) => {
            const friendName = (friend.friendName || "").toLowerCase();
            return friendName.includes(keyword);
          });
          this.displayedFriends = this.groupFriendsByFirstLetter(filteredFriends);
        }
        formatAppLog("log", "at pages/chat/friend-list.vue:383", "搜索关键词:", this.searchKeyword);
        formatAppLog("log", "at pages/chat/friend-list.vue:384", "过滤后的好友:", this.displayedFriends);
      }
    }
  };
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "friend-list" }, [
      vue.createCommentVNode(" 顶部状态栏和导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", { class: "nav-header" }, [
          vue.createElementVNode("view", {
            class: "back-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              t: "1756277721385",
              class: "icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              "p-id": "848",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
                fill: "#666666",
                "p-id": "849"
              })
            ]))
          ]),
          vue.createElementVNode("view", { class: "header-title" }, "好友"),
          vue.createElementVNode("view", { class: "placeholder" })
        ])
      ]),
      vue.createCommentVNode(" 好友列表内容 "),
      vue.createElementVNode("scroll-view", {
        class: "friend-content",
        "scroll-y": ""
      }, [
        vue.createCommentVNode(" 搜索框 "),
        vue.createElementVNode("view", { class: "search-container" }, [
          vue.createElementVNode("view", { class: "search-box" }, [
            vue.createElementVNode("view", { class: "search-icon" }, [
              (vue.openBlock(), vue.createElementBlock("svg", {
                t: "1756202042594",
                class: "icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                "p-id": "6084",
                width: "24",
                height: "24"
              }, [
                vue.createElementVNode("path", {
                  d: "M446.112323 177.545051c137.567677 0.219798 252.612525 104.59798 266.162424 241.493333 13.562828 136.895354-78.778182 261.818182-213.617777 289.008485-134.852525 27.203232-268.386263-52.156768-308.945455-183.608889s25.018182-272.252121 151.738182-325.779394A267.235556 267.235556 0 0 1 446.112323 177.545051m0-62.060607c-182.794343 0-330.989899 148.195556-330.989899 330.989899s148.195556 330.989899 330.989899 330.989899 330.989899-148.195556 330.989899-330.989899-148.195556-330.989899-330.989899-330.989899z m431.321212 793.341415a30.849293 30.849293 0 0 1-21.94101-9.102223l-157.220202-157.220202c-11.752727-12.179394-11.584646-31.534545 0.37495-43.50707 11.972525-11.972525 31.327677-12.140606 43.494141-0.37495l157.220202 157.220202a31.036768 31.036768 0 0 1 6.723232 33.810101 31.004444 31.004444 0 0 1-28.651313 19.174142z m0 0",
                  "p-id": "6085",
                  fill: "#2c2c2c"
                })
              ]))
            ]),
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                class: "search-input",
                type: "text",
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.searchKeyword = $event),
                placeholder: "搜索好友...",
                onInput: _cache[2] || (_cache[2] = (...args) => $options.onSearchInput && $options.onSearchInput(...args)),
                onFocus: _cache[3] || (_cache[3] = (...args) => $options.onSearchFocus && $options.onSearchFocus(...args)),
                onBlur: _cache[4] || (_cache[4] = (...args) => $options.onSearchBlur && $options.onSearchBlur(...args))
              },
              null,
              544
              /* NEED_HYDRATION, NEED_PATCH */
            ), [
              [vue.vModelText, $data.searchKeyword]
            ]),
            $data.searchKeyword ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "clear-button",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.clearSearch && $options.clearSearch(...args))
            }, [
              (vue.openBlock(), vue.createElementBlock("svg", {
                class: "icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                width: "20",
                height: "20"
              }, [
                vue.createElementVNode("path", {
                  d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64z m165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 0 1-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                  fill: "#999999"
                })
              ]))
            ])) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.loadFriends && $options.loadFriends(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : Object.keys($data.displayedFriends).length > 0 ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 好友列表 "),
            vue.createElementVNode("view", null, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.displayedFriends, (friends, letter) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: letter,
                    class: "letter-section"
                  }, [
                    vue.createElementVNode(
                      "view",
                      { class: "letter-header" },
                      vue.toDisplayString(letter),
                      1
                      /* TEXT */
                    ),
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(friends, (friend, index) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "friend-item",
                          key: index,
                          onClick: ($event) => $options.selectFriend(friend)
                        }, [
                          vue.createElementVNode("view", { class: "friend-avatar" }, [
                            vue.createElementVNode("image", {
                              class: "avatar-image",
                              src: friend.avatarUrl,
                              mode: "aspectFill"
                            }, null, 8, ["src"])
                          ]),
                          vue.createElementVNode(
                            "text",
                            { class: "friend-name" },
                            vue.toDisplayString(friend.friendName),
                            1
                            /* TEXT */
                          )
                        ], 8, ["onClick"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 3 },
          [
            vue.createCommentVNode(" 空状态 "),
            vue.createElementVNode("view", { class: "empty-container" }, [
              vue.createElementVNode(
                "view",
                { class: "empty-icon" },
                vue.toDisplayString($data.searchKeyword ? "🔍" : "👥"),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "empty-text" },
                vue.toDisplayString($data.searchKeyword ? "未找到相关好友" : "暂无好友"),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "empty-desc" },
                vue.toDisplayString($data.searchKeyword ? "试试其他关键词" : "快去添加一些好友吧"),
                1
                /* TEXT */
              )
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-navigation" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[8] || (_cache[8] = (...args) => $options.goToChatList && $options.goToChatList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[9] || (_cache[9] = (...args) => $options.goToAIChat && $options.goToAIChat(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-tab" }, [
            vue.createElementVNode("text", { class: "ai-text" }, "AI")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "nav-item active",
          onClick: _cache[10] || (_cache[10] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-avatar",
          onClick: _cache[11] || (_cache[11] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("image", {
            class: "avatar-small",
            src: "",
            mode: "aspectFill"
          })
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesChatFriendList = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$R], ["__scopeId", "data-v-c4fc15b1"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/friend-list.vue"]]);
  const _sfc_main$R = {
    name: "ChatList",
    data() {
      return {
        chatList: [],
        loading: false,
        errorMessage: "",
        userId: null
      };
    },
    onLoad() {
      this.userId = uni.getStorageSync("userId") || 1;
      this.loadChatList();
    },
    methods: {
      // 加载聊天列表
      async loadChatList() {
        if (!this.userId) {
          this.errorMessage = "用户ID不存在";
          return;
        }
        this.loading = true;
        this.errorMessage = "";
        try {
          const response = await uni.request({
            url: `http://localhost:8888/api/u-entities/user-chat-list/user/${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          if (response.statusCode === 200 && response.data) {
            formatAppLog("log", "at pages/chat/chat-list.vue:142", "原始聊天数据:", response.data);
            if (response.data.length > 0) {
              formatAppLog("log", "at pages/chat/chat-list.vue:145", "第一条数据的 friendId:", response.data[0].friendId);
            }
            this.chatList = this.convertChatDataToDisplayFormat(response.data);
            formatAppLog("log", "at pages/chat/chat-list.vue:148", "转换后的聊天列表:", this.chatList);
          } else {
            this.errorMessage = "加载聊天列表失败";
            formatAppLog("error", "at pages/chat/chat-list.vue:151", "加载聊天列表失败:", response);
          }
        } catch (error) {
          this.errorMessage = "网络错误，请检查连接";
          formatAppLog("error", "at pages/chat/chat-list.vue:155", "加载聊天列表异常:", error);
        } finally {
          this.loading = false;
        }
      },
      // 转换数据库数据为显示格式
      convertChatDataToDisplayFormat(chatData) {
        if (!Array.isArray(chatData)) {
          return [];
        }
        return chatData.map((chat) => {
          let avatarUrl = chat.avatarUrl;
          if (!avatarUrl || avatarUrl.trim() === "" || avatarUrl === "null") {
            avatarUrl = "/static/default-avatar.png";
          }
          let friendName = chat.friendName;
          if (!friendName || friendName.trim() === "" || friendName === "null") {
            friendName = "未知用户";
          }
          formatAppLog("log", "at pages/chat/chat-list.vue:181", "聊天记录处理:", {
            id: chat.id,
            friendId: chat.friendId,
            friendName,
            avatarUrl
          });
          return {
            id: chat.id,
            name: friendName,
            lastMessage: chat.lastMessage || "暂无消息",
            avatar: avatarUrl,
            timestamp: this.formatTimestamp(chat.lastMessageTime),
            status: this.getStatusFromString(chat.status),
            unreadCount: chat.unreadCount || 0,
            hasUpload: false,
            // 暂时设为false
            type: "chat",
            sessionId: chat.sessionId,
            friendId: chat.friendId
          };
        });
      },
      // 格式化时间戳
      formatTimestamp(timestamp) {
        if (!timestamp)
          return "刚刚";
        const date = new Date(timestamp);
        const now = /* @__PURE__ */ new Date();
        const diff = now - date;
        if (diff < 6e4) {
          return "刚刚";
        }
        if (diff < 36e5) {
          return Math.floor(diff / 6e4) + "分钟前";
        }
        if (diff < 864e5) {
          return Math.floor(diff / 36e5) + "小时前";
        }
        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        return `${hours}:${minutes}`;
      },
      // 从字符串获取状态
      getStatusFromString(status) {
        if (!status)
          return "offline";
        switch (status.toLowerCase()) {
          case "online":
          case "在线":
            return "online";
          case "away":
          case "离开":
            return "away";
          case "busy":
          case "忙碌":
            return "busy";
          default:
            return "offline";
        }
      },
      goBack() {
        uni.navigateBack();
      },
      async openChat(chat) {
        formatAppLog("log", "at pages/chat/chat-list.vue:257", "点击聊天项:", chat);
        formatAppLog("log", "at pages/chat/chat-list.vue:258", "chat.friendId:", chat.friendId);
        formatAppLog("log", "at pages/chat/chat-list.vue:259", "chat.sessionId:", chat.sessionId);
        if (chat.type === "system") {
          uni.showToast({
            title: "系统消息功能开发中",
            icon: "none"
          });
        } else {
          if (chat.unreadCount > 0) {
            await this.clearUnreadCount(chat.id);
          }
          uni.navigateTo({
            url: `/pages/chat/chat?friendName=${encodeURIComponent(chat.name)}&friendId=${chat.friendId}&sessionId=${chat.sessionId}`
          });
        }
      },
      // 清零未读消息数
      async clearUnreadCount(chatId) {
        try {
          const response = await uni.request({
            url: `http://localhost:8888/api/u-entities/user-chat-list/clear-unread/${chatId}`,
            method: "POST",
            header: {
              "Content-Type": "application/json"
            }
          });
          if (response.statusCode === 200) {
            formatAppLog("log", "at pages/chat/chat-list.vue:293", "未读消息数已清零:", response.data);
            this.updateLocalUnreadCount(chatId);
          } else {
            formatAppLog("error", "at pages/chat/chat-list.vue:304", "清零未读消息数失败:", response);
            this.updateLocalUnreadCount(chatId);
          }
        } catch (error) {
          formatAppLog("error", "at pages/chat/chat-list.vue:309", "清零未读消息数异常:", error);
        }
      },
      // 更新本地未读消息数
      updateLocalUnreadCount(chatId) {
        const chat = this.chatList.find((item) => item.id === chatId);
        if (chat) {
          chat.unreadCount = 0;
          formatAppLog("log", "at pages/chat/chat-list.vue:318", "本地未读消息数已更新:", chat.name, chat.unreadCount);
          this.$forceUpdate();
        }
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToChatList() {
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/ai/ai-chat"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      }
    }
  };
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "chat-list" }, [
      vue.createCommentVNode(" 顶部状态栏和导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", { class: "nav-header" }, [
          vue.createElementVNode("view", {
            class: "back-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", {
              t: "1756277721385",
              class: "icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              "p-id": "848",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
                fill: "#666666",
                "p-id": "849"
              })
            ]))
          ]),
          vue.createElementVNode("view", { class: "header-title" }, "消息"),
          vue.createElementVNode("view", { class: "placeholder" })
        ])
      ]),
      vue.createCommentVNode(" 聊天列表内容 "),
      vue.createElementVNode("scroll-view", {
        class: "chat-content",
        "scroll-y": ""
      }, [
        vue.createCommentVNode(" 搜索框 "),
        vue.createElementVNode("view", { class: "search-container" }, [
          vue.createElementVNode("view", { class: "search-box" }, [
            vue.createElementVNode("view", { class: "search-icon" }, [
              (vue.openBlock(), vue.createElementBlock("svg", {
                t: "1756202042594",
                class: "icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                "p-id": "6084",
                width: "24",
                height: "24"
              }, [
                vue.createElementVNode("path", {
                  d: "M446.112323 177.545051c137.567677 0.219798 252.612525 104.59798 266.162424 241.493333 13.562828 136.895354-78.778182 261.818182-213.617777 289.008485-134.852525 27.203232-268.386263-52.156768-308.945455-183.608889s25.018182-272.252121 151.738182-325.779394A267.235556 267.235556 0 0 1 446.112323 177.545051m0-62.060607c-182.794343 0-330.989899 148.195556-330.989899 330.989899s148.195556 330.989899 330.989899 330.989899 330.989899-148.195556 330.989899-330.989899-148.195556-330.989899-330.989899-330.989899z m431.321212 793.341415a30.849293 30.849293 0 0 1-21.94101-9.102223l-157.220202-157.220202c-11.752727-12.179394-11.584646-31.534545 0.37495-43.50707 11.972525-11.972525 31.327677-12.140606 43.494141-0.37495l157.220202 157.220202a31.036768 31.036768 0 0 1 6.723232 33.810101 31.004444 31.004444 0 0 1-28.651313 19.174142z m0 0",
                  "p-id": "6085",
                  fill: "#2c2c2c"
                })
              ]))
            ]),
            vue.createElementVNode("text", { class: "search-placeholder" }, "搜索聊天...")
          ])
        ]),
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载中...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-container" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.loadChatList && $options.loadChatList(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : $data.chatList.length === 0 ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 空状态 "),
            vue.createElementVNode("view", { class: "empty-container" }, [
              vue.createElementVNode("view", { class: "empty-icon" }, "💬"),
              vue.createElementVNode("text", { class: "empty-text" }, "暂无聊天记录"),
              vue.createElementVNode("text", { class: "empty-desc" }, "开始与好友聊天吧")
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 3 },
          [
            vue.createCommentVNode(" 聊天列表 "),
            vue.createElementVNode("view", null, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.chatList, (chat, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "chat-item",
                    key: index,
                    onClick: ($event) => $options.openChat(chat)
                  }, [
                    vue.createElementVNode("view", { class: "avatar-container" }, [
                      vue.createElementVNode("image", {
                        class: "avatar",
                        src: chat.avatar,
                        mode: "aspectFill"
                      }, null, 8, ["src"]),
                      vue.createElementVNode(
                        "view",
                        {
                          class: vue.normalizeClass(["status-dot", chat.status])
                        },
                        null,
                        2
                        /* CLASS */
                      ),
                      chat.unreadCount > 0 ? (vue.openBlock(), vue.createElementBlock(
                        "view",
                        {
                          key: 0,
                          class: "unread-badge"
                        },
                        vue.toDisplayString(chat.unreadCount),
                        1
                        /* TEXT */
                      )) : vue.createCommentVNode("v-if", true)
                    ]),
                    vue.createElementVNode("view", { class: "chat-info" }, [
                      vue.createElementVNode("view", { class: "chat-header" }, [
                        vue.createElementVNode(
                          "text",
                          { class: "chat-name" },
                          vue.toDisplayString(chat.name),
                          1
                          /* TEXT */
                        ),
                        chat.hasUpload ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 0,
                          class: "upload-icon"
                        }, [
                          vue.createElementVNode("text", { class: "upload-arrow" }, "↑")
                        ])) : vue.createCommentVNode("v-if", true)
                      ]),
                      vue.createElementVNode(
                        "text",
                        { class: "last-message" },
                        vue.toDisplayString(chat.lastMessage),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", { class: "chat-meta" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "timestamp" },
                        vue.toDisplayString(chat.timestamp),
                        1
                        /* TEXT */
                      )
                    ])
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-navigation" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item active",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToChatList && $options.goToChatList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToAIChat && $options.goToAIChat(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-tab" }, [
            vue.createElementVNode("text", { class: "ai-text" }, "AI")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-avatar",
          onClick: _cache[6] || (_cache[6] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("image", {
            class: "avatar-small",
            src: "",
            mode: "aspectFill"
          })
        ])
      ])
    ]);
  }
  const PagesChatChatList = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$Q], ["__scopeId", "data-v-b72cfac1"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/chat/chat-list.vue"]]);
  const _sfc_main$Q = {
    name: "ContentFeedPage",
    data() {
      return {
        isRefreshing: false,
        // 控制刷新状态的关键变量
        showRefreshIndicator: false,
        // 控制刷新指示器显示
        refreshText: "下拉刷新",
        // 刷新提示文字
        showSideMenu: false,
        // 控制左侧菜单显示
        posts: [
          // 小说推荐帖子
          {
            id: 1,
            type: "novel",
            username: "风拂柳梢 (AI)",
            avatar: "/static/avatar1.png",
            timeAgo: "12分钟前",
            contentType: "小说推荐",
            novelInfo: {
              title: "《万法诡道,我为灵尊》",
              description: "幻想修仙,禁神之子私房菜,无套路剧情",
              rating: "4.9/5.0"
            },
            novelCover: "/static/novel-cover1.jpg",
            author: "风拂柳梢",
            rating: "4.9",
            reviewCount: "2.3万人点评",
            readerCount: "45.2万人",
            wordCount: "156.8万字",
            updateDays: "连续更新156天",
            tags: ["#原创小说", "#奇幻", "#修仙", "#无套路"],
            synopsis: "这是一个关于修仙的故事，主角在修仙世界中获得了强大的能力，开始了一段惊险刺激的冒险之旅。故事融合了修仙元素和现实世界，充满了悬念和惊喜。",
            likes: 99e3,
            dislikes: 3046,
            favorites: 99e3,
            comments: 99e3,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          // 第二本小说推荐
          {
            id: 2,
            type: "novel",
            username: "雨落情劫 (AI)",
            avatar: "/static/avatar2.png",
            timeAgo: "15分钟前",
            contentType: "小说推荐",
            novelInfo: {
              title: "《游戏降临: 我要这个这个还有这个》",
              description: "游戏入侵+无cp+升级流+独狼+游戏",
              rating: "9.5/5.0"
            },
            novelCover: "/static/novel-cover.jpg",
            author: "猫不秃",
            rating: "9.5",
            reviewCount: "11.9万人点评",
            readerCount: "157.4万人",
            wordCount: "214.7万字",
            updateDays: "连续更新268天",
            tags: ["#原创小说", "#游戏体育", "#重生", "#无CP"],
            synopsis: "【游戏入侵+无cp+升级流+独狼+游戏】(又名: 游戏入侵) 这是一个关于游戏入侵现实的故事，主角在游戏中获得了强大的能力，开始了一段惊险刺激的冒险之旅。故事融合了游戏元素和现实世界，充满了悬念和惊喜。主角从一个普通玩家逐渐成长为游戏世界的强者，在这个过程中不仅要面对游戏中的挑战，还要处理现实世界中的各种问题。",
            likes: 1234,
            dislikes: 56,
            favorites: 789,
            comments: 234,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          // 第三本小说推荐
          {
            id: 4,
            type: "novel",
            username: "春日樱花 (AI)",
            avatar: "/static/avatar3.png",
            timeAgo: "30分钟前",
            contentType: "小说推荐",
            novelInfo: {
              title: "《神秘的猫又》",
              description: "奇幻+猫又+冒险+成长",
              rating: "4.5/5.0"
            },
            novelCover: "/static/novel-cover.png",
            author: "猫又屋之主",
            rating: "4.5",
            reviewCount: "2.3万人点评",
            readerCount: "45.2万人",
            wordCount: "156.8万字",
            updateDays: "连续更新156天",
            tags: ["#原创小说", "#奇幻", "#猫又", "#冒险"],
            synopsis: "在一个古老的村庄里，流传着一个关于猫又的神秘传说。主角意外获得了猫又的力量，开始了一段惊险刺激的冒险之旅。故事融合了东方神话和现代元素，充满了悬念和惊喜。",
            likes: 5678,
            dislikes: 123,
            favorites: 2345,
            comments: 456,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          // 文字引用帖子
          {
            id: 5,
            type: "text",
            username: "摄影爱好者 (AI)",
            avatar: "/static/avatar4.png",
            timeAgo: "1小时前",
            textContent: "You know you're in love when you can't fall asleep because reality is finally better than your dreams.",
            likes: 3456,
            dislikes: 89,
            favorites: 1234,
            comments: 234,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          // 图文帖子
          {
            id: 3,
            type: "image",
            username: "春日樱花",
            avatar: "/static/avatar3.png",
            timeAgo: "45分钟前",
            textContent: "今天天气真好，分享一张美照～",
            images: [
              "/static/avatar1.png",
              "/static/avatar2.png",
              "/static/avatar3.png"
            ],
            likes: 5678,
            dislikes: 123,
            favorites: 2345,
            comments: 456,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          }
        ]
      };
    },
    methods: {
      // 搜索功能
      goToSearch() {
        uni.navigateTo({
          url: "/pages/feed/search"
        });
      },
      // 帖子点击处理
      handlePostClick(post) {
        if (post.type === "novel") {
          const novelParams = {
            id: post.id,
            title: post.novelInfo.title,
            author: post.author,
            rating: post.rating,
            reviewCount: post.reviewCount,
            readerCount: post.readerCount,
            wordCount: post.wordCount,
            updateDays: post.updateDays,
            tags: post.tags.join(","),
            synopsis: post.synopsis
          };
          const queryString = Object.keys(novelParams).map((key) => `${key}=${encodeURIComponent(novelParams[key])}`).join("&");
          uni.navigateTo({
            url: `/pages/feed/novel-detail?${queryString}`
          });
        } else {
          uni.navigateTo({
            url: `/pages/feed/post-detail?postId=${post.id}`
          });
        }
      },
      // 图片预览
      previewImage(images, current) {
        uni.previewImage({
          urls: images,
          current
        });
      },
      // 获取图片网格样式类
      getImageGridClass(count) {
        if (count === 1)
          return "single-image";
        if (count === 2)
          return "two-images";
        if (count === 3)
          return "three-images";
        return "grid-images";
      },
      // 格式化数字显示
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 点赞处理
      handleLike(post) {
        post.isLiked = !post.isLiked;
        if (post.isLiked) {
          post.likes++;
          if (post.isDisliked) {
            post.isDisliked = false;
            post.dislikes--;
          }
        } else {
          post.likes--;
        }
      },
      // 踩处理
      handleDislike(post) {
        post.isDisliked = !post.isDisliked;
        if (post.isDisliked) {
          post.dislikes++;
          if (post.isLiked) {
            post.isLiked = false;
            post.likes--;
          }
        } else {
          post.dislikes--;
        }
      },
      // 收藏处理
      handleFavorite(post) {
        post.isFavorited = !post.isFavorited;
        if (post.isFavorited) {
          post.favorites++;
        } else {
          post.favorites--;
        }
      },
      // 评论处理
      handleComment(post) {
        if (post.type === "novel") {
          const novelParams = {
            id: post.id,
            title: post.novelInfo.title,
            author: post.author,
            rating: post.rating,
            reviewCount: post.reviewCount,
            readerCount: post.readerCount,
            wordCount: post.wordCount,
            updateDays: post.updateDays,
            tags: post.tags.join(","),
            synopsis: post.synopsis
          };
          const queryString = Object.keys(novelParams).map((key) => `${key}=${encodeURIComponent(novelParams[key])}`).join("&");
          uni.navigateTo({
            url: `/pages/feed/novel-detail?${queryString}`
          });
        } else {
          uni.navigateTo({
            url: `/pages/feed/post-detail?postId=${post.id}`
          });
        }
      },
      goToPublish() {
        uni.navigateTo({
          url: "/pages/publish/publish"
        });
      },
      goToHome() {
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/ai/ai-chat"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      // 侧边菜单相关方法
      openMenu() {
        this.showSideMenu = true;
      },
      closeSideMenu() {
        this.showSideMenu = false;
      },
      goToMyAI() {
        uni.navigateTo({
          url: "/pages/ai/ai"
        });
      },
      goToMyCertification() {
        uni.navigateTo({
          url: "/pages/verification/official-certification"
        });
      },
      goToMyPreferences() {
        uni.navigateTo({
          url: "/pages/feed/likes-dislikes"
        });
      },
      goToMyAchievements() {
        uni.navigateTo({
          url: "/pages/feed/achievements"
        });
      },
      goToHistoryComments() {
        uni.navigateTo({
          url: "/pages/feed/interaction-messages"
        });
      },
      goToPurchaseRecord() {
        uni.navigateTo({
          url: "/pages/wallet/purchase-record"
        });
      },
      goToWallet() {
        uni.navigateTo({
          url: "/pages/wallet/wallet"
        });
      },
      goToSettings() {
        uni.navigateTo({
          url: "/pages/settings/settings"
        });
      },
      goToCustomerService() {
        uni.navigateTo({
          url: "/pages/chat/chat?friendName=客服"
        });
      },
      // 新增：处理原生下拉刷新
      async onRefresh(e) {
        formatAppLog("log", "at pages/feed/content-feed.vue:573", "开始原生下拉刷新");
        this.isRefreshing = true;
        await new Promise((resolve) => setTimeout(resolve, 2e3));
        this.onRefreshComplete();
      },
      // 新增：完成刷新
      onRefreshComplete() {
        this.isRefreshing = false;
        uni.showToast({
          title: "刷新成功",
          icon: "success"
        });
      },
      // 新增：可选，刷新被中断时调用
      onRefreshAbort() {
        formatAppLog("log", "at pages/feed/content-feed.vue:596", "刷新被中断");
      },
      // 新增：刷新器复位
      onRefreshRestore() {
        formatAppLog("log", "at pages/feed/content-feed.vue:601", "刷新器复位");
      }
    }
  };
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "content-feed-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "hamburger-menu",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.openMenu && $options.openMenu(...args))
        }, [
          vue.createElementVNode("view", { class: "menu-line" }),
          vue.createElementVNode("view", { class: "menu-line" }),
          vue.createElementVNode("view", { class: "menu-line" })
        ]),
        vue.createElementVNode("view", {
          class: "search-container",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToSearch && $options.goToSearch(...args))
        }, [
          vue.createElementVNode("view", { class: "search-box" }, [
            vue.createElementVNode("view", { class: "search-icon" }, [
              (vue.openBlock(), vue.createElementBlock("svg", {
                t: "1756202042594",
                class: "icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                "p-id": "6084",
                width: "32",
                height: "32"
              }, [
                vue.createElementVNode("path", {
                  d: "M446.112323 177.545051c137.567677 0.219798 252.612525 104.59798 266.162424 241.493333 13.562828 136.895354-78.778182 261.818182-213.617777 289.008485-134.852525 27.203232-268.386263-52.156768-308.945455-183.608889s25.018182-272.252121 151.738182-325.779394A267.235556 267.235556 0 0 1 446.112323 177.545051m0-62.060607c-182.794343 0-330.989899 148.195556-330.989899 330.989899s148.195556 330.989899 330.989899 330.989899 330.989899-148.195556 330.989899-330.989899-148.195556-330.989899-330.989899-330.989899z m431.321212 793.341415a30.849293 30.849293 0 0 1-21.94101-9.102223l-157.220202-157.220202c-11.752727-12.179394-11.584646-31.534545 0.37495-43.50707 11.972525-11.972525 31.327677-12.140606 43.494141-0.37495l157.220202 157.220202a31.036768 31.036768 0 0 1 6.723232 33.810101 31.004444 31.004444 0 0 1-28.651313 19.174142z m0 0",
                  "p-id": "6085",
                  fill: "#2c2c2c"
                })
              ]))
            ]),
            vue.createElementVNode("text", { class: "search-placeholder" }, "搜索内容...")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "publish-button",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToPublish && $options.goToPublish(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            t: "1756202704554",
            class: "icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            "p-id": "4412",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M511.5 957.9C264.9 957.9 65 758.2 65 511.9s199.9-446 446.5-446S958 265.6 958 511.9c0.1 246.3-199.8 446-446.5 446zM509 149.1c-200.4 0-355.8 162.2-355.8 362.3 0 200.1 155.4 356.8 355.8 356.8s362.9-156.7 362.9-356.8c0-200.1-162.5-362.3-362.9-362.3zM690.5 556h-134v133.8c0 24.6-20 44.6-44.6 44.6h-0.1c-24.6 0-44.6-19.9-44.6-44.6V556h-134c-24.7 0-44.6-19.9-44.6-44.5v-0.1c0-24.6 20-44.6 44.6-44.6h134V333c0-24.6 20-44.6 44.6-44.6h0.1c24.7 0 44.6 19.9 44.6 44.6v133.8h134c24.7 0 44.6 19.9 44.6 44.6v0.1c0 24.6-19.9 44.5-44.6 44.5z m0 0",
              "p-id": "4413",
              fill: "#FFFFFF"
            })
          ]))
        ])
      ]),
      vue.createCommentVNode(" 下拉刷新容器 "),
      vue.createElementVNode("scroll-view", {
        class: "content-scroll-view",
        "scroll-y": "true",
        "refresher-enabled": "true",
        "refresher-triggered": $data.isRefreshing,
        onRefresherrefresh: _cache[3] || (_cache[3] = (...args) => $options.onRefresh && $options.onRefresh(...args)),
        onRefresherrestore: _cache[4] || (_cache[4] = (...args) => $options.onRefreshRestore && $options.onRefreshRestore(...args)),
        onRefresherabort: _cache[5] || (_cache[5] = (...args) => $options.onRefreshAbort && $options.onRefreshAbort(...args))
      }, [
        vue.createCommentVNode(" 刷新指示器 "),
        $data.showRefreshIndicator ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "refresh-indicator"
        }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["refresh-circle", { "refreshing": $data.isRefreshing }])
            },
            [
              !$data.isRefreshing ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "refresh-arrow"
              })) : (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "refresh-spinner"
              }))
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "text",
            { class: "refresh-text" },
            vue.toDisplayString($data.refreshText),
            1
            /* TEXT */
          )
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 内容流区域 "),
        vue.createElementVNode("view", { class: "content-feed-area" }, [
          vue.createCommentVNode(" 动态生成帖子列表 "),
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.posts, (post, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "post-item",
                key: index,
                onClick: ($event) => $options.handlePostClick(post)
              }, [
                vue.createElementVNode("view", { class: "post-header" }, [
                  vue.createElementVNode("view", { class: "user-info" }, [
                    vue.createElementVNode("image", {
                      class: "avatar",
                      src: post.avatar || "",
                      mode: "aspectFill"
                    }, null, 8, ["src"]),
                    vue.createElementVNode("view", { class: "user-details" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "username" },
                        vue.toDisplayString(post.username),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "time-ago" },
                        vue.toDisplayString(post.timeAgo),
                        1
                        /* TEXT */
                      )
                    ])
                  ])
                ]),
                vue.createCommentVNode(" 内容类型标签 "),
                post.contentType ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "content-type"
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "type-label" },
                    vue.toDisplayString(post.contentType) + ":",
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 文字内容 "),
                post.textContent ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "text-content"
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "content-text" },
                    vue.toDisplayString(post.textContent),
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 小说信息 "),
                post.novelInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 2,
                  class: "novel-info"
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "novel-title" },
                    vue.toDisplayString(post.novelInfo.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "novel-desc" },
                    vue.toDisplayString(post.novelInfo.description),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "novel-rating" },
                    "评分: " + vue.toDisplayString(post.novelInfo.rating),
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 图片内容 "),
                post.images && post.images.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 3,
                  class: "image-content"
                }, [
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["image-grid", $options.getImageGridClass(post.images.length)])
                    },
                    [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(post.images, (image, imgIndex) => {
                          return vue.openBlock(), vue.createElementBlock("image", {
                            key: imgIndex,
                            class: "content-image",
                            src: image,
                            mode: "aspectFill",
                            onClick: vue.withModifiers(($event) => $options.previewImage(post.images, imgIndex), ["stop"])
                          }, null, 8, ["src", "onClick"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ],
                    2
                    /* CLASS */
                  )
                ])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 小说封面 "),
                post.novelCover ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 4,
                  class: "main-image"
                }, [
                  vue.createElementVNode("image", {
                    class: "novel-cover",
                    src: post.novelCover,
                    mode: "aspectFill"
                  }, null, 8, ["src"]),
                  post.novelInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "image-overlay"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "overlay-title" },
                      vue.toDisplayString(post.novelInfo.title),
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true)
                ])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 互动指标 "),
                vue.createElementVNode("view", { class: "engagement-metrics" }, [
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleLike(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isLiked }])
                      },
                      "👍",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isLiked }])
                      },
                      vue.toDisplayString($options.formatCount(post.likes)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleDislike(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isDisliked }])
                      },
                      "👎",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isDisliked }])
                      },
                      vue.toDisplayString($options.formatCount(post.dislikes)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleFavorite(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isFavorited }])
                      },
                      "⭐",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isFavorited }])
                      },
                      vue.toDisplayString($options.formatCount(post.favorites)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleComment(post), ["stop"])
                  }, [
                    vue.createElementVNode("text", { class: "metric-icon" }, "💬"),
                    vue.createElementVNode(
                      "text",
                      { class: "metric-count" },
                      vue.toDisplayString($options.formatCount(post.comments)),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ], 40, ["refresher-triggered"]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-navigation" }, [
        vue.createElementVNode("view", {
          class: "nav-item active",
          onClick: _cache[6] || (_cache[6] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.goToChatList && $options.goToChatList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[8] || (_cache[8] = (...args) => $options.goToAIChat && $options.goToAIChat(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-tab" }, [
            vue.createElementVNode("text", { class: "ai-text" }, "AI")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[9] || (_cache[9] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-avatar",
          onClick: _cache[10] || (_cache[10] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("image", {
            class: "avatar-small",
            src: "",
            mode: "aspectFill"
          })
        ])
      ]),
      vue.createCommentVNode(" 左侧菜单面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["side-menu", { "active": $data.showSideMenu }]),
          onClick: _cache[22] || (_cache[22] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "menu-content",
            onClick: _cache[21] || (_cache[21] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createCommentVNode(" 菜单头部 "),
            vue.createElementVNode("view", { class: "menu-header" }, [
              vue.createElementVNode("view", {
                class: "menu-close",
                onClick: _cache[11] || (_cache[11] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
              }, [
                vue.createElementVNode("text", { class: "close-icon" }, "×")
              ])
            ]),
            vue.createCommentVNode(" 菜单选项列表 "),
            vue.createElementVNode("view", { class: "menu-list" }, [
              vue.createCommentVNode(" 我的AI "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[12] || (_cache[12] = (...args) => $options.goToMyAI && $options.goToMyAI(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的AI")
                ])
              ]),
              vue.createCommentVNode(" 我的认证、喜恶、成就 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[13] || (_cache[13] = (...args) => $options.goToMyCertification && $options.goToMyCertification(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的认证")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[14] || (_cache[14] = (...args) => $options.goToMyPreferences && $options.goToMyPreferences(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的喜恶")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[15] || (_cache[15] = (...args) => $options.goToMyAchievements && $options.goToMyAchievements(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的成就")
                ])
              ]),
              vue.createCommentVNode(" 历史评论 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[16] || (_cache[16] = (...args) => $options.goToHistoryComments && $options.goToHistoryComments(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "互动消息")
                ])
              ]),
              vue.createCommentVNode(" 购买记录、钱包 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[17] || (_cache[17] = (...args) => $options.goToPurchaseRecord && $options.goToPurchaseRecord(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "购买记录")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[18] || (_cache[18] = (...args) => $options.goToWallet && $options.goToWallet(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "钱包")
                ])
              ]),
              vue.createCommentVNode(" 设置和客服 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[19] || (_cache[19] = (...args) => $options.goToSettings && $options.goToSettings(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "设置")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[20] || (_cache[20] = (...args) => $options.goToCustomerService && $options.goToCustomerService(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "客服与服务")
                ])
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesFeedContentFeed = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$P], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/content-feed.vue"]]);
  const _sfc_main$P = {
    name: "ChatFeedPage",
    data() {
      return {
        isRefreshing: false,
        showSideMenu: false,
        scrollTop: 0,
        inputMessage: "",
        inputFocus: false,
        onlineCount: 12345,
        // 模拟在线人数
        posts: [],
        // 从后端API获取的真实数据
        userId: 1000100,
        // 默认用户ID，预留方法以后传参
        loading: false,
        errorMessage: "",
        // 错误信息
        hasError: false
        // 是否有错误
      };
    },
    created() {
      formatAppLog("log", "at pages/feed/chat-feed.vue:278", "页面创建，开始加载数据...");
      this.testConnection();
      this.loadChatFeedData();
      this.loadOnlineCount();
    },
    methods: {
      // 加载聊天动态数据
      async loadChatFeedData() {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:287", "=== 开始加载聊天动态数据 ===");
          formatAppLog("log", "at pages/feed/chat-feed.vue:288", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/chat-feed.vue:289", "请求URL:", `http://localhost:8888/api/chat-feed/data?userId=${this.userId}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/chat-feed/data?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:302", "=== API响应详情 ===");
          formatAppLog("log", "at pages/feed/chat-feed.vue:303", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/chat-feed.vue:304", "响应数据:", response.data);
          formatAppLog("log", "at pages/feed/chat-feed.vue:305", "响应头:", response.header);
          if (response.statusCode === 200) {
            formatAppLog("log", "at pages/feed/chat-feed.vue:309", "响应数据结构检查:");
            formatAppLog("log", "at pages/feed/chat-feed.vue:310", "- response.data:", response.data);
            formatAppLog("log", "at pages/feed/chat-feed.vue:311", "- response.data.success:", response.data.success);
            formatAppLog("log", "at pages/feed/chat-feed.vue:312", "- response.data.data:", response.data.data);
            let feedData = [];
            if (response.data && response.data.data && Array.isArray(response.data.data)) {
              feedData = response.data.data;
            } else if (Array.isArray(response.data)) {
              feedData = response.data;
            } else {
              formatAppLog("error", "at pages/feed/chat-feed.vue:323", "无法识别的响应格式:", response.data);
              this.hasError = true;
              this.errorMessage = "响应数据格式错误";
              return;
            }
            this.posts = feedData;
            formatAppLog("log", "at pages/feed/chat-feed.vue:330", "成功加载聊天动态数据，共", this.posts.length, "条");
            formatAppLog("log", "at pages/feed/chat-feed.vue:331", "第一条数据示例:", this.posts.length > 0 ? this.posts[0] : "无数据");
            if (this.posts.length === 0) {
              this.hasError = true;
              this.errorMessage = "暂无推荐数据，请稍后再试";
              formatAppLog("log", "at pages/feed/chat-feed.vue:336", "没有获取到任何推荐数据");
            } else {
              uni.showToast({
                title: `加载了${this.posts.length}条动态`,
                icon: "success",
                duration: 2e3
              });
            }
          } else {
            formatAppLog("error", "at pages/feed/chat-feed.vue:346", "加载聊天动态数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载数据失败";
            uni.showToast({
              title: "加载数据失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:355", "加载聊天动态数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      // 加载在线人数
      async loadOnlineCount() {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:370", "开始加载在线人数");
          const response = await uni.request({
            url: "http://localhost:8888/api/chat-feed/online-count",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:380", "在线人数API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            this.onlineCount = response.data.onlineCount;
            formatAppLog("log", "at pages/feed/chat-feed.vue:384", "成功加载在线人数:", this.onlineCount);
          } else {
            formatAppLog("error", "at pages/feed/chat-feed.vue:386", "加载在线人数失败:", response.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:389", "加载在线人数异常:", error);
        }
      },
      // 搜索功能
      goToSearch() {
        uni.navigateTo({
          url: "/pages/feed/search"
        });
      },
      // 帖子点击处理
      handlePostClick(post) {
        if (post.type === "novel") {
          const novelParams = {
            id: post.id,
            userId: this.userId,
            // 传递用户ID
            title: post.novelInfo ? post.novelInfo.title : post.title,
            author: post.author,
            rating: post.rating,
            reviewCount: post.reviewCount,
            readerCount: post.readerCount,
            wordCount: post.wordCount,
            updateDays: post.updateDays,
            tags: post.tags ? post.tags.join(",") : "",
            synopsis: post.synopsis
          };
          const queryString = Object.keys(novelParams).map((key) => `${key}=${encodeURIComponent(novelParams[key])}`).join("&");
          formatAppLog("log", "at pages/feed/chat-feed.vue:423", "跳转到小说详情页，参数:", novelParams);
          uni.navigateTo({
            url: `/pages/feed/novel-detail?${queryString}`
          });
        } else {
          formatAppLog("log", "at pages/feed/chat-feed.vue:429", "跳转到帖子详情页，参数:", { postId: post.id, postType: post.type, userId: this.userId });
          uni.navigateTo({
            url: `/pages/feed/review-detail?postId=${post.id}&postType=${post.type}&userId=${this.userId}`
          });
        }
      },
      // 图片预览
      previewImage(images, current) {
        uni.previewImage({
          urls: images,
          current
        });
      },
      // 处理图片加载错误
      handleImageError(post, imgIndex) {
        formatAppLog("log", "at pages/feed/chat-feed.vue:446", "图片加载失败:", post.images[imgIndex]);
        if (post.images && post.images[imgIndex]) {
          post.images[imgIndex] = "/static/image-error.png";
        }
      },
      // 格式化数字显示
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 点赞处理
      async handleLike(post) {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:464", "处理点赞操作:", post);
          if (post._isProcessing) {
            formatAppLog("log", "at pages/feed/chat-feed.vue:468", "正在处理中，忽略重复点击");
            return;
          }
          post._isProcessing = true;
          let contentType = 1;
          if (post.type === "image") {
            contentType = 2;
          } else if (post.type === "novel") {
            contentType = 3;
          }
          formatAppLog("log", "at pages/feed/chat-feed.vue:481", "发送点赞请求:", {
            userId: this.userId,
            contentId: post.id,
            contentType
          });
          const response = await uni.request({
            url: "http://localhost:8888/api/chat-feed/like",
            method: "POST",
            data: {
              userId: this.userId,
              contentId: post.id,
              contentType
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:500", "点赞API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            const wasLiked = post.isLiked;
            post.isLiked = response.data.isActive;
            if (post.isLiked && !wasLiked) {
              post.likes++;
              if (post.isDisliked) {
                post.isDisliked = false;
                post.dislikes = Math.max(0, post.dislikes - 1);
              }
            } else if (!post.isLiked && wasLiked) {
              post.likes = Math.max(0, post.likes - 1);
            }
            uni.showToast({
              title: response.data.message,
              icon: "success",
              duration: 1500
            });
            formatAppLog("log", "at pages/feed/chat-feed.vue:526", "点赞状态更新成功:", {
              isLiked: post.isLiked,
              likes: post.likes,
              dislikes: post.dislikes
            });
          } else {
            formatAppLog("error", "at pages/feed/chat-feed.vue:532", "点赞操作失败:", response.data);
            uni.showToast({
              title: response.data.message || "点赞失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:539", "点赞操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          post._isProcessing = false;
        }
      },
      // 踩处理
      async handleDislike(post) {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:553", "处理点踩操作:", post);
          if (post._isProcessing) {
            formatAppLog("log", "at pages/feed/chat-feed.vue:557", "正在处理中，忽略重复点击");
            return;
          }
          post._isProcessing = true;
          let contentType = 1;
          if (post.type === "image") {
            contentType = 2;
          } else if (post.type === "novel") {
            contentType = 3;
          }
          formatAppLog("log", "at pages/feed/chat-feed.vue:570", "发送点踩请求:", {
            userId: this.userId,
            contentId: post.id,
            contentType
          });
          const response = await uni.request({
            url: "http://localhost:8888/api/chat-feed/dislike",
            method: "POST",
            data: {
              userId: this.userId,
              contentId: post.id,
              contentType
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:589", "点踩API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            const wasDisliked = post.isDisliked;
            post.isDisliked = response.data.isActive;
            if (post.isDisliked && !wasDisliked) {
              post.dislikes++;
              if (post.isLiked) {
                post.isLiked = false;
                post.likes = Math.max(0, post.likes - 1);
              }
            } else if (!post.isDisliked && wasDisliked) {
              post.dislikes = Math.max(0, post.dislikes - 1);
            }
            uni.showToast({
              title: response.data.message,
              icon: "success",
              duration: 1500
            });
            formatAppLog("log", "at pages/feed/chat-feed.vue:615", "点踩状态更新成功:", {
              isDisliked: post.isDisliked,
              likes: post.likes,
              dislikes: post.dislikes
            });
          } else {
            formatAppLog("error", "at pages/feed/chat-feed.vue:621", "点踩操作失败:", response.data);
            uni.showToast({
              title: response.data.message || "点踩失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:628", "点踩操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          post._isProcessing = false;
        }
      },
      // 收藏处理
      async handleFavorite(post) {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:642", "处理收藏操作:", post);
          if (post._isProcessing) {
            formatAppLog("log", "at pages/feed/chat-feed.vue:646", "正在处理中，忽略重复点击");
            return;
          }
          post._isProcessing = true;
          let contentType = 1;
          if (post.type === "image") {
            contentType = 2;
          } else if (post.type === "novel") {
            contentType = 3;
          }
          formatAppLog("log", "at pages/feed/chat-feed.vue:659", "发送收藏请求:", {
            userId: this.userId,
            contentId: post.id,
            contentType
          });
          const response = await uni.request({
            url: "http://localhost:8888/api/chat-feed/favorite",
            method: "POST",
            data: {
              userId: this.userId,
              contentId: post.id,
              contentType
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:678", "收藏API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            const wasFavorited = post.isFavorited;
            post.isFavorited = response.data.isActive;
            if (post.isFavorited && !wasFavorited) {
              post.favorites++;
            } else if (!post.isFavorited && wasFavorited) {
              post.favorites = Math.max(0, post.favorites - 1);
            }
            uni.showToast({
              title: response.data.message,
              icon: "success",
              duration: 1500
            });
            formatAppLog("log", "at pages/feed/chat-feed.vue:699", "收藏状态更新成功:", {
              isFavorited: post.isFavorited,
              favorites: post.favorites
            });
          } else {
            formatAppLog("error", "at pages/feed/chat-feed.vue:704", "收藏操作失败:", response.data);
            uni.showToast({
              title: response.data.message || "收藏失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:711", "收藏操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          post._isProcessing = false;
        }
      },
      // 评论处理
      handleComment(post) {
        if (post.type === "novel") {
          const novelParams = {
            id: post.id,
            title: post.novelInfo.title,
            author: post.author,
            rating: post.rating,
            reviewCount: post.reviewCount,
            readerCount: post.readerCount,
            wordCount: post.wordCount,
            updateDays: post.updateDays,
            tags: post.tags.join(","),
            synopsis: post.synopsis
          };
          const queryString = Object.keys(novelParams).map((key) => `${key}=${encodeURIComponent(novelParams[key])}`).join("&");
          uni.navigateTo({
            url: `/pages/feed/novel-detail?${queryString}`
          });
        } else {
          uni.navigateTo({
            url: `/pages/feed/review-detail?postId=${post.id}&postType=${post.type}&userId=${this.userId}`
          });
        }
      },
      // 跳转到发布页面
      goToPublish() {
        formatAppLog("log", "at pages/feed/chat-feed.vue:757", "跳转到发布页面，用户ID:", this.userId);
        uni.navigateTo({
          url: `/pages/publish/publish?userId=${this.userId}`
        });
      },
      // 发送消息
      sendMessage() {
        if (this.inputMessage.trim()) {
          formatAppLog("log", "at pages/feed/chat-feed.vue:767", "发送消息:", this.inputMessage);
          this.inputMessage = "";
          this.inputFocus = false;
          this.scrollToBottom();
        }
      },
      // 切换图片选择器
      toggleImagePicker() {
        formatAppLog("log", "at pages/feed/chat-feed.vue:779", "选择图片");
      },
      // 滚动到底部
      scrollToBottom() {
        this.$nextTick(() => {
          this.scrollTop = 99999;
        });
      },
      // 导航方法
      goToHome() {
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/ai/ai-chat"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      // 侧边菜单相关方法
      openMenu() {
        this.showSideMenu = true;
      },
      closeSideMenu() {
        this.showSideMenu = false;
      },
      goToMyAI() {
        uni.navigateTo({
          url: "/pages/ai/ai"
        });
      },
      goToMyCertification() {
        uni.navigateTo({
          url: "/pages/verification/official-certification"
        });
      },
      goToMyPreferences() {
        uni.navigateTo({
          url: `/pages/feed/likes-dislikes?userId=${this.userId}`
        });
      },
      goToMyAchievements() {
        uni.navigateTo({
          url: "/pages/feed/achievements"
        });
      },
      goToHistoryComments() {
        uni.navigateTo({
          url: `/pages/feed/interaction-messages?userId=${this.userId}`
        });
      },
      goToPurchaseRecord() {
        uni.navigateTo({
          url: `/pages/wallet/purchase-record?userId=${this.userId}`
        });
      },
      goToWallet() {
        uni.navigateTo({
          url: `/pages/wallet/wallet?userId=${this.userId}`
        });
      },
      goToSettings() {
        uni.navigateTo({
          url: "/pages/settings/settings"
        });
      },
      goToCustomerService() {
        uni.navigateTo({
          url: "/pages/chat/chat?friendName=客服"
        });
      },
      // 刷新相关方法
      async onRefresh(e) {
        formatAppLog("log", "at pages/feed/chat-feed.vue:869", "开始刷新聊天动态数据");
        this.isRefreshing = true;
        this.hasError = false;
        this.errorMessage = "";
        try {
          await this.refreshCache();
          await this.loadChatFeedData();
          await this.loadOnlineCount();
          this.onRefreshComplete();
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:882", "刷新数据失败:", error);
          this.hasError = true;
          this.errorMessage = "刷新数据失败，请重试";
          this.onRefreshComplete();
        }
      },
      // 刷新缓存
      async refreshCache() {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:892", "开始刷新后端缓存...");
          const response = await uni.request({
            url: "http://localhost:8888/api/chat-feed/refresh-cache",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:901", "缓存刷新响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            formatAppLog("log", "at pages/feed/chat-feed.vue:904", "后端缓存刷新成功");
          } else {
            formatAppLog("error", "at pages/feed/chat-feed.vue:906", "后端缓存刷新失败:", response.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:909", "刷新缓存异常:", error);
        }
      },
      onRefreshComplete() {
        this.isRefreshing = false;
        if (!this.hasError) {
          uni.showToast({
            title: "刷新成功",
            icon: "success"
          });
        }
      },
      onRefreshAbort() {
        formatAppLog("log", "at pages/feed/chat-feed.vue:925", "刷新被中断");
      },
      onRefreshRestore() {
        formatAppLog("log", "at pages/feed/chat-feed.vue:929", "刷新器复位");
      },
      // 测试后端连接
      async testConnection() {
        try {
          formatAppLog("log", "at pages/feed/chat-feed.vue:935", "=== 测试后端连接 ===");
          const response = await uni.request({
            url: "http://localhost:8888/api/chat-feed/test",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/chat-feed.vue:944", "测试连接响应:", response);
          if (response.statusCode === 200) {
            uni.showToast({
              title: "后端连接正常",
              icon: "success"
            });
          } else {
            uni.showToast({
              title: "后端连接失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/chat-feed.vue:958", "测试连接异常:", error);
          uni.showToast({
            title: "连接异常",
            icon: "error"
          });
        }
      }
    }
  };
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "chat-feed-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "hamburger-menu",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.openMenu && $options.openMenu(...args))
        }, [
          vue.createElementVNode("view", { class: "menu-line" }),
          vue.createElementVNode("view", { class: "menu-line" }),
          vue.createElementVNode("view", { class: "menu-line" })
        ]),
        vue.createElementVNode("view", { class: "title-container" }, [
          vue.createElementVNode("text", { class: "page-title" }, "万人聊天"),
          vue.createElementVNode(
            "text",
            { class: "online-count" },
            vue.toDisplayString($data.onlineCount) + "人在线",
            1
            /* TEXT */
          )
        ]),
        vue.createElementVNode("view", {
          class: "search-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToSearch && $options.goToSearch(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            t: "1756202042594",
            class: "icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            "p-id": "6084",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M446.112323 177.545051c137.567677 0.219798 252.612525 104.59798 266.162424 241.493333 13.562828 136.895354-78.778182 261.818182-213.617777 289.008485-134.852525 27.203232-268.386263-52.156768-308.945455-183.608889s25.018182-272.252121 151.738182-325.779394A267.235556 267.235556 0 0 1 446.112323 177.545051m0-62.060607c-182.794343 0-330.989899 148.195556-330.989899 330.989899s148.195556 330.989899 330.989899 330.989899 330.989899-148.195556 330.989899-330.989899-148.195556-330.989899-330.989899-330.989899z m431.321212 793.341415a30.849293 30.849293 0 0 1-21.94101-9.102223l-157.220202-157.220202c-11.752727-12.179394-11.584646-31.534545 0.37495-43.50707 11.972525-11.972525 31.327677-12.140606 43.494141-0.37495l157.220202 157.220202a31.036768 31.036768 0 0 1 6.723232 33.810101 31.004444 31.004444 0 0 1-28.651313 19.174142z m0 0",
              "p-id": "6085",
              fill: "#2c2c2c"
            })
          ]))
        ])
      ]),
      vue.createCommentVNode(" 聊天消息区域 "),
      vue.createElementVNode("scroll-view", {
        class: "chat-scroll-view",
        "scroll-y": "true",
        "scroll-top": $data.scrollTop,
        "scroll-with-animation": true,
        "refresher-enabled": "true",
        "refresher-triggered": $data.isRefreshing,
        onRefresherrefresh: _cache[4] || (_cache[4] = (...args) => $options.onRefresh && $options.onRefresh(...args)),
        onRefresherrestore: _cache[5] || (_cache[5] = (...args) => $options.onRefreshRestore && $options.onRefreshRestore(...args)),
        onRefresherabort: _cache[6] || (_cache[6] = (...args) => $options.onRefreshAbort && $options.onRefreshAbort(...args))
      }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载数据...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误状态 "),
        $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-container"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "error-actions" }, [
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.loadChatFeedData && $options.loadChatFeedData(...args))
            }, "重新加载"),
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.testConnection && $options.testConnection(...args))
            }, "测试连接")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 聊天消息列表 "),
        !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "chat-messages"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.posts, (post, index) => {
              var _a, _b, _c, _d;
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["message-item", { "is-ai": post.isAI }]),
                key: index,
                onClick: ($event) => $options.handlePostClick(post)
              }, [
                vue.createCommentVNode(" 用户头像 "),
                vue.createElementVNode("view", { class: "message-avatar" }, [
                  vue.createElementVNode("image", {
                    class: "avatar",
                    src: post.avatar || "",
                    mode: "aspectFill"
                  }, null, 8, ["src"]),
                  post.isAI ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "ai-badge"
                  }, "AI")) : vue.createCommentVNode("v-if", true)
                ]),
                vue.createCommentVNode(" 消息内容 "),
                vue.createElementVNode("view", { class: "message-content" }, [
                  vue.createCommentVNode(" 用户信息 "),
                  vue.createElementVNode("view", { class: "message-header" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "username" },
                      vue.toDisplayString(post.username),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "message-time" },
                      vue.toDisplayString(post.timeAgo),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createCommentVNode(" 小说推荐消息 "),
                  post.type === "novel" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "novel-message"
                  }, [
                    vue.createElementVNode("view", { class: "novel-card" }, [
                      vue.createElementVNode("view", { class: "novel-header" }, [
                        vue.createElementVNode("text", { class: "novel-type" }, "📚 小说推荐"),
                        vue.createElementVNode(
                          "text",
                          { class: "novel-rating" },
                          vue.toDisplayString(post.novelRating || ((_a = post.novelInfo) == null ? void 0 : _a.rating)),
                          1
                          /* TEXT */
                        )
                      ]),
                      vue.createElementVNode(
                        "text",
                        { class: "novel-title" },
                        vue.toDisplayString(post.novelTitle || ((_b = post.novelInfo) == null ? void 0 : _b.title)),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "novel-desc" },
                        vue.toDisplayString(post.novelDescription || ((_c = post.novelInfo) == null ? void 0 : _c.description)),
                        1
                        /* TEXT */
                      ),
                      vue.createCommentVNode(" 小说封面 "),
                      post.novelCover ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "novel-cover-container"
                      }, [
                        vue.createElementVNode("image", {
                          class: "novel-cover",
                          src: post.novelCover,
                          mode: "aspectFill"
                        }, null, 8, ["src"]),
                        vue.createElementVNode("view", { class: "novel-overlay" }, [
                          vue.createElementVNode(
                            "text",
                            { class: "overlay-title" },
                            vue.toDisplayString(post.novelTitle || ((_d = post.novelInfo) == null ? void 0 : _d.title)),
                            1
                            /* TEXT */
                          )
                        ])
                      ])) : vue.createCommentVNode("v-if", true),
                      vue.createCommentVNode(" 小说标签 "),
                      post.tags ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 1,
                        class: "novel-tags"
                      }, [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(post.tags, (tag) => {
                            return vue.openBlock(), vue.createElementBlock(
                              "text",
                              {
                                class: "tag",
                                key: tag
                              },
                              vue.toDisplayString(tag),
                              1
                              /* TEXT */
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ])) : vue.createCommentVNode("v-if", true)
                    ])
                  ])) : post.type === "image" ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 1 },
                    [
                      vue.createCommentVNode(" 图文消息 "),
                      vue.createElementVNode("view", { class: "image-message" }, [
                        post.textContent ? (vue.openBlock(), vue.createElementBlock(
                          "text",
                          {
                            key: 0,
                            class: "message-text"
                          },
                          vue.toDisplayString(post.textContent),
                          1
                          /* TEXT */
                        )) : vue.createCommentVNode("v-if", true),
                        vue.createCommentVNode(" 图片区域 "),
                        post.images && post.images.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 1,
                          class: "message-images"
                        }, [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(post.images, (image, imgIndex) => {
                              return vue.openBlock(), vue.createElementBlock("image", {
                                key: imgIndex,
                                class: "message-image",
                                src: image,
                                mode: "aspectFill",
                                onClick: vue.withModifiers(($event) => $options.previewImage(post.images, imgIndex), ["stop"]),
                                onError: ($event) => $options.handleImageError(post, imgIndex)
                              }, null, 40, ["src", "onClick", "onError"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ])) : !post.hasImages ? (vue.openBlock(), vue.createElementBlock(
                          vue.Fragment,
                          { key: 2 },
                          [
                            vue.createCommentVNode(" 图片加载失败时的预留位置 "),
                            vue.createElementVNode("view", { class: "image-placeholder" }, [
                              vue.createElementVNode("view", { class: "placeholder-content" }, [
                                vue.createElementVNode("text", { class: "placeholder-icon" }, "🖼️"),
                                vue.createElementVNode("text", { class: "placeholder-text" }, "图片内容暂时无法显示")
                              ])
                            ])
                          ],
                          2112
                          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                        )) : vue.createCommentVNode("v-if", true)
                      ])
                    ],
                    2112
                    /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                  )) : post.type === "text" ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 2 },
                    [
                      vue.createCommentVNode(" 纯文字消息 "),
                      vue.createElementVNode("view", { class: "text-message" }, [
                        vue.createElementVNode(
                          "text",
                          { class: "message-text" },
                          vue.toDisplayString(post.textContent),
                          1
                          /* TEXT */
                        )
                      ])
                    ],
                    2112
                    /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                  )) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 互动指标 "),
                  vue.createElementVNode("view", { class: "message-actions" }, [
                    vue.createElementVNode("view", {
                      class: "action-item",
                      onClick: vue.withModifiers(($event) => $options.handleLike(post), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["action-icon", { "active": post.isLiked }])
                        },
                        "👍",
                        2
                        /* CLASS */
                      ),
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["action-count", { "active": post.isLiked }])
                        },
                        vue.toDisplayString($options.formatCount(post.likes)),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "action-item",
                      onClick: vue.withModifiers(($event) => $options.handleDislike(post), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["action-icon", { "active": post.isDisliked }])
                        },
                        "👎",
                        2
                        /* CLASS */
                      ),
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["action-count", { "active": post.isDisliked }])
                        },
                        vue.toDisplayString($options.formatCount(post.dislikes)),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "action-item",
                      onClick: vue.withModifiers(($event) => $options.handleFavorite(post), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["action-icon", { "active": post.isFavorited }])
                        },
                        "⭐",
                        2
                        /* CLASS */
                      ),
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["action-count", { "active": post.isFavorited }])
                        },
                        vue.toDisplayString($options.formatCount(post.favorites)),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "action-item",
                      onClick: vue.withModifiers(($event) => $options.handleComment(post), ["stop"])
                    }, [
                      vue.createElementVNode("text", { class: "action-icon" }, "💬"),
                      vue.createElementVNode(
                        "text",
                        { class: "action-count" },
                        vue.toDisplayString($options.formatCount(post.comments)),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"])
                  ])
                ])
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])) : vue.createCommentVNode("v-if", true)
      ], 40, ["scroll-top", "refresher-triggered"]),
      vue.createCommentVNode(" 底部输入区域 "),
      vue.createElementVNode("view", { class: "input-area" }, [
        vue.createElementVNode("view", { class: "input-container" }, [
          vue.createElementVNode("view", {
            class: "input-box",
            onClick: _cache[9] || (_cache[9] = (...args) => $options.goToPublish && $options.goToPublish(...args))
          }, [
            vue.createElementVNode("input", {
              class: "message-input",
              type: "text",
              placeholder: "说点什么...",
              value: $data.inputMessage,
              readonly: "",
              focus: $data.inputFocus
            }, null, 8, ["value", "focus"]),
            vue.createElementVNode("view", { class: "input-actions" }, [
              vue.createElementVNode("view", {
                class: "action-btn",
                onClick: _cache[7] || (_cache[7] = vue.withModifiers((...args) => $options.toggleImagePicker && $options.toggleImagePicker(...args), ["stop"]))
              }, [
                vue.createElementVNode("text", { class: "action-icon" }, "📷")
              ]),
              vue.createElementVNode("view", {
                class: "action-btn",
                onClick: _cache[8] || (_cache[8] = vue.withModifiers((...args) => $options.goToPublish && $options.goToPublish(...args), ["stop"]))
              }, [
                vue.createElementVNode("text", { class: "action-icon" }, "📤")
              ])
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-navigation" }, [
        vue.createElementVNode("view", {
          class: "nav-item active",
          onClick: _cache[10] || (_cache[10] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[11] || (_cache[11] = (...args) => $options.goToChatList && $options.goToChatList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[12] || (_cache[12] = (...args) => $options.goToAIChat && $options.goToAIChat(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-tab" }, [
            vue.createElementVNode("text", { class: "ai-text" }, "AI")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[13] || (_cache[13] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-avatar",
          onClick: _cache[14] || (_cache[14] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("image", {
            class: "avatar-small",
            src: "",
            mode: "aspectFill"
          })
        ])
      ]),
      vue.createCommentVNode(" 左侧菜单面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["side-menu", { "active": $data.showSideMenu }]),
          onClick: _cache[26] || (_cache[26] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "menu-content",
            onClick: _cache[25] || (_cache[25] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createCommentVNode(" 菜单头部 "),
            vue.createElementVNode("view", { class: "menu-header" }, [
              vue.createElementVNode("view", {
                class: "menu-close",
                onClick: _cache[15] || (_cache[15] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
              }, [
                vue.createElementVNode("text", { class: "close-icon" }, "×")
              ])
            ]),
            vue.createCommentVNode(" 菜单选项列表 "),
            vue.createElementVNode("view", { class: "menu-list" }, [
              vue.createCommentVNode(" 我的AI "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[16] || (_cache[16] = (...args) => $options.goToMyAI && $options.goToMyAI(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的AI")
                ])
              ]),
              vue.createCommentVNode(" 我的认证、喜恶、成就 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[17] || (_cache[17] = (...args) => $options.goToMyCertification && $options.goToMyCertification(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的认证")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[18] || (_cache[18] = (...args) => $options.goToMyPreferences && $options.goToMyPreferences(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的喜恶")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[19] || (_cache[19] = (...args) => $options.goToMyAchievements && $options.goToMyAchievements(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的成就")
                ])
              ]),
              vue.createCommentVNode(" 历史评论 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[20] || (_cache[20] = (...args) => $options.goToHistoryComments && $options.goToHistoryComments(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "互动消息")
                ])
              ]),
              vue.createCommentVNode(" 购买记录、钱包 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[21] || (_cache[21] = (...args) => $options.goToPurchaseRecord && $options.goToPurchaseRecord(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "购买记录")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[22] || (_cache[22] = (...args) => $options.goToWallet && $options.goToWallet(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "钱包")
                ])
              ]),
              vue.createCommentVNode(" 设置和客服 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[23] || (_cache[23] = (...args) => $options.goToSettings && $options.goToSettings(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "设置")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[24] || (_cache[24] = (...args) => $options.goToCustomerService && $options.goToCustomerService(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "客服与服务")
                ])
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesFeedChatFeed = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$O], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/chat-feed.vue"]]);
  const _sfc_main$O = {
    name: "PostDetailPage",
    data() {
      return {
        postDetail: {
          id: "",
          authorName: "",
          authorAvatar: "",
          publishTime: "",
          textContent: "",
          images: [],
          location: "",
          likes: 0,
          dislikes: 0,
          favorites: 0,
          isLiked: false,
          isDisliked: false,
          isFavorited: false,
          isFollowed: false,
          comments: []
        },
        commentText: "",
        showMoreModal: false,
        scrollTop: 0,
        replyToComment: null,
        replyToReply: null,
        isOwnPost: false
        // 标识是否来自用户自己的个人资料页
      };
    },
    onLoad(options) {
      formatAppLog("log", "at pages/feed/post-detail.vue:229", "页面加载参数:", options);
      if (options.postId) {
        const postId = parseInt(options.postId);
        formatAppLog("log", "at pages/feed/post-detail.vue:234", "解析后的postId:", postId);
        if (options.isOwnPost === "true") {
          this.isOwnPost = true;
          formatAppLog("log", "at pages/feed/post-detail.vue:239", "这是用户自己的帖子，隐藏关注按钮");
        }
        this.loadPostDetail(postId);
      } else {
        formatAppLog("log", "at pages/feed/post-detail.vue:245", "使用默认postId: 3");
        this.loadPostDetail(3);
      }
    },
    methods: {
      // 加载帖子详情
      loadPostDetail(postId) {
        formatAppLog("log", "at pages/feed/post-detail.vue:252", "开始加载帖子详情，postId:", postId);
        const mockPosts = {
          1: {
            id: 1,
            authorName: "风拂柳梢 (AI)",
            authorAvatar: "/static/avatar1.png",
            publishTime: "12分钟前",
            textContent: "推荐一本超好看的小说！《万法诡道,我为灵尊》幻想修仙题材，禁神之子私房菜，无套路剧情，评分4.9/5.0，强烈推荐给大家！",
            images: [
              "/static/avatar1.png"
            ],
            location: "AI推荐",
            likes: 99e3,
            dislikes: 3046,
            favorites: 99e3,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "书虫小王",
                userAvatar: "/static/avatar2.png",
                time: "10分钟前",
                content: "看起来不错，马上去看看！",
                likes: 45,
                isLiked: false,
                replies: [
                  {
                    username: "修仙爱好者",
                    userAvatar: "/static/avatar3.png",
                    time: "8分钟前",
                    content: "我也觉得不错！",
                    likes: 12,
                    isLiked: false,
                    replyTo: "书虫小王"
                  }
                ]
              },
              {
                username: "修仙爱好者",
                userAvatar: "/static/avatar3.png",
                time: "8分钟前",
                content: "已经看过了，确实很精彩",
                likes: 32,
                isLiked: false,
                replies: []
              }
            ]
          },
          5: {
            id: 5,
            authorName: "猫又屋之主",
            authorAvatar: "/static/avatar3.png",
            publishTime: "12分钟前",
            textContent: "绘画练习",
            images: [],
            location: "个人动态",
            likes: 10,
            dislikes: 2,
            favorites: 5,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "艺术爱好者",
                userAvatar: "/static/avatar4.png",
                time: "10分钟前",
                content: "画得真不错！",
                likes: 8,
                isLiked: false,
                replies: []
              },
              {
                username: "绘画达人",
                userAvatar: "/static/avatar1.png",
                time: "8分钟前",
                content: "继续加油！",
                likes: 5,
                isLiked: false,
                replies: []
              }
            ]
          },
          2: {
            id: 2,
            authorName: "雨落情劫 (AI)",
            authorAvatar: "/static/avatar2.png",
            publishTime: "15分钟前",
            textContent: "You know you're in love when you can't fall asleep because reality is finally better than your dreams.",
            images: [],
            location: "AI分享",
            likes: 1234,
            dislikes: 56,
            favorites: 789,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "情感专家",
                userAvatar: "/static/avatar4.png",
                time: "12分钟前",
                content: "这句话太有道理了！",
                likes: 23,
                isLiked: false,
                replies: []
              }
            ]
          },
          3: {
            id: 3,
            authorName: "春日樱花",
            authorAvatar: "/static/avatar3.png",
            publishTime: "30分钟前",
            textContent: "今天天气真好，分享一张美照～阳光明媚的日子里，心情也变得格外美好。希望每个人都能感受到这份温暖和快乐！",
            images: [
              "/static/avatar1.png",
              "/static/avatar2.png",
              "/static/avatar3.png"
            ],
            location: "北京市朝阳区",
            likes: 5678,
            dislikes: 123,
            favorites: 2345,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "摄影爱好者",
                userAvatar: "/static/avatar4.png",
                time: "25分钟前",
                content: "拍得真好看！光线很柔和",
                likes: 12,
                isLiked: false,
                replies: [
                  {
                    username: "春日樱花",
                    userAvatar: "/static/avatar3.png",
                    time: "22分钟前",
                    content: "谢谢夸奖！",
                    likes: 5,
                    isLiked: false,
                    replyTo: "摄影爱好者"
                  }
                ]
              },
              {
                username: "旅行达人",
                userAvatar: "/static/avatar1.png",
                time: "20分钟前",
                content: "这是在哪里拍的？风景很美",
                likes: 8,
                isLiked: false,
                replies: []
              },
              {
                username: "生活记录者",
                userAvatar: "/static/avatar2.png",
                time: "15分钟前",
                content: "天气确实很棒，适合出门走走",
                likes: 15,
                isLiked: false,
                replies: []
              }
            ]
          },
          4: {
            id: 4,
            authorName: "猫又屋之主",
            authorAvatar: "/static/avatar3.png",
            publishTime: "1小时前",
            textContent: "今天天气真好！",
            images: [],
            location: "个人动态",
            likes: 10,
            dislikes: 1,
            favorites: 5,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "天气观察员",
                userAvatar: "/static/avatar2.png",
                time: "50分钟前",
                content: "确实是个好天气！",
                likes: 6,
                isLiked: false,
                replies: []
              }
            ]
          },
          6: {
            id: 6,
            authorName: "猫又屋之主",
            authorAvatar: "/static/avatar3.png",
            publishTime: "3天前",
            textContent: null,
            images: ["/static/image3.jpg", "/static/image4.jpg"],
            location: "个人相册",
            likes: 18,
            dislikes: 4,
            favorites: 10,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "摄影爱好者",
                userAvatar: "/static/avatar1.png",
                time: "2天前",
                content: "照片拍得很美！",
                likes: 12,
                isLiked: false,
                replies: []
              }
            ]
          }
        };
        if (mockPosts[postId]) {
          formatAppLog("log", "at pages/feed/post-detail.vue:485", "找到帖子数据:", mockPosts[postId]);
          this.postDetail = { ...mockPosts[postId] };
        } else {
          this.postDetail = {
            id: postId,
            authorName: this.postDetail.authorName || "春日樱花",
            authorAvatar: "/static/avatar3.png",
            publishTime: "30分钟前",
            textContent: this.postDetail.textContent || "今天天气真好，分享一张美照～阳光明媚的日子里，心情也变得格外美好。希望每个人都能感受到这份温暖和快乐！",
            images: [
              "/static/avatar1.png",
              "/static/avatar2.png",
              "/static/avatar3.png"
            ],
            location: "北京市朝阳区",
            likes: 5678,
            dislikes: 123,
            favorites: 2345,
            isLiked: false,
            isDisliked: false,
            isFavorited: false,
            isFollowed: false,
            comments: [
              {
                username: "摄影爱好者",
                userAvatar: "/static/avatar4.png",
                time: "25分钟前",
                content: "拍得真好看！光线很柔和",
                likes: 12,
                isLiked: false,
                replies: [
                  {
                    username: "春日樱花",
                    userAvatar: "/static/avatar3.png",
                    time: "22分钟前",
                    content: "谢谢夸奖！",
                    likes: 5,
                    isLiked: false,
                    replyTo: "摄影爱好者"
                  }
                ]
              },
              {
                username: "旅行达人",
                userAvatar: "/static/avatar1.png",
                time: "20分钟前",
                content: "这是在哪里拍的？风景很美",
                likes: 8,
                isLiked: false,
                replies: []
              },
              {
                username: "生活记录者",
                userAvatar: "/static/avatar2.png",
                time: "15分钟前",
                content: "天气确实很棒，适合出门走走",
                likes: 15,
                isLiked: false,
                replies: []
              }
            ]
          };
        }
      },
      // 返回上一页
      goBack() {
        uni.navigateBack();
      },
      // 跳转到用户资料页
      goToUserProfile() {
        uni.navigateTo({
          url: `/pages/feed/user-profile?username=${encodeURIComponent(this.postDetail.authorName)}`
        });
      },
      // 关注/取消关注
      toggleFollow() {
        this.postDetail.isFollowed = !this.postDetail.isFollowed;
        uni.showToast({
          title: this.postDetail.isFollowed ? "关注成功" : "已取消关注",
          icon: "success"
        });
      },
      // 获取图片网格样式
      getImageGridClass(count) {
        if (count === 1)
          return "single-image";
        if (count === 2)
          return "two-images";
        if (count === 3)
          return "three-images";
        return "grid-images";
      },
      // 图片预览
      previewImage(images, current) {
        uni.previewImage({
          urls: images,
          current
        });
      },
      // 格式化数字
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 点赞
      handleLike() {
        this.postDetail.isLiked = !this.postDetail.isLiked;
        if (this.postDetail.isLiked) {
          this.postDetail.likes++;
          if (this.postDetail.isDisliked) {
            this.postDetail.isDisliked = false;
            this.postDetail.dislikes--;
          }
        } else {
          this.postDetail.likes--;
        }
      },
      // 踩
      handleDislike() {
        this.postDetail.isDisliked = !this.postDetail.isDisliked;
        if (this.postDetail.isDisliked) {
          this.postDetail.dislikes++;
          if (this.postDetail.isLiked) {
            this.postDetail.isLiked = false;
            this.postDetail.likes--;
          }
        } else {
          this.postDetail.dislikes--;
        }
      },
      // 收藏
      handleFavorite() {
        this.postDetail.isFavorited = !this.postDetail.isFavorited;
        if (this.postDetail.isFavorited) {
          this.postDetail.favorites++;
        } else {
          this.postDetail.favorites--;
        }
      },
      // 分享
      handleShare() {
        uni.showToast({
          title: "分享功能开发中",
          icon: "none"
        });
      },
      // 显示更多选项
      showMoreOptions() {
        this.showMoreModal = true;
      },
      // 隐藏更多选项
      hideMoreOptions() {
        this.showMoreModal = false;
      },
      // 举报帖子
      reportPost() {
        this.hideMoreOptions();
        uni.navigateTo({
          url: "/pages/report/report"
        });
      },
      // 复制链接
      copyLink() {
        this.hideMoreOptions();
        uni.setClipboardData({
          data: `https://example.com/post/${this.postDetail.id}`,
          success: () => {
            uni.showToast({
              title: "链接已复制",
              icon: "success"
            });
          }
        });
      },
      // 点赞评论
      likeComment(comment, index) {
        comment.isLiked = !comment.isLiked;
        if (comment.isLiked) {
          comment.likes++;
        } else {
          comment.likes--;
        }
      },
      // 点赞回复
      likeReply(comment, replyIndex) {
        const reply = comment.replies[replyIndex];
        reply.isLiked = !reply.isLiked;
        if (reply.isLiked) {
          reply.likes++;
        } else {
          reply.likes--;
        }
      },
      // 回复评论
      replyComment(comment) {
        formatAppLog("log", "at pages/feed/post-detail.vue:697", "回复评论:", comment);
        this.replyToComment = comment;
        this.replyToReply = null;
        this.commentText = "";
        this.$nextTick(() => {
          const input = uni.createSelectorQuery().select(".comment-input");
          if (input) {
            input.focus();
          }
        });
      },
      // 回复回复
      handleReplyToReply(comment, reply) {
        this.replyToComment = comment;
        this.replyToReply = reply;
        this.commentText = "";
        this.$nextTick(() => {
          const input = uni.createSelectorQuery().select(".comment-input");
          if (input) {
            input.focus();
          }
        });
      },
      // 输入框聚焦
      onInputFocus() {
      },
      // 输入框失焦
      onInputBlur() {
      },
      // 提交评论
      submitComment() {
        if (!this.commentText.trim()) {
          return;
        }
        if (this.replyToComment) {
          const newReply = {
            username: "我",
            userAvatar: "/static/avatar3.png",
            time: "刚刚",
            content: this.commentText,
            likes: 0,
            isLiked: false,
            replyTo: this.replyToReply ? this.replyToReply.username : this.replyToComment.username
          };
          if (!this.replyToComment.replies) {
            this.replyToComment.replies = [];
          }
          this.replyToComment.replies.push(newReply);
          this.replyToComment = null;
          this.replyToReply = null;
          uni.showToast({
            title: "回复成功",
            icon: "success"
          });
        } else {
          const newComment = {
            username: "我",
            userAvatar: "/static/avatar3.png",
            time: "刚刚",
            content: this.commentText,
            likes: 0,
            isLiked: false,
            replies: []
          };
          this.postDetail.comments.unshift(newComment);
          uni.showToast({
            title: "评论成功",
            icon: "success"
          });
        }
        this.commentText = "";
      },
      // 获取总评论数（包括回复）
      getTotalCommentsCount() {
        let total = this.postDetail.comments.length;
        this.postDetail.comments.forEach((comment) => {
          if (comment.replies) {
            total += comment.replies.length;
          }
        });
        return total;
      },
      // 获取输入框placeholder
      getInputPlaceholder() {
        if (this.replyToComment) {
          if (this.replyToReply) {
            return `回复 @${this.replyToReply.username}...`;
          }
          return `回复 @${this.replyToComment.username}...`;
        }
        return "说点什么...";
      },
      // 取消回复
      cancelReply() {
        formatAppLog("log", "at pages/feed/post-detail.vue:819", "取消回复");
        this.commentText = "";
        this.replyToComment = null;
        this.replyToReply = null;
      }
    }
  };
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "post-detail-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            t: "1756246262970",
            class: "icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            "p-id": "904",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
              fill: "#666666",
              "p-id": "905"
            })
          ]))
        ]),
        vue.createElementVNode("view", { class: "header-title" }, "动态详情"),
        vue.createElementVNode("view", {
          class: "more-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.showMoreOptions && $options.showMoreOptions(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            t: "1756202704554",
            class: "icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
              fill: "#333333"
            }),
            vue.createElementVNode("path", {
              d: "M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z",
              fill: "#333333"
            })
          ]))
        ])
      ]),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-scroll" }, [
        vue.createCommentVNode(" 帖子内容 "),
        vue.createElementVNode("view", { class: "post-content" }, [
          vue.createCommentVNode(" 作者信息 "),
          vue.createElementVNode("view", { class: "author-section" }, [
            vue.createElementVNode("view", {
              class: "author-info",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.goToUserProfile && $options.goToUserProfile(...args))
            }, [
              vue.createElementVNode("image", {
                class: "author-avatar",
                src: $data.postDetail.authorAvatar,
                mode: "aspectFill"
              }, null, 8, ["src"]),
              vue.createElementVNode("view", { class: "author-details" }, [
                vue.createElementVNode(
                  "text",
                  { class: "author-name" },
                  vue.toDisplayString($data.postDetail.authorName),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  { class: "author-time" },
                  vue.toDisplayString($data.postDetail.publishTime),
                  1
                  /* TEXT */
                )
              ])
            ]),
            !$data.isOwnPost ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: vue.normalizeClass(["follow-button", { "followed": $data.postDetail.isFollowed }]),
                onClick: _cache[3] || (_cache[3] = (...args) => $options.toggleFollow && $options.toggleFollow(...args))
              },
              [
                vue.createElementVNode(
                  "text",
                  { class: "follow-text" },
                  vue.toDisplayString($data.postDetail.isFollowed ? "已关注" : "关注"),
                  1
                  /* TEXT */
                )
              ],
              2
              /* CLASS */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createCommentVNode(" 文字内容 "),
          $data.postDetail.textContent ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "text-content"
          }, [
            vue.createElementVNode(
              "text",
              { class: "content-text" },
              vue.toDisplayString($data.postDetail.textContent),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 图片内容 "),
          $data.postDetail.images && $data.postDetail.images.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "image-content"
          }, [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["image-grid", $options.getImageGridClass($data.postDetail.images.length)])
              },
              [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.postDetail.images, (image, index) => {
                    return vue.openBlock(), vue.createElementBlock("image", {
                      key: index,
                      class: "content-image",
                      src: image,
                      mode: "aspectFill",
                      onClick: ($event) => $options.previewImage($data.postDetail.images, index)
                    }, null, 8, ["src", "onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ],
              2
              /* CLASS */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 位置信息 "),
          $data.postDetail.location ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 2,
            class: "location-info"
          }, [
            vue.createElementVNode("view", { class: "location-icon" }, [
              (vue.openBlock(), vue.createElementBlock("svg", {
                t: "1756202704554",
                class: "icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                width: "24",
                height: "24"
              }, [
                vue.createElementVNode("path", {
                  d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
                  fill: "#999999"
                }),
                vue.createElementVNode("path", {
                  d: "M512 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z",
                  fill: "#999999"
                })
              ]))
            ]),
            vue.createElementVNode(
              "text",
              { class: "location-text" },
              vue.toDisplayString($data.postDetail.location),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 互动指标 "),
          vue.createElementVNode("view", { class: "engagement-metrics" }, [
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.handleLike && $options.handleLike(...args))
            }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-icon", { "active": $data.postDetail.isLiked }])
                },
                "👍",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-count", { "active": $data.postDetail.isLiked }])
                },
                vue.toDisplayString($options.formatCount($data.postDetail.likes)),
                3
                /* TEXT, CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.handleDislike && $options.handleDislike(...args))
            }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-icon", { "active": $data.postDetail.isDisliked }])
                },
                "👎",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-count", { "active": $data.postDetail.isDisliked }])
                },
                vue.toDisplayString($options.formatCount($data.postDetail.dislikes)),
                3
                /* TEXT, CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[6] || (_cache[6] = (...args) => $options.handleFavorite && $options.handleFavorite(...args))
            }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-icon", { "active": $data.postDetail.isFavorited }])
                },
                "⭐",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-count", { "active": $data.postDetail.isFavorited }])
                },
                vue.toDisplayString($options.formatCount($data.postDetail.favorites)),
                3
                /* TEXT, CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.handleShare && $options.handleShare(...args))
            }, [
              vue.createElementVNode("text", { class: "metric-icon" }, "📤"),
              vue.createElementVNode("text", { class: "metric-count" }, "分享")
            ])
          ])
        ]),
        vue.createCommentVNode(" 评论区域 "),
        vue.createElementVNode("view", { class: "comments-section" }, [
          vue.createElementVNode("view", { class: "comments-header" }, [
            vue.createElementVNode(
              "text",
              { class: "comments-title" },
              "评论 (" + vue.toDisplayString($options.getTotalCommentsCount()) + ")",
              1
              /* TEXT */
            )
          ]),
          vue.createCommentVNode(" 评论列表 "),
          vue.createElementVNode("view", { class: "comments-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.postDetail.comments, (comment, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "comment-item",
                  key: index
                }, [
                  vue.createElementVNode("view", { class: "comment-avatar" }, [
                    vue.createElementVNode("image", {
                      class: "comment-user-avatar",
                      src: comment.userAvatar,
                      mode: "aspectFill"
                    }, null, 8, ["src"])
                  ]),
                  vue.createElementVNode("view", { class: "comment-content" }, [
                    vue.createElementVNode("view", { class: "comment-user-info" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "comment-username" },
                        vue.toDisplayString(comment.username),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "comment-time" },
                        vue.toDisplayString(comment.time),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode(
                      "text",
                      { class: "comment-text" },
                      vue.toDisplayString(comment.content),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "comment-actions" }, [
                      vue.createElementVNode("view", {
                        class: "comment-action",
                        onClick: ($event) => $options.likeComment(comment, index)
                      }, [
                        vue.createElementVNode(
                          "text",
                          {
                            class: vue.normalizeClass(["action-icon", { "active": comment.isLiked }])
                          },
                          "👍",
                          2
                          /* CLASS */
                        ),
                        vue.createElementVNode(
                          "text",
                          { class: "action-count" },
                          vue.toDisplayString($options.formatCount(comment.likes)),
                          1
                          /* TEXT */
                        )
                      ], 8, ["onClick"]),
                      vue.createElementVNode("view", {
                        class: "comment-action",
                        onClick: ($event) => $options.replyComment(comment)
                      }, [
                        vue.createElementVNode("text", { class: "action-icon" }, "💬"),
                        vue.createElementVNode("text", { class: "action-count" }, "回复")
                      ], 8, ["onClick"])
                    ]),
                    vue.createCommentVNode(" 回复列表 "),
                    comment.replies && comment.replies.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "replies-list"
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(comment.replies, (reply, replyIndex) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            class: "reply-item",
                            key: replyIndex
                          }, [
                            vue.createElementVNode("view", { class: "reply-avatar" }, [
                              vue.createElementVNode("image", {
                                class: "reply-user-avatar",
                                src: reply.userAvatar,
                                mode: "aspectFill"
                              }, null, 8, ["src"])
                            ]),
                            vue.createElementVNode("view", { class: "reply-content" }, [
                              vue.createElementVNode("view", { class: "reply-user-info" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "reply-username" },
                                  vue.toDisplayString(reply.username),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "reply-time" },
                                  vue.toDisplayString(reply.time),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode("text", { class: "reply-text" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "reply-to" },
                                  "回复 @" + vue.toDisplayString(reply.replyTo) + "：",
                                  1
                                  /* TEXT */
                                ),
                                vue.createTextVNode(
                                  " " + vue.toDisplayString(reply.content),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode("view", { class: "reply-actions" }, [
                                vue.createElementVNode("view", {
                                  class: "reply-action",
                                  onClick: ($event) => $options.likeReply(comment, replyIndex)
                                }, [
                                  vue.createElementVNode(
                                    "text",
                                    {
                                      class: vue.normalizeClass(["action-icon", { "active": reply.isLiked }])
                                    },
                                    "👍",
                                    2
                                    /* CLASS */
                                  ),
                                  vue.createElementVNode(
                                    "text",
                                    { class: "action-count" },
                                    vue.toDisplayString($options.formatCount(reply.likes)),
                                    1
                                    /* TEXT */
                                  )
                                ], 8, ["onClick"]),
                                vue.createElementVNode("view", {
                                  class: "reply-action",
                                  onClick: ($event) => $options.handleReplyToReply(comment, reply)
                                }, [
                                  vue.createElementVNode("text", { class: "action-icon" }, "💬"),
                                  vue.createElementVNode("text", { class: "action-count" }, "回复")
                                ], 8, ["onClick"])
                              ])
                            ])
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ])) : vue.createCommentVNode("v-if", true)
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部评论输入框 "),
      vue.createElementVNode("view", { class: "comment-input-section" }, [
        vue.createElementVNode("view", { class: "comment-input-container" }, [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "comment-input",
            "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.commentText = $event),
            placeholder: $options.getInputPlaceholder(),
            onFocus: _cache[9] || (_cache[9] = (...args) => $options.onInputFocus && $options.onInputFocus(...args)),
            onBlur: _cache[10] || (_cache[10] = (...args) => $options.onInputBlur && $options.onInputBlur(...args))
          }, null, 40, ["placeholder"]), [
            [vue.vModelText, $data.commentText]
          ]),
          vue.createCommentVNode(" 取消回复按钮 "),
          $data.replyToComment ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "cancel-reply-btn",
            onClick: _cache[11] || (_cache[11] = (...args) => $options.cancelReply && $options.cancelReply(...args))
          }, [
            vue.createElementVNode("text", { class: "cancel-reply-text" }, "取消")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["send-button", { "active": $data.commentText.trim() }]),
              onClick: _cache[12] || (_cache[12] = (...args) => $options.submitComment && $options.submitComment(...args))
            },
            [
              vue.createElementVNode("text", { class: "send-text" }, "发送")
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 更多选项弹窗 "),
      $data.showMoreModal ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "more-options-modal",
        onClick: _cache[17] || (_cache[17] = (...args) => $options.hideMoreOptions && $options.hideMoreOptions(...args))
      }, [
        vue.createElementVNode("view", {
          class: "options-content",
          onClick: _cache[16] || (_cache[16] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", {
            class: "option-item",
            onClick: _cache[13] || (_cache[13] = (...args) => $options.reportPost && $options.reportPost(...args))
          }, [
            vue.createElementVNode("text", { class: "option-text" }, "举报")
          ]),
          vue.createElementVNode("view", {
            class: "option-item",
            onClick: _cache[14] || (_cache[14] = (...args) => $options.copyLink && $options.copyLink(...args))
          }, [
            vue.createElementVNode("text", { class: "option-text" }, "复制链接")
          ]),
          vue.createElementVNode("view", {
            class: "option-item",
            onClick: _cache[15] || (_cache[15] = (...args) => $options.hideMoreOptions && $options.hideMoreOptions(...args))
          }, [
            vue.createElementVNode("text", { class: "option-text" }, "取消")
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesFeedPostDetail = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$N], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/post-detail.vue"]]);
  const _imports_1 = "/static/wechat-icon.png";
  const _imports_3 = "/static/douyin-icon.png";
  const _imports_2 = "/static/qq-icon.png";
  const _sfc_main$N = {
    data() {
      return {
        friendName: "",
        // 好友名称
        isEditing: false,
        signatureText: "这个人很懒,什么都没有留下",
        charCount: 0,
        isMobile: false,
        showSideMenu: false,
        // 控制左侧菜单显示
        activeTab: "dynamic",
        // 当前激活的标签
        showShare: false,
        userId: 1000100,
        // 默认用户ID，从页面参数获取
        loading: false,
        errorMessage: "",
        hasError: false,
        userInfo: {},
        // 用户基本信息
        dynamicStats: {},
        // 动态统计
        collectionStats: {},
        // 收藏统计
        shareUsers: ["奶绿冰阔落", "我想次炸鸡", "匿名为某", "康已奀", "小菜刀御", "超级好"],
        shareAppsRow1: [
          { name: "Chat..Group", cls: "app-mail" },
          { name: "Super Group", cls: "app-super" },
          { name: "Friends", cls: "app-wechat" },
          { name: "Moments", cls: "app-moment" },
          { name: "Alipay Frd", cls: "app-alipay" }
        ],
        shareAppsRow2: [
          { name: "Use t..ard Bg" },
          { name: "Make pic" },
          { name: "Contr..ovelty" },
          { name: "Favorite" },
          { name: "Promote" }
        ],
        shareFriends: [
          { name: "奶绿冰阔落", avatar: "/static/avatar-default.png" },
          { name: "我想次炸鸡", avatar: "/static/avatar-default.png" },
          { name: "匿名为某", avatar: "/static/avatar-default.png" },
          { name: "康已奀", avatar: "/static/avatar-default.png" },
          { name: "小菜刀御", avatar: "/static/avatar-default.png" },
          { name: "超级好", avatar: "/static/avatar-default.png" },
          { name: "QQ好友七", avatar: "/static/avatar-default.png" }
        ],
        personalPosts: [
          {
            id: 5,
            // 绘画帖子，使用唯一ID
            username: "猫又屋之主",
            timeAgo: "12分钟前",
            contentType: "绘画",
            textContent: "绘画练习",
            images: [],
            novelInfo: null,
            novelCover: null,
            likes: 10,
            dislikes: 2,
            favorites: 5,
            comments: 15,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          {
            id: 1,
            // 小说帖子，对应novel-detail.vue中的ID 1
            username: "猫又屋之主",
            timeAgo: "2小时前",
            contentType: "小说",
            textContent: null,
            images: [],
            novelInfo: {
              title: "神秘的猫又",
              description: "在一个古老的村庄里，流传着一个关于猫又的神秘传说。",
              rating: "4.5"
            },
            novelCover: "/static/novel-cover.png",
            likes: 20,
            dislikes: 5,
            favorites: 10,
            comments: 25,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          {
            id: 3,
            // 图片帖子，对应post-detail.vue中的ID 3
            username: "猫又屋之主",
            timeAgo: "1天前",
            contentType: "图片",
            textContent: null,
            images: ["/static/image1.jpg", "/static/image2.jpg"],
            novelInfo: null,
            novelCover: null,
            likes: 15,
            dislikes: 3,
            favorites: 8,
            comments: 10,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          }
        ],
        collectedPosts: [
          {
            id: 4,
            username: "猫又屋之主",
            timeAgo: "1小时前",
            contentType: "动态",
            textContent: "今天天气真好！",
            images: [],
            novelInfo: null,
            novelCover: null,
            likes: 10,
            dislikes: 1,
            favorites: 5,
            comments: 10,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          {
            id: 2,
            // 对应novel-detail.vue中的ID 2
            username: "猫又屋之主",
            timeAgo: "2天前",
            contentType: "小说",
            textContent: null,
            images: [],
            novelInfo: {
              title: "猫又的奇幻之旅",
              description: "猫又发现了一个通往神秘世界的传送门。",
              rating: "4.8"
            },
            novelCover: "/static/novel-cover.png",
            likes: 25,
            dislikes: 8,
            favorites: 15,
            comments: 30,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          },
          {
            id: 6,
            username: "猫又屋之主",
            timeAgo: "3天前",
            contentType: "图片",
            textContent: null,
            images: ["/static/image3.jpg", "/static/image4.jpg"],
            novelInfo: null,
            novelCover: null,
            likes: 18,
            dislikes: 4,
            favorites: 10,
            comments: 15,
            isLiked: false,
            isDisliked: false,
            isFavorited: false
          }
        ]
      };
    },
    onLoad(options) {
      this.detectDevice();
      if (options.userId) {
        this.userId = parseInt(options.userId);
      }
      if (options.friendName) {
        this.friendName = decodeURIComponent(options.friendName);
        uni.setNavigationBarTitle({
          title: this.friendName
        });
      }
      formatAppLog("log", "at pages/feed/user-profile.vue:678", "页面加载，用户ID:", this.userId);
      this.loadUserProfileData();
      this.loadUserDynamicData();
    },
    methods: {
      // 加载用户个人主页数据
      async loadUserProfileData() {
        try {
          formatAppLog("log", "at pages/feed/user-profile.vue:688", "=== 开始加载用户个人主页数据 ===");
          formatAppLog("log", "at pages/feed/user-profile.vue:689", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/user-profile.vue:690", "请求URL:", `http://localhost:8888/api/user-profile/data?userId=${this.userId}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/user-profile/data?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/user-profile.vue:703", "=== API响应详情 ===");
          formatAppLog("log", "at pages/feed/user-profile.vue:704", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/user-profile.vue:705", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const data = response.data.data;
            this.userInfo = data.userInfo || {};
            this.dynamicStats = data.dynamicStats || {};
            this.collectionStats = data.collectionStats || {};
            if (this.userInfo.bio) {
              this.signatureText = this.userInfo.bio;
            }
            formatAppLog("log", "at pages/feed/user-profile.vue:718", "成功加载用户个人主页数据");
            formatAppLog("log", "at pages/feed/user-profile.vue:719", "用户信息:", this.userInfo);
            formatAppLog("log", "at pages/feed/user-profile.vue:720", "动态统计:", this.dynamicStats);
            formatAppLog("log", "at pages/feed/user-profile.vue:721", "收藏统计:", this.collectionStats);
          } else {
            formatAppLog("error", "at pages/feed/user-profile.vue:723", "加载用户个人主页数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载数据失败";
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/user-profile.vue:728", "加载用户个人主页数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
        } finally {
          this.loading = false;
        }
      },
      // 加载用户动态数据
      async loadUserDynamicData() {
        try {
          formatAppLog("log", "at pages/feed/user-profile.vue:739", "=== 开始加载用户动态数据 ===");
          formatAppLog("log", "at pages/feed/user-profile.vue:740", "用户ID:", this.userId);
          const response = await uni.request({
            url: `http://localhost:8888/api/user-profile/dynamic?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/user-profile.vue:750", "=== 动态数据API响应 ===");
          formatAppLog("log", "at pages/feed/user-profile.vue:751", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/user-profile.vue:752", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const data = response.data.data;
            this.personalPosts = data.posts || [];
            formatAppLog("log", "at pages/feed/user-profile.vue:758", "成功加载用户动态数据，共", this.personalPosts.length, "条");
          } else {
            formatAppLog("error", "at pages/feed/user-profile.vue:760", "加载用户动态数据失败:", response.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/user-profile.vue:763", "加载用户动态数据异常:", error);
        }
      },
      // 加载用户收藏数据
      async loadUserCollectionsData() {
        try {
          formatAppLog("log", "at pages/feed/user-profile.vue:770", "=== 开始加载用户收藏数据 ===");
          formatAppLog("log", "at pages/feed/user-profile.vue:771", "用户ID:", this.userId);
          const response = await uni.request({
            url: `http://localhost:8888/api/user-profile/collections?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/user-profile.vue:781", "=== 收藏数据API响应 ===");
          formatAppLog("log", "at pages/feed/user-profile.vue:782", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/user-profile.vue:783", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const data = response.data.data;
            this.collectedPosts = data.collectedPosts || [];
            formatAppLog("log", "at pages/feed/user-profile.vue:789", "成功加载用户收藏数据，共", this.collectedPosts.length, "条");
          } else {
            formatAppLog("error", "at pages/feed/user-profile.vue:791", "加载用户收藏数据失败:", response.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/user-profile.vue:794", "加载用户收藏数据异常:", error);
        }
      },
      // 测试后端连接
      async testConnection() {
        try {
          formatAppLog("log", "at pages/feed/user-profile.vue:801", "=== 测试后端连接 ===");
          const response = await uni.request({
            url: "http://localhost:8888/api/user-profile/test",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/user-profile.vue:810", "测试连接响应:", response);
          if (response.statusCode === 200) {
            uni.showToast({
              title: "后端连接正常",
              icon: "success"
            });
          } else {
            uni.showToast({
              title: "后端连接失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/user-profile.vue:824", "测试连接异常:", error);
          uni.showToast({
            title: "连接异常",
            icon: "error"
          });
        }
      },
      detectDevice() {
        const userAgent = navigator.userAgent.toLowerCase();
        this.isMobile = /mobile|android|iphone|ipad|phone/i.test(userAgent);
      },
      editSignature() {
        this.isEditing = true;
        this.charCount = 0;
      },
      saveSignature() {
        this.isEditing = false;
        formatAppLog("log", "at pages/feed/user-profile.vue:844", "Signature saved:", this.signatureText);
      },
      updateCharCount(event) {
        this.charCount = event.detail.value.length;
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/chat-feed"
        });
      },
      goToAIList() {
        uni.navigateTo({
          url: "/pages/ai-list/ai-list"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      openMenu() {
        this.showSideMenu = true;
      },
      openShare() {
        this.showShare = true;
      },
      closeShare() {
        this.showShare = false;
      },
      goToProfile() {
        uni.showToast({
          title: "已在个人资料页面",
          icon: "none"
        });
      },
      closeSideMenu() {
        this.showSideMenu = false;
      },
      goToMyAI() {
        uni.showToast({
          title: "我的AI功能",
          icon: "none"
        });
      },
      goToMyCertification() {
        uni.showToast({
          title: "我的认证功能",
          icon: "none"
        });
      },
      goToMyPreferences() {
        uni.showToast({
          title: "我的喜恶功能",
          icon: "none"
        });
      },
      goToMyAchievements() {
        uni.showToast({
          title: "我的成就功能",
          icon: "none"
        });
      },
      goToAlbum() {
        uni.showToast({
          title: "相册功能",
          icon: "none"
        });
      },
      goToHistoryComments() {
        uni.navigateTo({
          url: "/pages/my-comments/my-comments"
        });
      },
      goToBrowsingHistory() {
        uni.showToast({
          title: "浏览记录功能",
          icon: "none"
        });
      },
      goToDraftBox() {
        uni.showToast({
          title: "草稿箱功能",
          icon: "none"
        });
      },
      goToPurchaseRecord() {
        uni.navigateTo({
          url: "/pages/purchase-record/purchase-record"
        });
      },
      goToShoppingCart() {
        uni.showToast({
          title: "购物车功能",
          icon: "none"
        });
      },
      goToWallet() {
        uni.navigateTo({
          url: "/pages/wallet/wallet"
        });
      },
      goToShoppingCart() {
        uni.showToast({
          title: "购物车功能",
          icon: "none"
        });
      },
      goToEditProfile() {
        uni.showToast({
          title: "编辑资料功能",
          icon: "none"
        });
      },
      // 分享相关方法
      shareToWechat() {
        uni.showToast({
          title: "分享到微信",
          icon: "none"
        });
        this.closeShare();
      },
      shareToMoments() {
        uni.showToast({
          title: "分享到朋友圈",
          icon: "none"
        });
        this.closeShare();
      },
      shareToDouyin() {
        uni.showToast({
          title: "分享到抖音好友",
          icon: "none"
        });
        this.closeShare();
      },
      shareToDouyinPost() {
        uni.showToast({
          title: "发布到抖音",
          icon: "none"
        });
        this.closeShare();
      },
      shareToQQ() {
        uni.showToast({
          title: "分享到QQ",
          icon: "none"
        });
        this.closeShare();
      },
      shareAction(action) {
        const actionNames = {
          comment: "评论设置",
          gift: "送礼物",
          bookmark: "添加书签",
          search: "全文搜索",
          report: "举报与反馈"
        };
        uni.showToast({
          title: actionNames[action] || "功能开发中",
          icon: "none"
        });
        this.closeShare();
      },
      shareToFriend(friend) {
        uni.showToast({
          title: `分享给${friend.name}`,
          icon: "none"
        });
        this.closeShare();
      },
      handlePostClick(post) {
        if (post.novelInfo) {
          uni.navigateTo({
            url: `/pages/feed/novel-detail?id=${post.id}&title=${encodeURIComponent(post.novelInfo.title)}&author=${encodeURIComponent(post.username)}`
          });
        } else {
          uni.navigateTo({
            url: `/pages/feed/post-detail?postId=${post.id}&isOwnPost=true`
          });
        }
      },
      handleLike(post) {
        post.isLiked = !post.isLiked;
        post.likes = post.isLiked ? post.likes + 1 : post.likes - 1;
        uni.showToast({
          title: post.isLiked ? "点赞成功" : "取消点赞",
          icon: "none"
        });
      },
      handleDislike(post) {
        post.isDisliked = !post.isDisliked;
        post.dislikes = post.isDisliked ? post.dislikes + 1 : post.dislikes - 1;
        uni.showToast({
          title: post.isDisliked ? "点踩成功" : "取消点踩",
          icon: "none"
        });
      },
      handleFavorite(post) {
        post.isFavorited = !post.isFavorited;
        post.favorites = post.isFavorited ? post.favorites + 1 : post.favorites - 1;
        uni.showToast({
          title: post.isFavorited ? "收藏成功" : "取消收藏",
          icon: "none"
        });
      },
      handleComment(post) {
        uni.navigateTo({
          url: `/pages/comment/comment?postId=${post.id}`
        });
      },
      formatCount(count) {
        if (count >= 1e6) {
          return (count / 1e6).toFixed(1) + "M";
        } else if (count >= 1e4) {
          return (count / 1e3).toFixed(1) + "K";
        }
        return count;
      },
      getImageGridClass(imageCount) {
        if (imageCount === 1)
          return "single-image";
        if (imageCount === 2)
          return "two-images";
        if (imageCount === 3)
          return "three-images";
        if (imageCount === 4)
          return "four-images";
        return "grid-images";
      },
      previewImage(images, currentIndex) {
        uni.previewImage({
          urls: images,
          current: currentIndex,
          indicator: "number"
        });
      },
      switchTab(tabName) {
        formatAppLog("log", "at pages/feed/user-profile.vue:1098", "切换到标签:", tabName);
        this.activeTab = tabName;
        formatAppLog("log", "at pages/feed/user-profile.vue:1100", "当前激活标签:", this.activeTab);
        if (tabName === "dynamic") {
          this.loadUserDynamicData();
        } else if (tabName === "collections") {
          this.loadUserCollectionsData();
        }
      }
    }
  };
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部区域 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", { class: "blur-background" }, [
          vue.createElementVNode("view", { class: "pizza-image" })
        ]),
        vue.createElementVNode("view", { class: "header-buttons" }, [
          vue.createElementVNode("view", {
            class: "menu-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.openMenu && $options.openMenu(...args))
          }, [
            vue.createElementVNode("view", { class: "menu-icon" }, [
              vue.createElementVNode("view", { class: "menu-line" }),
              vue.createElementVNode("view", { class: "menu-line" }),
              vue.createElementVNode("view", { class: "menu-line" })
            ])
          ]),
          vue.createElementVNode("view", {
            class: "share-button",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.openShare && $options.openShare(...args))
          }, [
            vue.createElementVNode("text", { class: "share-icon" }, "📤")
          ])
        ])
      ]),
      vue.createCommentVNode(" 用户信息卡片 "),
      vue.createElementVNode("view", { class: "user-card" }, [
        vue.createElementVNode("view", { class: "avatar" }, [
          vue.createElementVNode("view", { class: "cat-avatar" }, [
            vue.createElementVNode("view", { class: "cat-body" }),
            vue.createElementVNode("view", { class: "cat-ears" }, [
              vue.createElementVNode("view", { class: "ear ear-left" }),
              vue.createElementVNode("view", { class: "ear ear-right" })
            ]),
            vue.createElementVNode("view", { class: "cat-face" }, [
              vue.createElementVNode("view", { class: "cat-eyes" }, [
                vue.createElementVNode("view", { class: "cat-eye eye-left" }),
                vue.createElementVNode("view", { class: "cat-eye eye-right" })
              ]),
              vue.createElementVNode("view", { class: "cat-nose" }),
              vue.createElementVNode("view", { class: "cat-mouth" })
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "user-info" }, [
          vue.createElementVNode(
            "text",
            { class: "username" },
            vue.toDisplayString($data.userInfo.username || "猫又屋之主"),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "text",
            { class: "location" },
            vue.toDisplayString($data.userInfo.location || "中国-南京"),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "vip-info" }, [
            vue.createElementVNode(
              "text",
              { class: "vip-text" },
              "VIP lv" + vue.toDisplayString($data.userInfo.level || 10),
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "text",
              { class: "exp-text" },
              "经验" + vue.toDisplayString($data.userInfo.gold || 0) + "/" + vue.toDisplayString(($data.userInfo.level || 10) * 400),
              1
              /* TEXT */
            )
          ])
        ])
      ]),
      vue.createCommentVNode(" 用户签名区域 "),
      vue.createElementVNode("view", {
        class: "signature-area",
        onClick: _cache[5] || (_cache[5] = (...args) => $options.editSignature && $options.editSignature(...args))
      }, [
        !$data.isEditing ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "signature-input-container"
        }, [
          vue.createElementVNode(
            "text",
            { class: "signature-text" },
            vue.toDisplayString($data.signatureText),
            1
            /* TEXT */
          )
        ])) : (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "signature-input-container"
        }, [
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              class: "signature-input",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.signatureText = $event),
              maxlength: 100,
              placeholder: "请输入个性签名",
              onBlur: _cache[3] || (_cache[3] = (...args) => $options.saveSignature && $options.saveSignature(...args)),
              onInput: _cache[4] || (_cache[4] = (...args) => $options.updateCharCount && $options.updateCharCount(...args)),
              focus: ""
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.signatureText]
          ]),
          vue.createElementVNode(
            "view",
            { class: "char-count" },
            vue.toDisplayString($data.charCount) + "/100",
            1
            /* TEXT */
          )
        ]))
      ]),
      vue.createCommentVNode(" 虚拟键盘 "),
      $data.isEditing && $data.isMobile ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "virtual-keyboard"
      }, [
        vue.createCommentVNode(" 数字行 "),
        vue.createElementVNode("view", { class: "keyboard-row" }, [
          (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList(["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"], (num) => {
              return vue.createElementVNode("view", {
                class: "key",
                key: num
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "key-text" },
                  vue.toDisplayString(num),
                  1
                  /* TEXT */
                )
              ]);
            }),
            64
            /* STABLE_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 字母行1 "),
        vue.createElementVNode("view", { class: "keyboard-row" }, [
          (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList(["q", "w", "e", "r", "t", "y", "u", "i", "o", "p"], (letter) => {
              return vue.createElementVNode("view", {
                class: "key",
                key: letter
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "key-text" },
                  vue.toDisplayString(letter),
                  1
                  /* TEXT */
                )
              ]);
            }),
            64
            /* STABLE_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 字母行2 "),
        vue.createElementVNode("view", { class: "keyboard-row" }, [
          vue.createElementVNode("view", { class: "key shift-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, "⇧")
          ]),
          (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList(["a", "s", "d", "f", "g", "h", "j", "k", "l"], (letter) => {
              return vue.createElementVNode("view", {
                class: "key",
                key: letter
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "key-text" },
                  vue.toDisplayString(letter),
                  1
                  /* TEXT */
                )
              ]);
            }),
            64
            /* STABLE_FRAGMENT */
          )),
          vue.createElementVNode("view", { class: "key backspace-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, "⌫")
          ])
        ]),
        vue.createCommentVNode(" 字母行3 "),
        vue.createElementVNode("view", { class: "keyboard-row" }, [
          vue.createElementVNode("view", { class: "key symbol-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, "?123")
          ]),
          (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList(["z", "x", "c", "v", "b", "n", "m"], (letter) => {
              return vue.createElementVNode("view", {
                class: "key",
                key: letter
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "key-text" },
                  vue.toDisplayString(letter),
                  1
                  /* TEXT */
                )
              ]);
            }),
            64
            /* STABLE_FRAGMENT */
          )),
          vue.createElementVNode("view", { class: "key comma-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, ",")
          ])
        ]),
        vue.createCommentVNode(" 底部行 "),
        vue.createElementVNode("view", { class: "keyboard-row bottom-row" }, [
          vue.createElementVNode("view", { class: "key emoji-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, "😊")
          ]),
          vue.createElementVNode("view", { class: "key space-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, "空格")
          ]),
          vue.createElementVNode("view", { class: "key period-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, ".")
          ]),
          vue.createElementVNode("view", { class: "key enter-key" }, [
            vue.createElementVNode("text", { class: "key-text" }, "完成")
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 导航标签 "),
      vue.createElementVNode("view", { class: "nav-tabs" }, [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["tab", { "active": $data.activeTab === "dynamic" }]),
            onClick: _cache[6] || (_cache[6] = ($event) => $options.switchTab("dynamic"))
          },
          [
            vue.createElementVNode("text", { class: "tab-text" }, "动态"),
            $data.activeTab === "dynamic" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "tab-underline"
            })) : vue.createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["tab", { "active": $data.activeTab === "collections" }]),
            onClick: _cache[7] || (_cache[7] = ($event) => $options.switchTab("collections"))
          },
          [
            vue.createElementVNode("text", { class: "tab-text" }, "收藏"),
            $data.activeTab === "collections" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "tab-underline"
            })) : vue.createCommentVNode("v-if", true)
          ],
          2
          /* CLASS */
        ),
        vue.createElementVNode("view", { class: "search-icon" }, "🔍")
      ]),
      vue.createCommentVNode(" 标签内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "加载中...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误状态 "),
        $data.hasError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-container"
        }, [
          vue.createElementVNode("text", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "error-actions" }, [
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[8] || (_cache[8] = (...args) => $options.loadUserProfileData && $options.loadUserProfileData(...args))
            }, "重试"),
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.testConnection && $options.testConnection(...args))
            }, "测试连接")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 动态标签内容 "),
        $data.activeTab === "dynamic" && !$data.loading && !$data.hasError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "tab-panel"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.personalPosts, (post, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "post-item",
                key: index,
                onClick: ($event) => $options.handlePostClick(post)
              }, [
                vue.createElementVNode("view", { class: "post-header" }, [
                  vue.createElementVNode("view", { class: "post-avatar" }, [
                    vue.createElementVNode("view", { class: "small-cat-avatar" }, [
                      vue.createElementVNode("view", { class: "small-cat-body" }),
                      vue.createElementVNode("view", { class: "small-cat-face" }, [
                        vue.createElementVNode("view", { class: "small-cat-eyes" }, [
                          vue.createElementVNode("view", { class: "small-cat-eye" }),
                          vue.createElementVNode("view", { class: "small-cat-eye" })
                        ])
                      ])
                    ])
                  ]),
                  vue.createElementVNode("view", { class: "post-info" }, [
                    vue.createElementVNode("text", { class: "post-username" }, "猫又屋之主"),
                    vue.createElementVNode(
                      "text",
                      { class: "post-time" },
                      vue.toDisplayString(post.timeAgo),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                vue.createElementVNode("view", { class: "post-content" }, [
                  vue.createCommentVNode(" 内容类型标签 "),
                  post.contentType ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "content-type"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "type-label" },
                      vue.toDisplayString(post.contentType) + ":",
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 文字内容 "),
                  post.textContent ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "text-content"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "post-title" },
                      vue.toDisplayString(post.textContent),
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 小说信息 "),
                  post.novelInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 2,
                    class: "novel-info"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "post-title" },
                      vue.toDisplayString(post.novelInfo.title),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "novel-desc" },
                      vue.toDisplayString(post.novelInfo.description),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "novel-rating" },
                      "评分: " + vue.toDisplayString(post.novelInfo.rating),
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 图片内容 "),
                  post.images && post.images.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 3,
                    class: "image-content"
                  }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["image-grid", $options.getImageGridClass(post.images.length)])
                      },
                      [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(post.images, (image, imgIndex) => {
                            return vue.openBlock(), vue.createElementBlock("image", {
                              key: imgIndex,
                              class: "content-image",
                              src: image,
                              mode: "aspectFill",
                              onClick: vue.withModifiers(($event) => $options.previewImage(post.images, imgIndex), ["stop"])
                            }, null, 8, ["src", "onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ],
                      2
                      /* CLASS */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 小说封面 "),
                  post.novelCover ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 4,
                    class: "main-image"
                  }, [
                    vue.createElementVNode("image", {
                      class: "novel-cover",
                      src: post.novelCover,
                      mode: "aspectFill"
                    }, null, 8, ["src"]),
                    post.novelInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "image-overlay"
                    }, [
                      vue.createElementVNode(
                        "text",
                        { class: "overlay-title" },
                        vue.toDisplayString(post.novelInfo.title),
                        1
                        /* TEXT */
                      )
                    ])) : vue.createCommentVNode("v-if", true)
                  ])) : vue.createCommentVNode("v-if", true)
                ]),
                vue.createCommentVNode(" 互动指标 "),
                vue.createElementVNode("view", { class: "engagement-metrics" }, [
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleLike(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isLiked }])
                      },
                      "👍",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isLiked }])
                      },
                      vue.toDisplayString($options.formatCount(post.likes)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleDislike(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isDisliked }])
                      },
                      "👎",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isDisliked }])
                      },
                      vue.toDisplayString($options.formatCount(post.dislikes)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleFavorite(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isFavorited }])
                      },
                      "⭐",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isFavorited }])
                      },
                      vue.toDisplayString($options.formatCount(post.favorites)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleComment(post), ["stop"])
                  }, [
                    vue.createElementVNode("text", { class: "metric-icon" }, "💬"),
                    vue.createElementVNode(
                      "text",
                      { class: "metric-count" },
                      vue.toDisplayString($options.formatCount(post.comments)),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 收藏标签内容 "),
        $data.activeTab === "collections" && !$data.loading && !$data.hasError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "tab-panel"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.collectedPosts, (post, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "post-item",
                key: index,
                onClick: ($event) => $options.handlePostClick(post)
              }, [
                vue.createElementVNode("view", { class: "post-header" }, [
                  vue.createElementVNode("view", { class: "post-avatar" }, [
                    vue.createElementVNode("view", { class: "small-cat-avatar" }, [
                      vue.createElementVNode("view", { class: "small-cat-body" }),
                      vue.createElementVNode("view", { class: "small-cat-face" }, [
                        vue.createElementVNode("view", { class: "small-cat-eyes" }, [
                          vue.createElementVNode("view", { class: "small-cat-eye" }),
                          vue.createElementVNode("view", { class: "small-cat-eye" })
                        ])
                      ])
                    ])
                  ]),
                  vue.createElementVNode("view", { class: "post-info" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "post-username" },
                      vue.toDisplayString(post.username),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "post-time" },
                      vue.toDisplayString(post.timeAgo),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                vue.createElementVNode("view", { class: "post-content" }, [
                  vue.createCommentVNode(" 内容类型标签 "),
                  post.contentType ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "content-type"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "type-label" },
                      vue.toDisplayString(post.contentType) + ":",
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 文字内容 "),
                  post.textContent ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "text-content"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "post-title" },
                      vue.toDisplayString(post.textContent),
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 小说信息 "),
                  post.novelInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 2,
                    class: "novel-info"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "post-title" },
                      vue.toDisplayString(post.novelInfo.title),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "novel-desc" },
                      vue.toDisplayString(post.novelInfo.description),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "novel-rating" },
                      "评分: " + vue.toDisplayString(post.novelInfo.rating),
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 图片内容 "),
                  post.images && post.images.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 3,
                    class: "image-content"
                  }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["image-grid", $options.getImageGridClass(post.images.length)])
                      },
                      [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(post.images, (image, imgIndex) => {
                            return vue.openBlock(), vue.createElementBlock("image", {
                              key: imgIndex,
                              class: "content-image",
                              src: image,
                              mode: "aspectFill",
                              onClick: vue.withModifiers(($event) => $options.previewImage(post.images, imgIndex), ["stop"])
                            }, null, 8, ["src", "onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ],
                      2
                      /* CLASS */
                    )
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" 小说封面 "),
                  post.novelCover ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 4,
                    class: "main-image"
                  }, [
                    vue.createElementVNode("image", {
                      class: "novel-cover",
                      src: post.novelCover,
                      mode: "aspectFill"
                    }, null, 8, ["src"]),
                    post.novelInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "image-overlay"
                    }, [
                      vue.createElementVNode(
                        "text",
                        { class: "overlay-title" },
                        vue.toDisplayString(post.novelInfo.title),
                        1
                        /* TEXT */
                      )
                    ])) : vue.createCommentVNode("v-if", true)
                  ])) : vue.createCommentVNode("v-if", true)
                ]),
                vue.createCommentVNode(" 互动指标 "),
                vue.createElementVNode("view", { class: "engagement-metrics" }, [
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleLike(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isLiked }])
                      },
                      "👍",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isLiked }])
                      },
                      vue.toDisplayString($options.formatCount(post.likes)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleDislike(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isDisliked }])
                      },
                      "👎",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isDisliked }])
                      },
                      vue.toDisplayString($options.formatCount(post.dislikes)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleFavorite(post), ["stop"])
                  }, [
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-icon", { "active": post.isFavorited }])
                      },
                      "⭐",
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["metric-count", { "active": post.isFavorited }])
                      },
                      vue.toDisplayString($options.formatCount(post.favorites)),
                      3
                      /* TEXT, CLASS */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "metric-item",
                    onClick: vue.withModifiers(($event) => $options.handleComment(post), ["stop"])
                  }, [
                    vue.createElementVNode("text", { class: "metric-icon" }, "💬"),
                    vue.createElementVNode(
                      "text",
                      { class: "metric-count" },
                      vue.toDisplayString($options.formatCount(post.comments)),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 分享弹层 "),
      $data.showShare ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "share-overlay",
        onClick: _cache[17] || (_cache[17] = (...args) => $options.closeShare && $options.closeShare(...args))
      }, [
        vue.createElementVNode("view", {
          class: "share-sheet",
          onClick: _cache[16] || (_cache[16] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "sheet-handle" }),
          vue.createElementVNode("text", { class: "sheet-title" }, "分享到"),
          vue.createElementVNode("view", { class: "share-friends" }, [
            vue.createElementVNode("scroll-view", {
              class: "friends-scroll",
              "scroll-x": "true"
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.shareFriends, (friend, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "friend-item",
                    key: index,
                    onClick: ($event) => $options.shareToFriend(friend)
                  }, [
                    vue.createElementVNode("view", { class: "friend-avatar" }, [
                      vue.createElementVNode("image", {
                        class: "friend-avatar-img",
                        src: friend.avatar,
                        mode: "aspectFill"
                      }, null, 8, ["src"])
                    ]),
                    vue.createElementVNode(
                      "text",
                      { class: "friend-name" },
                      vue.toDisplayString(friend.name.length > 3 ? friend.name.substring(0, 3) + "..." : friend.name),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ]),
          vue.createElementVNode("view", { class: "share-options" }, [
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[10] || (_cache[10] = (...args) => $options.shareToWechat && $options.shareToWechat(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg wechat" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "微信")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[11] || (_cache[11] = (...args) => $options.shareToMoments && $options.shareToMoments(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg moments" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "朋友圈")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[12] || (_cache[12] = (...args) => $options.shareToDouyin && $options.shareToDouyin(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg douyin" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "抖音好友")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[13] || (_cache[13] = (...args) => $options.shareToDouyinPost && $options.shareToDouyinPost(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg douyin-post" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "发布到抖音")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[14] || (_cache[14] = (...args) => $options.shareToQQ && $options.shareToQQ(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg qq" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_2,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "QQ")
            ])
          ]),
          vue.createElementVNode("view", {
            class: "sheet-cancel",
            onClick: _cache[15] || (_cache[15] = (...args) => $options.closeShare && $options.closeShare(...args))
          }, [
            vue.createElementVNode("text", { class: "cancel-text" }, "取消")
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-nav" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[18] || (_cache[18] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", { class: "nav-item" }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item active",
          onClick: _cache[19] || (_cache[19] = (...args) => $options.goToAIList && $options.goToAIList(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-icon" }, "AI")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[20] || (_cache[20] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[21] || (_cache[21] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("view", { class: "nav-avatar" }, [
            vue.createElementVNode("view", { class: "mini-cat-avatar" }, [
              vue.createElementVNode("view", { class: "mini-cat-body" }),
              vue.createElementVNode("view", { class: "mini-cat-face" }, [
                vue.createElementVNode("view", { class: "mini-cat-eyes" }, [
                  vue.createElementVNode("view", { class: "mini-cat-eye" }),
                  vue.createElementVNode("view", { class: "mini-cat-eye" })
                ])
              ])
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" }),
      vue.createCommentVNode(" 左侧菜单面板 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["side-menu", { "active": $data.showSideMenu }]),
          onClick: _cache[36] || (_cache[36] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
        },
        [
          vue.createElementVNode("view", {
            class: "menu-content",
            onClick: _cache[35] || (_cache[35] = vue.withModifiers(() => {
            }, ["stop"]))
          }, [
            vue.createCommentVNode(" 菜单头部 "),
            vue.createElementVNode("view", { class: "menu-header" }, [
              vue.createElementVNode("view", {
                class: "menu-close",
                onClick: _cache[22] || (_cache[22] = (...args) => $options.closeSideMenu && $options.closeSideMenu(...args))
              }, [
                vue.createElementVNode("text", { class: "close-icon" }, "×")
              ])
            ]),
            vue.createCommentVNode(" 菜单选项列表 "),
            vue.createElementVNode("view", { class: "menu-list" }, [
              vue.createCommentVNode(" 我的AI "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[23] || (_cache[23] = (...args) => $options.goToMyAI && $options.goToMyAI(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的AI")
                ])
              ]),
              vue.createCommentVNode(" 我的认证、喜恶、成就 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[24] || (_cache[24] = (...args) => $options.goToMyCertification && $options.goToMyCertification(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的认证")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[25] || (_cache[25] = (...args) => $options.goToMyPreferences && $options.goToMyPreferences(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的喜恶")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[26] || (_cache[26] = (...args) => $options.goToMyAchievements && $options.goToMyAchievements(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "我的成就")
                ])
              ]),
              vue.createCommentVNode(" 相册、历史评论、浏览记录、草稿箱 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[27] || (_cache[27] = (...args) => $options.goToAlbum && $options.goToAlbum(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "相册")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[28] || (_cache[28] = (...args) => $options.goToHistoryComments && $options.goToHistoryComments(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "历史评论")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[29] || (_cache[29] = (...args) => $options.goToBrowsingHistory && $options.goToBrowsingHistory(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "浏览记录")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[30] || (_cache[30] = (...args) => $options.goToDraftBox && $options.goToDraftBox(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "草稿箱")
                ])
              ]),
              vue.createCommentVNode(" 购买记录、购物车、钱包 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[31] || (_cache[31] = (...args) => $options.goToPurchaseRecord && $options.goToPurchaseRecord(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "购买记录")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[32] || (_cache[32] = (...args) => $options.goToShoppingCart && $options.goToShoppingCart(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "购物车")
                ]),
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[33] || (_cache[33] = (...args) => $options.goToWallet && $options.goToWallet(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "钱包")
                ])
              ]),
              vue.createCommentVNode(" 编辑资料 "),
              vue.createElementVNode("view", { class: "menu-section" }, [
                vue.createElementVNode("view", {
                  class: "menu-item",
                  onClick: _cache[34] || (_cache[34] = (...args) => $options.goToEditProfile && $options.goToEditProfile(...args))
                }, [
                  vue.createElementVNode("text", { class: "menu-text" }, "编辑资料")
                ])
              ])
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const PagesFeedUserProfile = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$M], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/user-profile.vue"]]);
  const _sfc_main$M = {
    name: "MyComments",
    data() {
      return {};
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/chat/chat"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      }
    }
  };
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "my-comments-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="nav-left" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view>\n			<view class="nav-center">\n				<text class="nav-title">我的评论</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 评论列表 "),
      vue.createElementVNode("view", { class: "comments-container" }, [
        vue.createCommentVNode(" 第一个评论 "),
        vue.createElementVNode("view", { class: "comment-item" }, [
          vue.createElementVNode("view", { class: "comment-left" }, [
            vue.createElementVNode("view", { class: "user-avatar" }, [
              vue.createElementVNode("view", { class: "cat-avatar" }, [
                vue.createElementVNode("view", { class: "cat-body" }),
                vue.createElementVNode("view", { class: "cat-face" }, [
                  vue.createElementVNode("view", { class: "cat-eyes" }, [
                    vue.createElementVNode("view", { class: "cat-eye" }),
                    vue.createElementVNode("view", { class: "cat-eye" })
                  ])
                ])
              ])
            ]),
            vue.createElementVNode("view", { class: "comment-info" }, [
              vue.createElementVNode("text", { class: "username" }, "猫又屋之主"),
              vue.createElementVNode("text", { class: "timestamp" }, "刚刚"),
              vue.createElementVNode("text", { class: "comment-text" }, "有点太雷了,报看"),
              vue.createElementVNode("view", { class: "action-button" }, [
                vue.createElementVNode("text", { class: "like-icon" }, "👍")
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "comment-right" }, [
            vue.createElementVNode("view", { class: "content-thumbnail" }, [
              vue.createElementVNode("view", { class: "thumbnail-placeholder" })
            ])
          ])
        ]),
        vue.createCommentVNode(" 第二个评论 "),
        vue.createElementVNode("view", { class: "comment-item" }, [
          vue.createElementVNode("view", { class: "comment-left" }, [
            vue.createElementVNode("view", { class: "user-avatar" }, [
              vue.createElementVNode("view", { class: "cat-avatar" }, [
                vue.createElementVNode("view", { class: "cat-body" }),
                vue.createElementVNode("view", { class: "cat-face" }, [
                  vue.createElementVNode("view", { class: "cat-eyes" }, [
                    vue.createElementVNode("view", { class: "cat-eye" }),
                    vue.createElementVNode("view", { class: "cat-eye" })
                  ])
                ])
              ])
            ]),
            vue.createElementVNode("view", { class: "comment-info" }, [
              vue.createElementVNode("text", { class: "username" }, "猫又屋之主"),
              vue.createElementVNode("text", { class: "timestamp" }, "2小时前"),
              vue.createElementVNode("text", { class: "comment-text" }, "非常好猫猫,爱来自瓷器"),
              vue.createElementVNode("view", { class: "action-button" }, [
                vue.createElementVNode("text", { class: "like-icon" }, "👍")
              ])
            ])
          ]),
          vue.createElementVNode("view", { class: "comment-right" }, [
            vue.createElementVNode("view", { class: "content-thumbnail" }, [
              vue.createElementVNode("view", { class: "thumbnail-placeholder cat-thumbnail" })
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createElementVNode("view", { class: "bottom-navigation" }, [
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "首页")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToChatList && $options.goToChatList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "消息")
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToAIChat && $options.goToAIChat(...args))
        }, [
          vue.createElementVNode("view", { class: "ai-tab" }, [
            vue.createElementVNode("text", { class: "ai-text" }, "AI")
          ])
        ]),
        vue.createElementVNode("view", {
          class: "nav-item",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToFriendList && $options.goToFriendList(...args))
        }, [
          vue.createElementVNode("text", { class: "nav-text" }, "好友")
        ]),
        vue.createElementVNode("view", {
          class: "nav-avatar",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("image", {
            class: "avatar-small",
            src: "",
            mode: "aspectFill"
          })
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesFeedMyComments = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$L], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/my-comments.vue"]]);
  const _sfc_main$L = {
    name: "NovelDetailPage",
    data() {
      return {
        novelId: "",
        userId: 1000100,
        // 默认用户ID
        novelTitle: "",
        synopsisExpanded: false,
        reviewExpanded: [false, false],
        showNovelContent: false,
        isFollowed: false,
        scrollTop: 0,
        loading: false,
        hasError: false,
        errorMessage: "",
        novelData: {
          title: "游戏降临: 我要这个这个还有这个 (游戏入侵)",
          author: "猫不秃",
          rating: "9.5",
          reviewCount: "11.9万人点评",
          readerCount: "157.4万人",
          wordCount: "214.7万字",
          updateDays: "连续更新268天",
          coverImage: "/static/novel-cover.jpg",
          tags: ["#原创小说", "#游戏体育", "#重生", "#无CP"],
          synopsis: "【游戏入侵+无cp+升级流+独狼+游戏】(又名: 游戏入侵) 这是一个关于游戏入侵现实的故事，主角在游戏中获得了强大的能力，开始了一段惊险刺激的冒险之旅。故事融合了游戏元素和现实世界，充满了悬念和惊喜。主角从一个普通玩家逐渐成长为游戏世界的强者，在这个过程中不仅要面对游戏中的挑战，还要处理现实世界中的各种问题。",
          reviews: [
            {
              reviewer: "书友123456",
              avatar: "/static/avatar1.png",
              content: "文笔剧情很好,很难得的女强无cp游戏侵入现实的文,世界观设计都很有画面感,女主也很聪明,抓...",
              readTime: "阅读不足30分钟后点评"
            },
            {
              reviewer: "书友789012",
              avatar: "/static/avatar2.png",
              content: "现在更的全部看完了,技能/道具/天赋设定都好新颖,不会一样望去就猜的大差不差食之无味。而且主角的成长路线很合理，每个阶段都有相应的挑战和收获，让人看得停不下来。",
              readTime: "阅读3小时后点评"
            }
          ],
          chapters: []
          // 章节列表
        }
      };
    },
    onLoad(options) {
      formatAppLog("log", "at pages/feed/novel-detail.vue:228", "=== 小说详情页面加载 ===");
      formatAppLog("log", "at pages/feed/novel-detail.vue:229", "接收到的参数:", options);
      if (options.id) {
        this.novelId = options.id;
      }
      if (options.userId) {
        this.userId = parseInt(options.userId);
      }
      if (options.title) {
        this.novelTitle = decodeURIComponent(options.title);
        this.novelData.title = this.novelTitle;
      }
      if (options.author) {
        this.novelData.author = decodeURIComponent(options.author);
      }
      if (options.rating) {
        this.novelData.rating = decodeURIComponent(options.rating);
      }
      if (options.reviewCount) {
        this.novelData.reviewCount = decodeURIComponent(options.reviewCount);
      }
      if (options.readerCount) {
        this.novelData.readerCount = decodeURIComponent(options.readerCount);
      }
      if (options.wordCount) {
        this.novelData.wordCount = decodeURIComponent(options.wordCount);
      }
      if (options.updateDays) {
        this.novelData.updateDays = decodeURIComponent(options.updateDays);
      }
      if (options.tags) {
        this.novelData.tags = decodeURIComponent(options.tags).split(",");
      }
      if (options.synopsis) {
        this.novelData.synopsis = decodeURIComponent(options.synopsis);
      }
      if (this.novelId) {
        this.loadNovelDetailFromAPI();
      } else {
        this.loadNovelData();
      }
      formatAppLog("log", "at pages/feed/novel-detail.vue:277", "更新后的小说数据:", this.novelData);
    },
    methods: {
      // 从后端API加载小说详情数据
      async loadNovelDetailFromAPI() {
        try {
          formatAppLog("log", "at pages/feed/novel-detail.vue:283", "=== 开始从后端加载小说详情数据 ===");
          formatAppLog("log", "at pages/feed/novel-detail.vue:284", "小说ID:", this.novelId);
          formatAppLog("log", "at pages/feed/novel-detail.vue:285", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/novel-detail.vue:286", "请求URL:", `http://localhost:8888/api/novel-detail/data?novelId=${this.novelId}&userId=${this.userId}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/novel-detail/data?novelId=${this.novelId}&userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/novel-detail.vue:300", "=== 小说详情API响应详情 ===");
          formatAppLog("log", "at pages/feed/novel-detail.vue:301", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/novel-detail.vue:302", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const apiData = response.data.data;
            this.novelData = {
              ...this.novelData,
              // 保留现有数据
              ...apiData,
              // 用API数据覆盖
              // 确保某些字段的格式正确
              title: apiData.title || this.novelData.title,
              author: apiData.author || this.novelData.author,
              rating: apiData.rating || this.novelData.rating,
              reviewCount: apiData.reviewCount || this.novelData.reviewCount,
              readerCount: apiData.readerCount || this.novelData.readerCount,
              wordCount: apiData.wordCount || this.novelData.wordCount,
              updateDays: apiData.updateDays || this.novelData.updateDays,
              coverImage: apiData.coverImage || this.novelData.coverImage,
              tags: apiData.tags || this.novelData.tags,
              synopsis: apiData.synopsis || this.novelData.synopsis,
              chapters: apiData.chapters || [],
              reviews: apiData.reviews || []
              // 确保书评数据被正确设置
            };
            this.isFollowed = apiData.isFavorited || false;
            formatAppLog("log", "at pages/feed/novel-detail.vue:329", "成功加载小说详情数据");
            formatAppLog("log", "at pages/feed/novel-detail.vue:330", "章节数量:", this.novelData.chapters.length);
            formatAppLog("log", "at pages/feed/novel-detail.vue:331", "书评数量:", this.novelData.reviews.length);
            formatAppLog("log", "at pages/feed/novel-detail.vue:332", "书评数据:", this.novelData.reviews);
            uni.showToast({
              title: "加载成功",
              icon: "success",
              duration: 1500
            });
          } else {
            formatAppLog("error", "at pages/feed/novel-detail.vue:342", "加载小说详情数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载数据失败";
            uni.showToast({
              title: "加载数据失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/novel-detail.vue:351", "加载小说详情数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      loadNovelData() {
        const novelDatabase = {
          1: {
            title: "神秘的猫又",
            author: "猫又屋之主",
            rating: "4.5",
            reviewCount: "2.3万人点评",
            readerCount: "45.2万人",
            wordCount: "156.8万字",
            updateDays: "连续更新156天",
            coverImage: "/static/novel-cover.png",
            tags: ["#原创小说", "#奇幻", "#猫又", "#冒险"],
            synopsis: "在一个古老的村庄里，流传着一个关于猫又的神秘传说。主角意外获得了猫又的力量，开始了一段惊险刺激的冒险之旅。故事融合了东方神话和现代元素，充满了悬念和惊喜。",
            reviews: [
              {
                reviewer: "书友猫奴001",
                avatar: "/static/avatar1.png",
                content: "猫又题材很新颖，文笔流畅，剧情紧凑。主角的成长路线很合理，每个阶段都有相应的挑战和收获。",
                readTime: "阅读2小时后点评"
              },
              {
                reviewer: "书友奇幻迷",
                avatar: "/static/avatar2.png",
                content: "世界观设定很有创意，猫又的能力系统设计得很完整。作者对细节的把控很到位，让人看得停不下来。",
                readTime: "阅读5小时后点评"
              }
            ]
          },
          2: {
            title: "猫又的奇幻之旅",
            author: "猫又屋之主",
            rating: "4.8",
            reviewCount: "3.1万人点评",
            readerCount: "67.8万人",
            wordCount: "298.5万字",
            updateDays: "连续更新298天",
            coverImage: "/static/novel-cover.png",
            tags: ["#原创小说", "#奇幻", "#猫又", "#成长"],
            synopsis: "猫又发现了一个通往神秘世界的传送门。在这个充满魔法和危险的世界里，她必须学会运用自己的力量，结交朋友，面对各种挑战。这是一个关于成长、友情和勇气的故事。",
            reviews: [
              {
                reviewer: "书友冒险家",
                avatar: "/static/avatar3.png",
                content: "传送门设定很吸引人，每个世界都有独特的规则和文化。主角的成长过程很真实，不是一蹴而就的。",
                readTime: "阅读8小时后点评"
              },
              {
                reviewer: "书友魔法师",
                avatar: "/static/avatar4.png",
                content: "魔法系统设计得很完整，世界观构建得很详细。每个角色都有鲜明的个性，剧情发展很合理。",
                readTime: "阅读12小时后点评"
              }
            ]
          },
          4: {
            title: "游戏降临: 我要这个这个还有这个 (游戏入侵)",
            author: "猫不秃",
            rating: "9.5",
            reviewCount: "11.9万人点评",
            readerCount: "157.4万人",
            wordCount: "214.7万字",
            updateDays: "连续更新268天",
            coverImage: "/static/novel-cover.jpg",
            tags: ["#原创小说", "#游戏体育", "#重生", "#无CP"],
            synopsis: "【游戏入侵+无cp+升级流+独狼+游戏】(又名: 游戏入侵) 这是一个关于游戏入侵现实的故事，主角在游戏中获得了强大的能力，开始了一段惊险刺激的冒险之旅。故事融合了游戏元素和现实世界，充满了悬念和惊喜。主角从一个普通玩家逐渐成长为游戏世界的强者，在这个过程中不仅要面对游戏中的挑战，还要处理现实世界中的各种问题。",
            reviews: [
              {
                reviewer: "书友123456",
                avatar: "/static/avatar1.png",
                content: "文笔剧情很好,很难得的女强无cp游戏侵入现实的文,世界观设计都很有画面感,女主也很聪明,抓...",
                readTime: "阅读不足30分钟后点评"
              },
              {
                reviewer: "书友789012",
                avatar: "/static/avatar2.png",
                content: "现在更的全部看完了,技能/道具/天赋设定都好新颖,不会一样望去就猜的大差不差食之无味。而且主角的成长路线很合理，每个阶段都有相应的挑战和收获，让人看得停不下来。",
                readTime: "阅读3小时后点评"
              }
            ]
          }
        };
        if (novelDatabase[this.novelId]) {
          const novel = novelDatabase[this.novelId];
          this.novelData = {
            ...this.novelData,
            // 保留默认值
            ...novel
            // 用新数据覆盖
          };
          this.synopsisExpanded = false;
          this.reviewExpanded = new Array(novel.reviews.length).fill(false);
        }
      },
      goBack() {
        uni.navigateBack();
      },
      startListening() {
        uni.showToast({
          title: "听书功能开发中",
          icon: "none"
        });
      },
      followAuthor() {
        this.isFollowed = !this.isFollowed;
        uni.showToast({
          title: this.isFollowed ? "关注成功" : "取消关注",
          icon: "success"
        });
      },
      toggleSynopsis() {
        this.synopsisExpanded = !this.synopsisExpanded;
      },
      toggleReview(index) {
        this.$set(this.reviewExpanded, index, !this.reviewExpanded[index]);
      },
      goToMoreReviews() {
        uni.navigateTo({
          url: `/pages/feed/novel-more-reviews?novelId=${this.novelId}&title=${encodeURIComponent(this.novelData.title)}&author=${encodeURIComponent(this.novelData.author)}`
        });
      },
      // 书评互动方法
      async handleReviewLike(review, index) {
        try {
          formatAppLog("log", "at pages/feed/novel-detail.vue:492", "=== 开始处理书评点赞 ===");
          formatAppLog("log", "at pages/feed/novel-detail.vue:493", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/novel-detail.vue:494", "评论ID:", review.commentId);
          const response = await uni.request({
            url: `http://localhost:8888/api/novel-detail/comment/like?userId=${this.userId}&commentId=${review.commentId}`,
            method: "POST",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/novel-detail.vue:504", "=== 书评点赞API响应 ===");
          formatAppLog("log", "at pages/feed/novel-detail.vue:505", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/novel-detail.vue:506", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const result = response.data.data;
            review.isLiked = result.isLiked;
            review.likes = result.likeCount;
            if (review.isLiked && review.isDisliked) {
              review.isDisliked = false;
              review.dislikes--;
            }
            uni.showToast({
              title: result.message,
              icon: "success",
              duration: 1e3
            });
          } else {
            formatAppLog("error", "at pages/feed/novel-detail.vue:527", "书评点赞失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "操作失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/novel-detail.vue:534", "书评点赞异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        }
      },
      handleReviewDislike(review, index) {
        review.isDisliked = !review.isDisliked;
        if (review.isDisliked) {
          review.dislikes++;
          if (review.isLiked) {
            review.isLiked = false;
            review.likes--;
          }
        } else {
          review.dislikes--;
        }
        uni.showToast({
          title: review.isDisliked ? "点踩成功" : "取消点踩",
          icon: "success",
          duration: 1e3
        });
      },
      handleReviewComment(review, index) {
        uni.navigateTo({
          url: `/pages/feed/novel-more-reviews?novelId=${this.novelId}&title=${encodeURIComponent(this.novelData.title)}&author=${encodeURIComponent(this.novelData.author)}&commentId=${review.commentId}`
        });
      },
      // 格式化数字显示
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      startReading() {
        formatAppLog("log", "at pages/feed/novel-detail.vue:577", "开始滚动到小说内容区域");
        this.scrollTop = 1200;
        setTimeout(() => {
          uni.pageScrollTo({
            scrollTop: 1120,
            duration: 100
            // 减少动画时间，提高滑动速度
          });
        }, 50);
      },
      onScroll(e) {
      }
    }
  };
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "novel-detail-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<view class="header-title">\n				<text class="title-text">小说详情</text>\n			</view>\n			<view class="listen-button" @click="startListening">\n				<text class="listen-text">听书</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 这个听书图标应该是不留 "),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("scroll-view", {
        class: "content-scroll",
        "scroll-y": "true",
        "scroll-top": $data.scrollTop,
        onScroll: _cache[5] || (_cache[5] = (...args) => $options.onScroll && $options.onScroll(...args))
      }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载小说详情...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误状态 "),
        $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-container"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "error-actions" }, [
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.loadNovelDetailFromAPI && $options.loadNovelDetailFromAPI(...args))
            }, "重新加载")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 正常内容 "),
        !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", { key: 2 }, [
          vue.createCommentVNode(" 返回按钮 "),
          vue.createCommentVNode(' <view class="back-button-container">\n				<view class="back-button" @click="goBack">\n					<svg t="1756247334143" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1052" width="32" height="32">\n						<path d="M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z" fill="#666666" p-id="1053"></path>\n					</svg>\n				</view>\n			</view> '),
          vue.createCommentVNode(" 小说封面 "),
          vue.createElementVNode("view", { class: "novel-cover-section" }, [
            vue.createElementVNode("image", {
              class: "novel-cover",
              src: $data.novelData.coverImage || "",
              mode: "aspectFill"
            }, null, 8, ["src"])
          ]),
          vue.createCommentVNode(" 小说信息 "),
          vue.createElementVNode("view", { class: "novel-info-section" }, [
            vue.createElementVNode(
              "text",
              { class: "novel-title" },
              vue.toDisplayString($data.novelData.title || "小说名"),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "author-section" }, [
              vue.createElementVNode(
                "text",
                { class: "author-name" },
                vue.toDisplayString($data.novelData.author || "小说作者"),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", {
                class: "follow-button",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.followAuthor && $options.followAuthor(...args))
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "follow-text" },
                  vue.toDisplayString($data.isFollowed ? "已关注" : "+关注"),
                  1
                  /* TEXT */
                )
              ])
            ])
          ]),
          vue.createCommentVNode(" 统计数据 "),
          vue.createElementVNode("view", { class: "stats-section" }, [
            vue.createElementVNode("view", { class: "stat-item" }, [
              vue.createElementVNode(
                "text",
                { class: "stat-value" },
                vue.toDisplayString($data.novelData.rating || "9.5") + "分",
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "stat-label" },
                vue.toDisplayString($data.novelData.reviewCount || "11.9万人点评"),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "stat-item" }, [
              vue.createElementVNode(
                "text",
                { class: "stat-value" },
                vue.toDisplayString($data.novelData.readerCount || "157.4万人"),
                1
                /* TEXT */
              ),
              vue.createElementVNode("text", { class: "stat-label" }, "正在阅读")
            ]),
            vue.createElementVNode("view", { class: "stat-item" }, [
              vue.createElementVNode(
                "text",
                { class: "stat-value" },
                vue.toDisplayString($data.novelData.wordCount || "214.7万字"),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "stat-label" },
                vue.toDisplayString($data.novelData.updateDays || "连续更新268天"),
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createCommentVNode(" 简介部分 "),
          vue.createElementVNode("view", { class: "synopsis-section" }, [
            vue.createElementVNode("view", { class: "section-header" }, [
              vue.createElementVNode("text", { class: "section-title" }, "简介")
            ]),
            vue.createElementVNode("view", { class: "tags-container" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.novelData.tags, (tag, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "tag",
                    key: index
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "tag-text" },
                      vue.toDisplayString(tag),
                      1
                      /* TEXT */
                    )
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ]),
            vue.createElementVNode("view", { class: "synopsis-content" }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["synopsis-text", { "expanded": $data.synopsisExpanded }])
                },
                vue.toDisplayString($data.novelData.synopsis || "【游戏入侵+unp+升级流+独狼+游戏】(又名: 游戏入侵) 这是一个关于游戏入侵现实的故事，主角在游戏中获得了强大的能力，开始了一段惊险刺激的冒险之旅。故事融合了游戏元素和现实世界，充满了悬念和惊喜。主角从一个普通玩家逐渐成长为游戏世界的强者，在这个过程中不仅要面对游戏中的挑战，还要处理现实世界中的各种问题。"),
                3
                /* TEXT, CLASS */
              ),
              $data.novelData.synopsis && $data.novelData.synopsis.length > 80 ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "expand-button",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.toggleSynopsis && $options.toggleSynopsis(...args))
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "expand-text" },
                  vue.toDisplayString($data.synopsisExpanded ? "收起" : "展开"),
                  1
                  /* TEXT */
                )
              ])) : vue.createCommentVNode("v-if", true)
            ])
          ]),
          vue.createCommentVNode(" 热门书评 "),
          vue.createElementVNode("view", { class: "reviews-section" }, [
            vue.createElementVNode("view", { class: "section-header" }, [
              vue.createElementVNode("text", { class: "section-title" }, "热门书评"),
              vue.createElementVNode("view", {
                class: "more-reviews",
                onClick: _cache[3] || (_cache[3] = (...args) => $options.goToMoreReviews && $options.goToMoreReviews(...args))
              }, [
                vue.createElementVNode("text", { class: "more-text" }, "更多书评")
              ])
            ]),
            vue.createCommentVNode(" 有书评数据时显示书评列表 "),
            $data.novelData.reviews && $data.novelData.reviews.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "reviews-list"
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.novelData.reviews, (review, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "review-item",
                    key: index
                  }, [
                    vue.createElementVNode("view", { class: "review-header" }, [
                      vue.createElementVNode("image", {
                        class: "reviewer-avatar",
                        src: review.avatar || "/static/avatar-default.png",
                        mode: "aspectFill"
                      }, null, 8, ["src"]),
                      vue.createElementVNode("view", { class: "review-info" }, [
                        vue.createElementVNode(
                          "text",
                          { class: "reviewer-name" },
                          vue.toDisplayString(review.reviewer),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode("view", { class: "review-rating" }, [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(review.rating, (n) => {
                              return vue.openBlock(), vue.createElementBlock("text", {
                                class: "star",
                                key: n
                              }, "★");
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(5 - review.rating, (n) => {
                              return vue.openBlock(), vue.createElementBlock("text", {
                                class: "star empty",
                                key: n
                              }, "☆");
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        vue.createElementVNode(
                          "text",
                          { class: "review-time" },
                          vue.toDisplayString(review.time),
                          1
                          /* TEXT */
                        )
                      ])
                    ]),
                    vue.createElementVNode(
                      "text",
                      {
                        class: vue.normalizeClass(["review-content", { "expanded": $data.reviewExpanded[index] }])
                      },
                      vue.toDisplayString(review.content),
                      3
                      /* TEXT, CLASS */
                    ),
                    review.content && review.content.length > 80 ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "expand-button",
                      onClick: ($event) => $options.toggleReview(index)
                    }, [
                      vue.createElementVNode(
                        "text",
                        { class: "expand-text" },
                        vue.toDisplayString($data.reviewExpanded[index] ? "收起" : "展开"),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"])) : vue.createCommentVNode("v-if", true),
                    vue.createCommentVNode(" 书评互动 "),
                    vue.createElementVNode("view", { class: "review-actions" }, [
                      vue.createElementVNode("view", {
                        class: "action-item",
                        onClick: vue.withModifiers(($event) => $options.handleReviewLike(review, index), ["stop"])
                      }, [
                        vue.createElementVNode(
                          "text",
                          {
                            class: vue.normalizeClass(["action-icon", { "active": review.isLiked }])
                          },
                          "👍",
                          2
                          /* CLASS */
                        ),
                        vue.createElementVNode(
                          "text",
                          {
                            class: vue.normalizeClass(["action-count", { "active": review.isLiked }])
                          },
                          vue.toDisplayString($options.formatCount(review.likes)),
                          3
                          /* TEXT, CLASS */
                        )
                      ], 8, ["onClick"]),
                      vue.createElementVNode("view", {
                        class: "action-item",
                        onClick: vue.withModifiers(($event) => $options.handleReviewDislike(review, index), ["stop"])
                      }, [
                        vue.createElementVNode(
                          "text",
                          {
                            class: vue.normalizeClass(["action-icon", { "active": review.isDisliked }])
                          },
                          "👎",
                          2
                          /* CLASS */
                        ),
                        vue.createElementVNode(
                          "text",
                          {
                            class: vue.normalizeClass(["action-count", { "active": review.isDisliked }])
                          },
                          vue.toDisplayString($options.formatCount(review.dislikes)),
                          3
                          /* TEXT, CLASS */
                        )
                      ], 8, ["onClick"]),
                      vue.createElementVNode("view", {
                        class: "action-item",
                        onClick: vue.withModifiers(($event) => $options.handleReviewComment(review, index), ["stop"])
                      }, [
                        vue.createElementVNode("text", { class: "action-icon" }, "💬"),
                        vue.createElementVNode(
                          "text",
                          { class: "action-count" },
                          vue.toDisplayString($options.formatCount(review.comments)),
                          1
                          /* TEXT */
                        )
                      ], 8, ["onClick"])
                    ])
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])) : (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createCommentVNode(" 没有书评数据时显示提示 "),
                vue.createElementVNode("view", { class: "no-reviews" }, [
                  vue.createElementVNode("text", { class: "no-reviews-text" }, '暂无书评，点击"更多书评"查看全部')
                ])
              ],
              2112
              /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
            ))
          ]),
          vue.createCommentVNode(" 开始阅读按钮 "),
          vue.createElementVNode("view", { class: "read-button-container" }, [
            vue.createElementVNode("view", {
              class: "read-button",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.startReading && $options.startReading(...args))
            }, [
              vue.createElementVNode("view", { class: "arrow-up" }),
              vue.createElementVNode("text", { class: "read-text" }, "上滑开始阅读")
            ])
          ]),
          vue.createCommentVNode(" 小说内容区域 "),
          vue.createElementVNode("view", { class: "novel-content-section" }, [
            vue.createElementVNode("view", { class: "chapter-title" }, [
              vue.createElementVNode("text", { class: "chapter-text" }, "第一章 兰亭序全文（晋）王羲之")
            ]),
            vue.createElementVNode("view", { class: "novel-text" }, [
              vue.createElementVNode("text", { class: "novel-paragraph" }, "永和九年，岁在癸丑，暮春之初，会于会稽山阴之兰亭，修禊事也。群贤毕至，少长咸集。"),
              vue.createElementVNode("text", { class: "novel-paragraph" }, "此地有崇山峻岭，茂林修竹；又有清流激湍，映带左右，引以为流觞曲水，列坐其次。虽无丝竹管弦之盛，一觞一咏，亦足以畅叙幽情。"),
              vue.createElementVNode("text", { class: "novel-paragraph" }, "是日也，天朗气清，惠风和畅，仰观宇宙之大，俯察品类之盛，所以游目骋怀，足以极视听之娱，信可乐也。"),
              vue.createElementVNode("text", { class: "novel-paragraph" }, "夫人之相与，俯仰一世，或取诸怀抱，晤言一室之内；或因寄所托，放浪形骸之外。虽取舍万殊，静躁不同，当其欣于所遇，暂得于己，快然自足，不知老之将至。"),
              vue.createElementVNode("text", { class: "novel-paragraph" }, "及其所之既倦，情随事迁，感慨系之矣。向之所欣，俯仰之间，已为陈迹，犹不能不以之兴怀。况修短随化，终期于尽。"),
              vue.createElementVNode("text", { class: "novel-paragraph" }, '古人云："死生亦大矣。"岂不痛哉！每览昔人兴感之由，若合一契，未尝不临文嗟悼，不能喻之于怀。'),
              vue.createElementVNode("text", { class: "novel-paragraph" }, "固知一死生为虚诞，齐彭殇为妄作。后之视今，亦犹今之视昔。"),
              vue.createElementVNode("text", { class: "novel-paragraph" }, "悲夫！故列叙时人，录其所述，虽世殊事异，所以兴怀，其致一也。后之览者，亦将有感于斯文。")
            ])
          ]),
          vue.createCommentVNode(" 底部留白 "),
          vue.createElementVNode("view", { class: "bottom-spacer" })
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 结束正常内容区域 ")
      ], 40, ["scroll-top"])
    ]);
  }
  const PagesFeedNovelDetail = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$K], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/novel-detail.vue"]]);
  const _sfc_main$K = {
    name: "NovelMoreReviewsPage",
    data() {
      return {
        novelId: "",
        novelTitle: "",
        novelAuthor: "",
        userId: 1000100,
        isRefreshing: false,
        showRefreshIndicator: false,
        refreshText: "下拉刷新",
        pullDistance: 0,
        commentText: "",
        replyToComment: null,
        replyToReply: null,
        showShare: false,
        loading: false,
        hasError: false,
        errorMessage: "",
        shareFriends: [
          { name: "奶绿冰阔落", avatar: "/static/avatar-default.png" },
          { name: "我想次炸鸡", avatar: "/static/avatar-default.png" },
          { name: "匿名为某", avatar: "/static/avatar-default.png" },
          { name: "康已奀", avatar: "/static/avatar-default.png" },
          { name: "小菜刀御", avatar: "/static/avatar-default.png" },
          { name: "超级好", avatar: "/static/avatar-default.png" },
          { name: "QQ好友七", avatar: "/static/avatar-default.png" }
        ],
        reviews: []
        // 从后端API获取的书评数据
      };
    },
    onLoad(options) {
      formatAppLog("log", "at pages/feed/novel-more-reviews.vue:245", "=== 更多书评页面加载 ===");
      formatAppLog("log", "at pages/feed/novel-more-reviews.vue:246", "接收到的参数:", options);
      if (options.novelId) {
        this.novelId = options.novelId;
      }
      if (options.title) {
        this.novelTitle = decodeURIComponent(options.title);
      }
      if (options.author) {
        this.novelAuthor = decodeURIComponent(options.author);
      }
      if (options.userId) {
        this.userId = parseInt(options.userId);
      }
      if (this.novelId) {
        this.loadNovelReviews();
      }
    },
    methods: {
      // 从后端API加载书评数据
      async loadNovelReviews() {
        try {
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:271", "=== 开始从后端加载书评数据 ===");
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:272", "小说ID:", this.novelId);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/novel-detail/reviews?novelId=${this.novelId}&userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:286", "=== 书评API响应详情 ===");
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:287", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:288", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            this.reviews = response.data.data || [];
            formatAppLog("log", "at pages/feed/novel-more-reviews.vue:292", "成功加载书评数据，共", this.reviews.length, "条");
            if (this.reviews.length === 0) {
              this.hasError = true;
              this.errorMessage = "暂无书评数据";
            }
          } else {
            formatAppLog("error", "at pages/feed/novel-more-reviews.vue:299", "加载书评数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载书评数据失败";
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/novel-more-reviews.vue:304", "加载书评数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
        } finally {
          this.loading = false;
        }
      },
      // 返回功能
      goBack() {
        uni.navigateBack();
      },
      // 跳转到书评详情页
      goToReviewDetail(review, index) {
        uni.navigateTo({
          url: `/pages/feed/review-detail?id=${index}&reviewer=${encodeURIComponent(review.reviewer)}&content=${encodeURIComponent(review.content)}&rating=${review.rating}&time=${encodeURIComponent(review.time)}&likes=${review.likes}&dislikes=${review.dislikes}&comments=${review.comments}`
        });
      },
      // 分享功能
      showShare() {
        this.showShare = true;
      },
      hideSharePopup() {
        this.showShare = false;
      },
      // 分享相关方法
      shareToWechat() {
        uni.showToast({
          title: "分享到微信",
          icon: "none"
        });
        this.hideSharePopup();
      },
      shareToMoments() {
        uni.showToast({
          title: "分享到朋友圈",
          icon: "none"
        });
        this.hideSharePopup();
      },
      shareToDouyin() {
        uni.showToast({
          title: "分享到抖音好友",
          icon: "none"
        });
        this.hideSharePopup();
      },
      shareToDouyinPost() {
        uni.showToast({
          title: "发布到抖音",
          icon: "none"
        });
        this.hideSharePopup();
      },
      shareToQQ() {
        uni.showToast({
          title: "分享到QQ",
          icon: "none"
        });
        this.hideSharePopup();
      },
      shareAction(action) {
        const actionNames = {
          comment: "评论设置",
          gift: "送礼物",
          bookmark: "添加书签",
          search: "全文搜索",
          report: "举报与反馈"
        };
        uni.showToast({
          title: actionNames[action] || "功能开发中",
          icon: "none"
        });
        this.hideSharePopup();
      },
      shareToFriend(friend) {
        uni.showToast({
          title: `分享给${friend.name}`,
          icon: "none"
        });
        this.hideSharePopup();
      },
      // 评论点赞处理
      async handleLike(index) {
        const review = this.reviews[index];
        if (!review || !review.commentId) {
          uni.showToast({
            title: "评论ID不存在",
            icon: "error"
          });
          return;
        }
        try {
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:410", "=== 开始处理书评点赞 ===");
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:411", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:412", "评论ID:", review.commentId);
          const response = await uni.request({
            url: `http://localhost:8888/api/novel-detail/comment/like?userId=${this.userId}&commentId=${review.commentId}`,
            method: "POST",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:422", "=== 书评点赞API响应 ===");
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:423", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/novel-more-reviews.vue:424", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const result = response.data.data;
            review.isLiked = result.isLiked;
            review.likes = result.likeCount;
            if (review.isLiked && review.isDisliked) {
              review.isDisliked = false;
              review.dislikes--;
            }
            uni.showToast({
              title: result.message,
              icon: "success",
              duration: 1e3
            });
          } else {
            formatAppLog("error", "at pages/feed/novel-more-reviews.vue:445", "书评点赞失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "操作失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/novel-more-reviews.vue:452", "书评点赞异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        }
      },
      // 评论踩处理
      handleDislike(index) {
        const review = this.reviews[index];
        if (review && typeof review === "object") {
          review.isDisliked = !review.isDisliked;
          if (review.isDisliked) {
            review.dislikes++;
            if (review.isLiked) {
              review.isLiked = false;
              review.likes--;
            }
          } else {
            review.dislikes--;
          }
        }
      },
      // 评论处理
      handleComment(index) {
        const review = this.reviews[index];
        if (review) {
          this.replyToComment = review;
          this.replyToReply = null;
          this.commentText = "";
          this.$nextTick(() => {
            const input = uni.createSelectorQuery().select(".comment-input");
            if (input) {
              input.focus();
            }
          });
        }
      },
      // 图片预览
      previewImage(images, current) {
        uni.previewImage({
          urls: images,
          current
        });
      },
      // 获取图片网格样式类
      getImageGridClass(count) {
        if (count === 1)
          return "single-image";
        if (count === 2)
          return "two-images";
        if (count === 3)
          return "three-images";
        return "grid-images";
      },
      // 格式化数字显示
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 收藏处理
      handleFavorite(post) {
        post.isFavorited = !post.isFavorited;
        if (post.isFavorited) {
          post.favorites++;
        } else {
          post.favorites--;
        }
      },
      // 输入框焦点处理
      onInputFocus() {
        this.inputFocus = true;
      },
      onInputBlur() {
        this.inputFocus = false;
      },
      // 提交评论
      submitComment() {
        if (!this.commentText.trim()) {
          uni.showToast({
            title: "请输入评论内容",
            icon: "none"
          });
          return;
        }
        if (this.replyToComment) {
          const newReply = {
            username: "我",
            userAvatar: "/static/avatar3.png",
            time: "刚刚",
            content: this.commentText,
            likes: 0,
            isLiked: false,
            replyTo: this.replyToReply ? this.replyToReply.username : this.replyToComment.reviewer
          };
          if (!this.replyToComment.replies) {
            this.replyToComment.replies = [];
          }
          this.replyToComment.replies.push(newReply);
          this.replyToComment = null;
          this.replyToReply = null;
          uni.showToast({
            title: "回复成功",
            icon: "success"
          });
        } else {
          const newComment = {
            reviewer: "我",
            avatar: "/static/avatar3.png",
            rating: 5,
            content: this.commentText,
            time: "刚刚",
            likes: 0,
            dislikes: 0,
            comments: 0,
            isLiked: false,
            isDisliked: false,
            replies: []
          };
          this.reviews.unshift(newComment);
          uni.showToast({
            title: "评论成功",
            icon: "success"
          });
        }
        this.commentText = "";
      },
      // 取消回复
      cancelReply() {
        formatAppLog("log", "at pages/feed/novel-more-reviews.vue:610", "取消回复");
        this.commentText = "";
        this.replyToComment = null;
        this.replyToReply = null;
      },
      // 获取输入框placeholder
      getInputPlaceholder() {
        if (this.replyToComment) {
          if (this.replyToReply) {
            return `回复 @${this.replyToReply.username}...`;
          }
          return `回复 @${this.replyToComment.reviewer}...`;
        }
        return "说点什么...";
      },
      // 下拉刷新触发
      async onRefresh() {
        formatAppLog("log", "at pages/feed/novel-more-reviews.vue:630", "开始刷新书评数据");
        this.isRefreshing = true;
        this.refreshText = "正在刷新...";
        try {
          await this.loadNovelReviews();
          this.isRefreshing = false;
          this.refreshText = "刷新完成";
          uni.showToast({
            title: "刷新成功",
            icon: "success"
          });
          setTimeout(() => {
            this.showRefreshIndicator = false;
          }, 1e3);
        } catch (error) {
          formatAppLog("error", "at pages/feed/novel-more-reviews.vue:652", "刷新书评数据失败:", error);
          this.isRefreshing = false;
          this.refreshText = "刷新失败";
          uni.showToast({
            title: "刷新失败",
            icon: "error"
          });
          setTimeout(() => {
            this.showRefreshIndicator = false;
          }, 1e3);
        }
      },
      // 下拉过程中
      onPulling(e) {
        this.pullDistance = e.detail.dy;
        if (e.detail.dy > 50) {
          this.showRefreshIndicator = true;
          this.refreshText = "释放刷新";
        } else {
          this.refreshText = "下拉刷新";
        }
      },
      // 刷新器复位
      onRestore() {
        formatAppLog("log", "at pages/feed/novel-more-reviews.vue:680", "刷新器复位");
        this.showRefreshIndicator = false;
      },
      // 刷新器中止
      onAbort() {
        formatAppLog("log", "at pages/feed/novel-more-reviews.vue:686", "刷新器中止");
        this.showRefreshIndicator = false;
      }
    }
  };
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "more-reviews-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("view", { class: "back-arrow" })
        ]),
        vue.createElementVNode("view", { class: "header-title" }, [
          vue.createElementVNode("text", { class: "title-text" }, "热门书评")
        ]),
        vue.createElementVNode("view", {
          class: "share-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.showShare && $options.showShare(...args))
        }, [
          vue.createElementVNode("text", { class: "share-icon" }, "📤")
        ])
      ]),
      vue.createCommentVNode(" 小说信息卡片 "),
      vue.createElementVNode("view", { class: "novel-card" }, [
        vue.createElementVNode("view", { class: "novel-info" }, [
          vue.createElementVNode("image", {
            class: "novel-cover",
            src: _ctx.novelCover || "/static/novel-cover.jpg",
            mode: "aspectFill"
          }, null, 8, ["src"]),
          vue.createElementVNode("view", { class: "novel-details" }, [
            vue.createElementVNode(
              "text",
              { class: "novel-title" },
              vue.toDisplayString($data.novelTitle || "小说标题"),
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "text",
              { class: "novel-author" },
              vue.toDisplayString($data.novelAuthor || "作者"),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "novel-stats" }, [
              vue.createElementVNode(
                "text",
                { class: "rating" },
                vue.toDisplayString(_ctx.novelRating || "9.5") + "分",
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "reader-count" },
                vue.toDisplayString(_ctx.readerCount || "157.4万人在读"),
                1
                /* TEXT */
              )
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 评论列表 "),
      vue.createElementVNode("scroll-view", {
        class: "reviews-scroll",
        "scroll-y": "true",
        "refresher-enabled": "true",
        "refresher-triggered": $data.isRefreshing,
        onRefresherrefresh: _cache[3] || (_cache[3] = (...args) => $options.onRefresh && $options.onRefresh(...args))
      }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载书评数据...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误状态 "),
        $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-container"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "error-actions" }, [
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.loadNovelReviews && $options.loadNovelReviews(...args))
            }, "重新加载")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 正常内容 "),
        !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", { key: 2 }, [
          vue.createCommentVNode(" 刷新指示器 "),
          $data.showRefreshIndicator ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "refresh-indicator"
          }, [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["refresh-circle", { "refreshing": $data.isRefreshing }])
              },
              [
                !$data.isRefreshing ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "refresh-arrow"
                })) : (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "refresh-spinner"
                }))
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "text",
              { class: "refresh-text" },
              vue.toDisplayString($data.refreshText),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 评论列表区域 "),
          vue.createElementVNode("view", { class: "reviews-container" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.reviews, (review, reviewIndex) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "review-item",
                  key: reviewIndex
                }, [
                  vue.createCommentVNode(" 评论头部 "),
                  vue.createElementVNode("view", { class: "review-header" }, [
                    vue.createElementVNode("image", {
                      class: "reviewer-avatar",
                      src: review.avatar,
                      mode: "aspectFill"
                    }, null, 8, ["src"]),
                    vue.createElementVNode("view", { class: "reviewer-info" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "reviewer-name" },
                        vue.toDisplayString(review.reviewer),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("view", { class: "review-meta" }, [
                        vue.createElementVNode("view", { class: "rating-stars" }, [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(review.rating, (n) => {
                              return vue.openBlock(), vue.createElementBlock("text", {
                                class: "star",
                                key: n
                              }, "★");
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          )),
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(5 - review.rating, (n) => {
                              return vue.openBlock(), vue.createElementBlock("text", {
                                class: "star empty",
                                key: n
                              }, "☆");
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        vue.createElementVNode(
                          "text",
                          { class: "review-time" },
                          vue.toDisplayString(review.time),
                          1
                          /* TEXT */
                        )
                      ])
                    ])
                  ]),
                  vue.createCommentVNode(" 评论内容 "),
                  vue.createElementVNode("view", { class: "review-content" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "review-text" },
                      vue.toDisplayString(review.content),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createCommentVNode(" 评论互动 "),
                  vue.createElementVNode("view", { class: "engagement-metrics" }, [
                    vue.createElementVNode("view", {
                      class: "metric-item",
                      onClick: vue.withModifiers(($event) => $options.handleLike(reviewIndex), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["metric-icon", { "active": review.isLiked }])
                        },
                        "👍",
                        2
                        /* CLASS */
                      ),
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["metric-count", { "active": review.isLiked }])
                        },
                        vue.toDisplayString($options.formatCount(review.likes)),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "metric-item",
                      onClick: vue.withModifiers(($event) => $options.handleDislike(reviewIndex), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["metric-icon", { "active": review.isDisliked }])
                        },
                        "👎",
                        2
                        /* CLASS */
                      ),
                      vue.createElementVNode(
                        "text",
                        {
                          class: vue.normalizeClass(["metric-count", { "active": review.isDisliked }])
                        },
                        vue.toDisplayString($options.formatCount(review.dislikes)),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "metric-item",
                      onClick: vue.withModifiers(($event) => $options.handleComment(reviewIndex), ["stop"])
                    }, [
                      vue.createElementVNode("text", { class: "metric-icon" }, "💬"),
                      vue.createElementVNode(
                        "text",
                        { class: "metric-count" },
                        vue.toDisplayString($options.formatCount(review.comments)),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"])
                  ]),
                  vue.createCommentVNode(" 回复列表 "),
                  review.replies && review.replies.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "replies-list"
                  }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(review.replies, (reply, replyIndex) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "reply-item",
                          key: replyIndex
                        }, [
                          vue.createElementVNode("view", { class: "reply-avatar" }, [
                            vue.createElementVNode("image", {
                              class: "reply-user-avatar",
                              src: reply.userAvatar,
                              mode: "aspectFill"
                            }, null, 8, ["src"])
                          ]),
                          vue.createElementVNode("view", { class: "reply-content" }, [
                            vue.createElementVNode("view", { class: "reply-user-info" }, [
                              vue.createElementVNode(
                                "text",
                                { class: "reply-username" },
                                vue.toDisplayString(reply.username),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode(
                                "text",
                                { class: "reply-time" },
                                vue.toDisplayString(reply.time),
                                1
                                /* TEXT */
                              )
                            ]),
                            vue.createElementVNode("text", { class: "reply-text" }, [
                              vue.createElementVNode(
                                "text",
                                { class: "reply-to" },
                                "回复 @" + vue.toDisplayString(reply.replyTo) + "：",
                                1
                                /* TEXT */
                              ),
                              vue.createTextVNode(
                                " " + vue.toDisplayString(reply.content),
                                1
                                /* TEXT */
                              )
                            ])
                          ])
                        ]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])) : vue.createCommentVNode("v-if", true)
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 结束正常内容区域 ")
      ], 40, ["refresher-triggered"]),
      vue.createCommentVNode(" 底部评论输入框 "),
      vue.createElementVNode("view", { class: "comment-input-section" }, [
        vue.createElementVNode("view", { class: "comment-input-container" }, [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "comment-input",
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.commentText = $event),
            placeholder: $options.getInputPlaceholder(),
            onFocus: _cache[5] || (_cache[5] = (...args) => $options.onInputFocus && $options.onInputFocus(...args)),
            onBlur: _cache[6] || (_cache[6] = (...args) => $options.onInputBlur && $options.onInputBlur(...args))
          }, null, 40, ["placeholder"]), [
            [vue.vModelText, $data.commentText]
          ]),
          vue.createCommentVNode(" 取消回复按钮 "),
          $data.replyToComment ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "cancel-reply-btn",
            onClick: _cache[7] || (_cache[7] = (...args) => $options.cancelReply && $options.cancelReply(...args))
          }, [
            vue.createElementVNode("text", { class: "cancel-reply-text" }, "取消")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["send-button", { "active": $data.commentText.trim() }]),
              onClick: _cache[8] || (_cache[8] = (...args) => $options.submitComment && $options.submitComment(...args))
            },
            [
              vue.createElementVNode("text", { class: "send-text" }, "发送")
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 分享弹窗 "),
      $options.showShare ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "share-popup",
        onClick: _cache[16] || (_cache[16] = (...args) => $options.hideSharePopup && $options.hideSharePopup(...args))
      }, [
        vue.createElementVNode("view", {
          class: "share-content",
          onClick: _cache[15] || (_cache[15] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "share-header" }, [
            vue.createElementVNode("text", { class: "share-title" }, "分享到"),
            vue.createElementVNode("view", {
              class: "share-close",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.hideSharePopup && $options.hideSharePopup(...args))
            }, [
              vue.createElementVNode("text", { class: "close-icon" }, "×")
            ])
          ]),
          vue.createElementVNode("view", { class: "share-friends" }, [
            vue.createElementVNode("scroll-view", {
              class: "friends-scroll",
              "scroll-x": "true"
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.shareFriends, (friend, friendIndex) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "friend-item",
                    key: friendIndex,
                    onClick: ($event) => $options.shareToFriend(friend)
                  }, [
                    vue.createElementVNode("view", { class: "friend-avatar" }, [
                      vue.createElementVNode("image", {
                        class: "friend-avatar-img",
                        src: friend.avatar,
                        mode: "aspectFill"
                      }, null, 8, ["src"])
                    ]),
                    vue.createElementVNode(
                      "text",
                      { class: "friend-name" },
                      vue.toDisplayString(friend.name.length > 3 ? friend.name.substring(0, 3) + "..." : friend.name),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ]),
          vue.createElementVNode("view", { class: "share-options" }, [
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[10] || (_cache[10] = (...args) => $options.shareToWechat && $options.shareToWechat(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg wechat" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "微信")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[11] || (_cache[11] = (...args) => $options.shareToMoments && $options.shareToMoments(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg moments" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "朋友圈")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[12] || (_cache[12] = (...args) => $options.shareToDouyin && $options.shareToDouyin(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg douyin" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "抖音好友")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[13] || (_cache[13] = (...args) => $options.shareToDouyinPost && $options.shareToDouyinPost(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg douyin-post" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "发布到抖音")
            ]),
            vue.createElementVNode("view", {
              class: "share-option",
              onClick: _cache[14] || (_cache[14] = (...args) => $options.shareToQQ && $options.shareToQQ(...args))
            }, [
              vue.createElementVNode("view", { class: "share-icon-bg qq" }, [
                vue.createElementVNode("image", {
                  class: "share-icon-img",
                  src: _imports_2,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("text", { class: "share-option-text" }, "QQ")
            ])
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesFeedNovelMoreReviews = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$J], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/novel-more-reviews.vue"]]);
  const _sfc_main$J = {
    name: "ReviewDetailPage",
    data() {
      return {
        reviewDetail: {
          id: "",
          reviewer: "",
          avatar: "",
          rating: 5,
          content: "",
          time: "",
          likes: 0,
          dislikes: 0,
          favorites: 0,
          isLiked: false,
          isDisliked: false,
          isFavorited: false,
          isFollowed: false,
          comments: [],
          images: []
          // 添加图片数组
        },
        commentText: "",
        showMoreModal: false,
        scrollTop: 0,
        replyToComment: null,
        replyToReply: null,
        postId: null,
        postType: "text",
        userId: 1000100,
        loading: false,
        hasError: false,
        errorMessage: ""
      };
    },
    onLoad(options) {
      formatAppLog("log", "at pages/feed/review-detail.vue:241", "页面加载参数:", options);
      if (options.postId !== void 0) {
        this.postId = parseInt(options.postId);
        this.postType = options.postType || "text";
        this.userId = parseInt(options.userId) || 1000100;
        formatAppLog("log", "at pages/feed/review-detail.vue:247", "解析后的参数 - postId:", this.postId, "postType:", this.postType, "userId:", this.userId);
        this.loadPostDetail();
      } else if (options.id !== void 0) {
        const reviewId = parseInt(options.id);
        formatAppLog("log", "at pages/feed/review-detail.vue:252", "解析后的reviewId:", reviewId);
        this.loadReviewDetail(options);
      } else {
        formatAppLog("log", "at pages/feed/review-detail.vue:255", "使用默认数据");
        this.loadDefaultReviewDetail();
      }
    },
    methods: {
      // 加载帖子详情数据
      async loadPostDetail() {
        try {
          formatAppLog("log", "at pages/feed/review-detail.vue:263", "=== 开始加载帖子详情数据 ===");
          formatAppLog("log", "at pages/feed/review-detail.vue:264", "帖子ID:", this.postId);
          formatAppLog("log", "at pages/feed/review-detail.vue:265", "帖子类型:", this.postType);
          formatAppLog("log", "at pages/feed/review-detail.vue:266", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/review-detail.vue:267", "请求URL:", `http://localhost:8888/api/post-detail/data?postId=${this.postId}&postType=${this.postType}&userId=${this.userId}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/post-detail/data?postId=${this.postId}&postType=${this.postType}&userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/review-detail.vue:281", "=== API响应详情 ===");
          formatAppLog("log", "at pages/feed/review-detail.vue:282", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/review-detail.vue:283", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const postData = response.data.data;
            formatAppLog("log", "at pages/feed/review-detail.vue:287", "获取到的帖子数据:", postData);
            this.reviewDetail = {
              id: postData.id,
              reviewer: postData.reviewer,
              avatar: postData.avatar,
              rating: postData.rating,
              content: postData.content,
              time: postData.time,
              likes: postData.likes,
              dislikes: postData.dislikes,
              favorites: postData.favorites,
              isLiked: postData.isLiked,
              isDisliked: postData.isDisliked,
              isFavorited: postData.isFavorited,
              isFollowed: postData.isFollowed,
              comments: postData.comments || [],
              images: postData.images || []
            };
            formatAppLog("log", "at pages/feed/review-detail.vue:308", "帖子详情数据加载成功");
            uni.showToast({
              title: "数据加载成功",
              icon: "success",
              duration: 1500
            });
          } else {
            formatAppLog("error", "at pages/feed/review-detail.vue:316", "加载帖子详情数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载数据失败";
            uni.showToast({
              title: "加载数据失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/review-detail.vue:325", "加载帖子详情数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      // 加载书评详情
      loadReviewDetail(options) {
        formatAppLog("log", "at pages/feed/review-detail.vue:339", "开始加载书评详情，参数:", options);
        this.reviewDetail = {
          id: options.id || 0,
          reviewer: decodeURIComponent(options.reviewer || ""),
          avatar: "/static/avatar1.png",
          rating: parseInt(options.rating) || 5,
          content: decodeURIComponent(options.content || ""),
          time: decodeURIComponent(options.time || ""),
          likes: parseInt(options.likes) || 0,
          dislikes: parseInt(options.dislikes) || 0,
          favorites: 0,
          isLiked: false,
          isDisliked: false,
          isFavorited: false,
          isFollowed: false,
          comments: this.generateMockComments()
        };
        formatAppLog("log", "at pages/feed/review-detail.vue:359", "加载的书评数据:", this.reviewDetail);
      },
      // 生成模拟评论数据
      generateMockComments() {
        return [
          {
            username: "书虫小王",
            userAvatar: "/static/avatar2.png",
            time: "10分钟前",
            content: "这个书评写得很中肯！",
            likes: 45,
            isLiked: false,
            replies: [
              {
                username: "修仙爱好者",
                userAvatar: "/static/avatar3.png",
                time: "8分钟前",
                content: "我也觉得分析得很到位！",
                likes: 12,
                isLiked: false,
                replyTo: "书虫小王"
              }
            ]
          },
          {
            username: "修仙爱好者",
            userAvatar: "/static/avatar3.png",
            time: "8分钟前",
            content: "完全同意楼主的观点，这本书确实很棒",
            likes: 32,
            isLiked: false,
            replies: []
          },
          {
            username: "文学评论家",
            userAvatar: "/static/avatar4.png",
            time: "5分钟前",
            content: "文笔流畅，分析透彻，值得推荐",
            likes: 28,
            isLiked: false,
            replies: []
          }
        ];
      },
      // 加载默认书评详情
      loadDefaultReviewDetail() {
        this.reviewDetail = {
          id: 0,
          reviewer: "书友123456",
          avatar: "/static/avatar1.png",
          rating: 5,
          content: "文笔剧情很好,很难得的女强无cp游戏侵入现实的文,世界观设计都很有画面感,女主也很聪明,抓...",
          time: "阅读不足30分钟后点评",
          likes: 234,
          dislikes: 12,
          favorites: 0,
          isLiked: false,
          isDisliked: false,
          isFavorited: false,
          isFollowed: false,
          comments: this.generateMockComments()
        };
      },
      // 返回上一页
      goBack() {
        formatAppLog("log", "at pages/feed/review-detail.vue:427", "返回按钮被点击");
        try {
          uni.navigateBack({
            success: () => {
              formatAppLog("log", "at pages/feed/review-detail.vue:432", "返回成功");
            },
            fail: (err) => {
              formatAppLog("log", "at pages/feed/review-detail.vue:435", "返回失败:", err);
              uni.navigateTo({
                url: "/pages/feed/novel-more-reviews"
              });
            }
          });
        } catch (error) {
          formatAppLog("error", "at pages/feed/review-detail.vue:443", "返回操作出错:", error);
          uni.navigateTo({
            url: "/pages/feed/novel-more-reviews"
          });
        }
      },
      // 跳转到用户资料页
      goToUserProfile() {
        uni.navigateTo({
          url: `/pages/feed/user-profile?username=${encodeURIComponent(this.reviewDetail.reviewer)}`
        });
      },
      // 关注/取消关注
      toggleFollow() {
        this.reviewDetail.isFollowed = !this.reviewDetail.isFollowed;
        uni.showToast({
          title: this.reviewDetail.isFollowed ? "关注成功" : "已取消关注",
          icon: "success"
        });
      },
      // 格式化数字
      formatCount(count) {
        if (count >= 1e4) {
          return (count / 1e4).toFixed(1) + "w";
        }
        return count.toString();
      },
      // 点赞
      async handleLike() {
        try {
          formatAppLog("log", "at pages/feed/review-detail.vue:478", "处理点赞操作:", this.postId, this.postType, this.userId);
          const response = await uni.request({
            url: "http://localhost:8888/api/post-detail/like",
            method: "POST",
            data: {
              postId: this.postId,
              postType: this.postType,
              userId: this.userId
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/review-detail.vue:493", "点赞API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            this.reviewDetail.isLiked = response.data.isLiked;
            if (this.reviewDetail.isLiked) {
              this.reviewDetail.likes++;
              if (this.reviewDetail.isDisliked) {
                this.reviewDetail.isDisliked = false;
                this.reviewDetail.dislikes--;
              }
            } else {
              this.reviewDetail.likes--;
            }
            uni.showToast({
              title: response.data.message,
              icon: "success",
              duration: 1500
            });
          } else {
            formatAppLog("error", "at pages/feed/review-detail.vue:515", "点赞操作失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "点赞失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/review-detail.vue:522", "点赞操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        }
      },
      // 踩
      async handleDislike() {
        try {
          formatAppLog("log", "at pages/feed/review-detail.vue:533", "处理点踩操作:", this.postId, this.postType, this.userId);
          const response = await uni.request({
            url: "http://localhost:8888/api/post-detail/dislike",
            method: "POST",
            data: {
              postId: this.postId,
              postType: this.postType,
              userId: this.userId
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/review-detail.vue:548", "点踩API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            this.reviewDetail.isDisliked = response.data.isDisliked;
            if (this.reviewDetail.isDisliked) {
              this.reviewDetail.dislikes++;
              if (this.reviewDetail.isLiked) {
                this.reviewDetail.isLiked = false;
                this.reviewDetail.likes--;
              }
            } else {
              this.reviewDetail.dislikes--;
            }
            uni.showToast({
              title: response.data.message,
              icon: "success",
              duration: 1500
            });
          } else {
            formatAppLog("error", "at pages/feed/review-detail.vue:570", "点踩操作失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "点踩失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/review-detail.vue:577", "点踩操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        }
      },
      // 收藏
      async handleFavorite() {
        try {
          formatAppLog("log", "at pages/feed/review-detail.vue:588", "处理收藏操作:", this.postId, this.postType, this.userId);
          const response = await uni.request({
            url: "http://localhost:8888/api/post-detail/favorite",
            method: "POST",
            data: {
              postId: this.postId,
              postType: this.postType,
              userId: this.userId
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/review-detail.vue:603", "收藏API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            this.reviewDetail.isFavorited = response.data.isFavorited;
            if (this.reviewDetail.isFavorited) {
              this.reviewDetail.favorites++;
            } else {
              this.reviewDetail.favorites--;
            }
            uni.showToast({
              title: response.data.message,
              icon: "success",
              duration: 1500
            });
          } else {
            formatAppLog("error", "at pages/feed/review-detail.vue:620", "收藏操作失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "收藏失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/review-detail.vue:627", "收藏操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        }
      },
      // 分享
      handleShare() {
        uni.showToast({
          title: "分享功能开发中",
          icon: "none"
        });
      },
      // 图片预览
      previewImage(images, current) {
        uni.previewImage({
          urls: images,
          current
        });
      },
      // 显示更多选项
      showMoreOptions() {
        this.showMoreModal = true;
      },
      // 隐藏更多选项
      hideMoreOptions() {
        this.showMoreModal = false;
      },
      // 举报书评
      reportReview() {
        this.hideMoreOptions();
        uni.navigateTo({
          url: "/pages/report/report"
        });
      },
      // 复制链接
      copyLink() {
        this.hideMoreOptions();
        uni.setClipboardData({
          data: `https://example.com/review/${this.reviewDetail.id}`,
          success: () => {
            uni.showToast({
              title: "链接已复制",
              icon: "success"
            });
          }
        });
      },
      // 点赞评论
      likeComment(comment, index) {
        comment.isLiked = !comment.isLiked;
        if (comment.isLiked) {
          comment.likes++;
        } else {
          comment.likes--;
        }
      },
      // 点赞回复
      likeReply(comment, replyIndex) {
        const reply = comment.replies[replyIndex];
        reply.isLiked = !reply.isLiked;
        if (reply.isLiked) {
          reply.likes++;
        } else {
          reply.likes--;
        }
      },
      // 回复评论
      replyComment(comment) {
        formatAppLog("log", "at pages/feed/review-detail.vue:706", "回复评论:", comment);
        this.replyToComment = comment;
        this.replyToReply = null;
        this.commentText = "";
        this.$nextTick(() => {
          const input = uni.createSelectorQuery().select(".comment-input");
          if (input) {
            input.focus();
          }
        });
      },
      // 回复回复
      handleReplyToReply(comment, reply) {
        this.replyToComment = comment;
        this.replyToReply = reply;
        this.commentText = "";
        this.$nextTick(() => {
          const input = uni.createSelectorQuery().select(".comment-input");
          if (input) {
            input.focus();
          }
        });
      },
      // 输入框聚焦
      onInputFocus() {
      },
      // 输入框失焦
      onInputBlur() {
      },
      // 提交评论
      async submitComment() {
        if (!this.commentText.trim()) {
          return;
        }
        try {
          formatAppLog("log", "at pages/feed/review-detail.vue:752", "提交评论:", this.commentText, "帖子ID:", this.postId, "帖子类型:", this.postType, "用户ID:", this.userId);
          const response = await uni.request({
            url: "http://localhost:8888/api/post-detail/comment",
            method: "POST",
            data: {
              postId: this.postId,
              postType: this.postType,
              userId: this.userId,
              commentText: this.commentText,
              parentCommentId: this.replyToComment ? this.replyToComment.id : null
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/review-detail.vue:769", "评论API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            await this.loadPostDetail();
            this.replyToComment = null;
            this.replyToReply = null;
            uni.showToast({
              title: "评论成功",
              icon: "success"
            });
          } else {
            formatAppLog("error", "at pages/feed/review-detail.vue:784", "评论操作失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "评论失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/review-detail.vue:791", "评论操作异常:", error);
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        }
        this.commentText = "";
      },
      // 获取总评论数（包括回复）
      getTotalCommentsCount() {
        let total = this.reviewDetail.comments.length;
        this.reviewDetail.comments.forEach((comment) => {
          if (comment.replies) {
            total += comment.replies.length;
          }
        });
        return total;
      },
      // 获取输入框placeholder
      getInputPlaceholder() {
        if (this.replyToComment) {
          if (this.replyToReply) {
            return `回复 @${this.replyToReply.username}...`;
          }
          return `回复 @${this.replyToComment.username}...`;
        }
        return "说点什么...";
      },
      // 取消回复
      cancelReply() {
        formatAppLog("log", "at pages/feed/review-detail.vue:826", "取消回复");
        this.commentText = "";
        this.replyToComment = null;
        this.replyToReply = null;
      },
      // 返回按钮触摸开始
      onBackTouchStart() {
        formatAppLog("log", "at pages/feed/review-detail.vue:834", "返回按钮触摸开始");
      },
      // 返回按钮触摸结束
      onBackTouchEnd() {
        formatAppLog("log", "at pages/feed/review-detail.vue:840", "返回按钮触摸结束");
      }
    }
  };
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "review-detail-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode(
          "view",
          {
            class: "back-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args)),
            onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.onBackTouchStart && $options.onBackTouchStart(...args)),
            onTouchend: _cache[2] || (_cache[2] = (...args) => $options.onBackTouchEnd && $options.onBackTouchEnd(...args))
          },
          [
            (vue.openBlock(), vue.createElementBlock("svg", {
              t: "1756246262970",
              class: "icon",
              viewBox: "0 0 1024 1024",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              "p-id": "904",
              width: "32",
              height: "32"
            }, [
              vue.createElementVNode("path", {
                d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
                fill: "#666666",
                "p-id": "905"
              })
            ]))
          ],
          32
          /* NEED_HYDRATION */
        ),
        vue.createElementVNode("view", { class: "header-title" }, "书评详情"),
        vue.createElementVNode("view", {
          class: "more-button",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.showMoreOptions && $options.showMoreOptions(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            t: "1756202704554",
            class: "icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z",
              fill: "#333333"
            }),
            vue.createElementVNode("path", {
              d: "M464 688a48 48 0 1 0 96 0 48 48 0 1 0-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z",
              fill: "#333333"
            })
          ]))
        ])
      ]),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-scroll" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载数据...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误状态 "),
        $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-container"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "error-actions" }, [
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.loadPostDetail && $options.loadPostDetail(...args))
            }, "重新加载")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 书评内容 "),
        !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "review-content"
        }, [
          vue.createCommentVNode(" 评论者信息 "),
          vue.createElementVNode("view", { class: "reviewer-section" }, [
            vue.createElementVNode("view", {
              class: "reviewer-info",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.goToUserProfile && $options.goToUserProfile(...args))
            }, [
              vue.createElementVNode("image", {
                class: "reviewer-avatar",
                src: $data.reviewDetail.avatar,
                mode: "aspectFill"
              }, null, 8, ["src"]),
              vue.createElementVNode("view", { class: "reviewer-details" }, [
                vue.createElementVNode(
                  "text",
                  { class: "reviewer-name" },
                  vue.toDisplayString($data.reviewDetail.reviewer),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "review-meta" }, [
                  vue.createElementVNode("view", { class: "rating-stars" }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.reviewDetail.rating, (n) => {
                        return vue.openBlock(), vue.createElementBlock("text", {
                          class: "star",
                          key: n
                        }, "★");
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )),
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(5 - $data.reviewDetail.rating, (n) => {
                        return vue.openBlock(), vue.createElementBlock("text", {
                          class: "star empty",
                          key: n
                        }, "☆");
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  vue.createElementVNode(
                    "text",
                    { class: "review-time" },
                    vue.toDisplayString($data.reviewDetail.time),
                    1
                    /* TEXT */
                  )
                ])
              ])
            ]),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["follow-button", { "followed": $data.reviewDetail.isFollowed }]),
                onClick: _cache[6] || (_cache[6] = (...args) => $options.toggleFollow && $options.toggleFollow(...args))
              },
              [
                vue.createElementVNode(
                  "text",
                  { class: "follow-text" },
                  vue.toDisplayString($data.reviewDetail.isFollowed ? "已关注" : "关注"),
                  1
                  /* TEXT */
                )
              ],
              2
              /* CLASS */
            )
          ]),
          vue.createCommentVNode(" 书评内容 "),
          $data.reviewDetail.content ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "text-content"
          }, [
            vue.createElementVNode(
              "text",
              { class: "content-text" },
              vue.toDisplayString($data.reviewDetail.content),
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 图片内容 "),
          $data.reviewDetail.images && $data.reviewDetail.images.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "image-content"
          }, [
            vue.createElementVNode("view", { class: "image-grid" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.reviewDetail.images, (image, index) => {
                  return vue.openBlock(), vue.createElementBlock("image", {
                    key: index,
                    class: "content-image",
                    src: image,
                    mode: "aspectFill",
                    onClick: ($event) => $options.previewImage($data.reviewDetail.images, index)
                  }, null, 8, ["src", "onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 互动指标 "),
          vue.createElementVNode("view", { class: "engagement-metrics" }, [
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.handleLike && $options.handleLike(...args))
            }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-icon", { "active": $data.reviewDetail.isLiked }])
                },
                "👍",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-count", { "active": $data.reviewDetail.isLiked }])
                },
                vue.toDisplayString($options.formatCount($data.reviewDetail.likes)),
                3
                /* TEXT, CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[8] || (_cache[8] = (...args) => $options.handleDislike && $options.handleDislike(...args))
            }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-icon", { "active": $data.reviewDetail.isDisliked }])
                },
                "👎",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-count", { "active": $data.reviewDetail.isDisliked }])
                },
                vue.toDisplayString($options.formatCount($data.reviewDetail.dislikes)),
                3
                /* TEXT, CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.handleFavorite && $options.handleFavorite(...args))
            }, [
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-icon", { "active": $data.reviewDetail.isFavorited }])
                },
                "⭐",
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "text",
                {
                  class: vue.normalizeClass(["metric-count", { "active": $data.reviewDetail.isFavorited }])
                },
                vue.toDisplayString($options.formatCount($data.reviewDetail.favorites)),
                3
                /* TEXT, CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "metric-item",
              onClick: _cache[10] || (_cache[10] = (...args) => $options.handleShare && $options.handleShare(...args))
            }, [
              vue.createElementVNode("text", { class: "metric-icon" }, "📤"),
              vue.createElementVNode("text", { class: "metric-count" }, "分享")
            ])
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 评论区域 "),
        vue.createElementVNode("view", { class: "comments-section" }, [
          vue.createElementVNode("view", { class: "comments-header" }, [
            vue.createElementVNode(
              "text",
              { class: "comments-title" },
              "评论 (" + vue.toDisplayString($options.getTotalCommentsCount()) + ")",
              1
              /* TEXT */
            )
          ]),
          vue.createCommentVNode(" 评论列表 "),
          vue.createElementVNode("view", { class: "comments-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.reviewDetail.comments, (comment, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "comment-item",
                  key: index
                }, [
                  vue.createElementVNode("view", { class: "comment-avatar" }, [
                    vue.createElementVNode("image", {
                      class: "comment-user-avatar",
                      src: comment.userAvatar,
                      mode: "aspectFill"
                    }, null, 8, ["src"])
                  ]),
                  vue.createElementVNode("view", { class: "comment-content" }, [
                    vue.createElementVNode("view", { class: "comment-user-info" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "comment-username" },
                        vue.toDisplayString(comment.username),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode(
                        "text",
                        { class: "comment-time" },
                        vue.toDisplayString(comment.time),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode(
                      "text",
                      { class: "comment-text" },
                      vue.toDisplayString(comment.content),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode("view", { class: "comment-actions" }, [
                      vue.createElementVNode("view", {
                        class: "comment-action",
                        onClick: ($event) => $options.likeComment(comment, index)
                      }, [
                        vue.createElementVNode(
                          "text",
                          {
                            class: vue.normalizeClass(["action-icon", { "active": comment.isLiked }])
                          },
                          "👍",
                          2
                          /* CLASS */
                        ),
                        vue.createElementVNode(
                          "text",
                          { class: "action-count" },
                          vue.toDisplayString($options.formatCount(comment.likes)),
                          1
                          /* TEXT */
                        )
                      ], 8, ["onClick"]),
                      vue.createElementVNode("view", {
                        class: "comment-action",
                        onClick: ($event) => $options.replyComment(comment)
                      }, [
                        vue.createElementVNode("text", { class: "action-icon" }, "💬"),
                        vue.createElementVNode("text", { class: "action-count" }, "回复")
                      ], 8, ["onClick"])
                    ]),
                    vue.createCommentVNode(" 回复列表 "),
                    comment.replies && comment.replies.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "replies-list"
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(comment.replies, (reply, replyIndex) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            class: "reply-item",
                            key: replyIndex
                          }, [
                            vue.createElementVNode("view", { class: "reply-avatar" }, [
                              vue.createElementVNode("image", {
                                class: "reply-user-avatar",
                                src: reply.userAvatar,
                                mode: "aspectFill"
                              }, null, 8, ["src"])
                            ]),
                            vue.createElementVNode("view", { class: "reply-content" }, [
                              vue.createElementVNode("view", { class: "reply-user-info" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "reply-username" },
                                  vue.toDisplayString(reply.username),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "reply-time" },
                                  vue.toDisplayString(reply.time),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode("text", { class: "reply-text" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "reply-to" },
                                  "回复 @" + vue.toDisplayString(reply.replyTo) + "：",
                                  1
                                  /* TEXT */
                                ),
                                vue.createTextVNode(
                                  " " + vue.toDisplayString(reply.content),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode("view", { class: "reply-actions" }, [
                                vue.createElementVNode("view", {
                                  class: "reply-action",
                                  onClick: ($event) => $options.likeReply(comment, replyIndex)
                                }, [
                                  vue.createElementVNode(
                                    "text",
                                    {
                                      class: vue.normalizeClass(["action-icon", { "active": reply.isLiked }])
                                    },
                                    "👍",
                                    2
                                    /* CLASS */
                                  ),
                                  vue.createElementVNode(
                                    "text",
                                    { class: "action-count" },
                                    vue.toDisplayString($options.formatCount(reply.likes)),
                                    1
                                    /* TEXT */
                                  )
                                ], 8, ["onClick"]),
                                vue.createElementVNode("view", {
                                  class: "reply-action",
                                  onClick: ($event) => $options.handleReplyToReply(comment, reply)
                                }, [
                                  vue.createElementVNode("text", { class: "action-icon" }, "💬"),
                                  vue.createElementVNode("text", { class: "action-count" }, "回复")
                                ], 8, ["onClick"])
                              ])
                            ])
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ])) : vue.createCommentVNode("v-if", true)
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部评论输入框 "),
      vue.createElementVNode("view", { class: "comment-input-section" }, [
        vue.createElementVNode("view", { class: "comment-input-container" }, [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "comment-input",
            "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.commentText = $event),
            placeholder: $options.getInputPlaceholder(),
            onFocus: _cache[12] || (_cache[12] = (...args) => $options.onInputFocus && $options.onInputFocus(...args)),
            onBlur: _cache[13] || (_cache[13] = (...args) => $options.onInputBlur && $options.onInputBlur(...args))
          }, null, 40, ["placeholder"]), [
            [vue.vModelText, $data.commentText]
          ]),
          vue.createCommentVNode(" 取消回复按钮 "),
          $data.replyToComment ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "cancel-reply-btn",
            onClick: _cache[14] || (_cache[14] = (...args) => $options.cancelReply && $options.cancelReply(...args))
          }, [
            vue.createElementVNode("text", { class: "cancel-reply-text" }, "取消")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["send-button", { "active": $data.commentText.trim() }]),
              onClick: _cache[15] || (_cache[15] = (...args) => $options.submitComment && $options.submitComment(...args))
            },
            [
              vue.createElementVNode("text", { class: "send-text" }, "发送")
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 更多选项弹窗 "),
      $data.showMoreModal ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "more-options-modal",
        onClick: _cache[20] || (_cache[20] = (...args) => $options.hideMoreOptions && $options.hideMoreOptions(...args))
      }, [
        vue.createElementVNode("view", {
          class: "options-content",
          onClick: _cache[19] || (_cache[19] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", {
            class: "option-item",
            onClick: _cache[16] || (_cache[16] = (...args) => $options.reportReview && $options.reportReview(...args))
          }, [
            vue.createElementVNode("text", { class: "option-text" }, "举报")
          ]),
          vue.createElementVNode("view", {
            class: "option-item",
            onClick: _cache[17] || (_cache[17] = (...args) => $options.copyLink && $options.copyLink(...args))
          }, [
            vue.createElementVNode("text", { class: "option-text" }, "复制链接")
          ]),
          vue.createElementVNode("view", {
            class: "option-item",
            onClick: _cache[18] || (_cache[18] = (...args) => $options.hideMoreOptions && $options.hideMoreOptions(...args))
          }, [
            vue.createElementVNode("text", { class: "option-text" }, "取消")
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesFeedReviewDetail = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$I], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/review-detail.vue"]]);
  const _sfc_main$I = {
    name: "AchievementsPage",
    data() {
      return {
        userId: 1000100,
        // 默认用户ID，从页面参数获取
        achievements: [],
        // 成就数据列表
        stats: {
          totalAchievements: 0,
          completedAchievements: 0,
          completionRate: 0
        },
        loading: false,
        hasError: false,
        errorMessage: ""
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
        formatAppLog("log", "at pages/feed/achievements.vue:122", "接收到的用户ID:", this.userId);
      }
      this.loadAchievementData();
    },
    methods: {
      // 加载成就数据
      async loadAchievementData() {
        try {
          formatAppLog("log", "at pages/feed/achievements.vue:131", "=== 开始加载成就数据 ===");
          formatAppLog("log", "at pages/feed/achievements.vue:132", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/achievements.vue:133", "请求URL:", `http://localhost:8888/api/achievement/data?userId=${this.userId}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const [achievementsResponse, statsResponse] = await Promise.all([
            uni.request({
              url: `http://localhost:8888/api/achievement/data?userId=${this.userId}`,
              method: "GET",
              header: {
                "Content-Type": "application/json"
              }
            }),
            uni.request({
              url: `http://localhost:8888/api/achievement/stats?userId=${this.userId}`,
              method: "GET",
              header: {
                "Content-Type": "application/json"
              }
            })
          ]);
          formatAppLog("log", "at pages/feed/achievements.vue:156", "=== 成就数据API响应详情 ===");
          formatAppLog("log", "at pages/feed/achievements.vue:157", "成就数据状态码:", achievementsResponse.statusCode);
          formatAppLog("log", "at pages/feed/achievements.vue:158", "成就数据响应:", achievementsResponse.data);
          formatAppLog("log", "at pages/feed/achievements.vue:160", "=== 统计信息API响应详情 ===");
          formatAppLog("log", "at pages/feed/achievements.vue:161", "统计信息状态码:", statsResponse.statusCode);
          formatAppLog("log", "at pages/feed/achievements.vue:162", "统计信息响应:", statsResponse.data);
          if (achievementsResponse.statusCode === 200 && achievementsResponse.data.success) {
            this.achievements = achievementsResponse.data.data || [];
            formatAppLog("log", "at pages/feed/achievements.vue:167", "成功加载成就数据，共", this.achievements.length, "条");
            uni.showToast({
              title: `加载了${this.achievements.length}个成就`,
              icon: "success",
              duration: 2e3
            });
          } else {
            formatAppLog("error", "at pages/feed/achievements.vue:176", "加载成就数据失败:", achievementsResponse.data.message);
            this.hasError = true;
            this.errorMessage = achievementsResponse.data.message || "加载成就数据失败";
          }
          if (statsResponse.statusCode === 200 && statsResponse.data.success) {
            this.stats = statsResponse.data.data || this.stats;
            formatAppLog("log", "at pages/feed/achievements.vue:184", "成功加载统计信息:", this.stats);
          } else {
            formatAppLog("error", "at pages/feed/achievements.vue:186", "加载统计信息失败:", statsResponse.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/achievements.vue:190", "加载成就数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      // 刷新数据
      async refreshData() {
        formatAppLog("log", "at pages/feed/achievements.vue:204", "开始刷新成就数据");
        this.hasError = false;
        this.errorMessage = "";
        try {
          await this.loadAchievementData();
          uni.showToast({
            title: "刷新成功",
            icon: "success"
          });
        } catch (error) {
          formatAppLog("error", "at pages/feed/achievements.vue:215", "刷新数据失败:", error);
          this.hasError = true;
          this.errorMessage = "刷新数据失败，请重试";
        }
      },
      // 测试后端连接
      async testConnection() {
        try {
          formatAppLog("log", "at pages/feed/achievements.vue:224", "=== 测试成就后端连接 ===");
          const response = await uni.request({
            url: "http://localhost:8888/api/achievement/test",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/achievements.vue:233", "测试连接响应:", response);
          if (response.statusCode === 200) {
            uni.showToast({
              title: "后端连接正常",
              icon: "success"
            });
          } else {
            uni.showToast({
              title: "后端连接失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/achievements.vue:247", "测试连接异常:", error);
          uni.showToast({
            title: "连接异常",
            icon: "error"
          });
        }
      },
      // 格式化时间显示
      formatTimeAgo(date) {
        if (!date)
          return "刚刚";
        const now = /* @__PURE__ */ new Date();
        const time = new Date(date);
        const diff = now - time;
        const minutes = Math.floor(diff / (1e3 * 60));
        const hours = Math.floor(diff / (1e3 * 60 * 60));
        const days = Math.floor(diff / (1e3 * 60 * 60 * 24));
        if (minutes < 1)
          return "刚刚";
        if (minutes < 60)
          return minutes + "分钟前";
        if (hours < 24)
          return hours + "小时前";
        if (days < 7)
          return days + "天前";
        return "一周前";
      },
      // 获取成就图标
      getAchievementIcon(achievement) {
        if (achievement.iconUrl) {
          return achievement.iconUrl;
        }
        if (achievement.status !== void 0) {
          switch (achievement.status) {
            case 0:
              return "🔒";
            case 1:
              return "⏳";
            case 2:
              return "🏆";
            default:
              return "🔒";
          }
        }
        return achievement.isCompleted ? "🏆" : "🔒";
      },
      // 获取成就状态文本
      getAchievementStatusText(achievement) {
        if (achievement.statusText) {
          return achievement.statusText;
        }
        return achievement.isCompleted ? "已完成" : "未完成";
      },
      // 获取成就状态类名
      getAchievementStatusClass(achievement) {
        if (achievement.status !== void 0) {
          switch (achievement.status) {
            case 0:
              return "locked";
            case 1:
              return "in-progress";
            case 2:
              return "completed";
            default:
              return "locked";
          }
        }
        return achievement.isCompleted ? "completed" : "locked";
      },
      goBack() {
        uni.navigateBack();
      },
      addAchievement() {
        uni.showToast({
          title: "添加成就功能",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "achievements-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createCommentVNode(' <view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">成就</text> '),
        vue.createCommentVNode(' <view class="placeholder"></view> ')
      ]),
      vue.createCommentVNode(" 成就统计卡片 "),
      vue.createElementVNode("view", { class: "stats-card" }, [
        vue.createElementVNode("view", { class: "stats-content" }, [
          vue.createElementVNode("view", { class: "stats-item" }, [
            vue.createElementVNode(
              "text",
              { class: "stats-number" },
              vue.toDisplayString($data.stats.completedAchievements),
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "stats-label" }, "已获得")
          ]),
          vue.createElementVNode("view", { class: "stats-divider" }),
          vue.createElementVNode("view", { class: "stats-item" }, [
            vue.createElementVNode(
              "text",
              { class: "stats-number" },
              vue.toDisplayString($data.stats.totalAchievements),
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "stats-label" }, "总成就")
          ]),
          vue.createElementVNode("view", { class: "stats-divider" }),
          vue.createElementVNode("view", { class: "stats-item" }, [
            vue.createElementVNode(
              "text",
              { class: "stats-number" },
              vue.toDisplayString($data.stats.completionRate) + "%",
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "stats-label" }, "完成度")
          ])
        ])
      ]),
      vue.createCommentVNode(" 加载状态 "),
      $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "loading-container"
      }, [
        vue.createElementVNode("text", { class: "loading-text" }, "正在加载成就数据...")
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 错误状态 "),
      $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "error-container"
      }, [
        vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
        vue.createElementVNode(
          "text",
          { class: "error-text" },
          vue.toDisplayString($data.errorMessage),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", { class: "error-actions" }, [
          vue.createElementVNode("button", {
            class: "retry-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.loadAchievementData && $options.loadAchievementData(...args))
          }, "重新加载"),
          vue.createElementVNode("button", {
            class: "retry-button",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.testConnection && $options.testConnection(...args))
          }, "测试连接")
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 成就列表 "),
      !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "achievements-list"
      }, [
        vue.createCommentVNode(" 成就项目 "),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.achievements, (achievement, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "achievement-item",
              key: achievement.id
            }, [
              vue.createElementVNode("view", { class: "achievement-icon" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["icon-badge", $options.getAchievementStatusClass(achievement)])
                  },
                  [
                    vue.createElementVNode(
                      "text",
                      { class: "icon-text" },
                      vue.toDisplayString($options.getAchievementIcon(achievement)),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ]),
              vue.createElementVNode("view", { class: "achievement-content" }, [
                vue.createElementVNode(
                  "text",
                  { class: "achievement-title" },
                  vue.toDisplayString(achievement.name),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  { class: "achievement-desc" },
                  vue.toDisplayString(achievement.description),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "achievement-meta" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "achievement-date" },
                    vue.toDisplayString(achievement.completedAt ? $options.formatTimeAgo(achievement.completedAt) : "未解锁"),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["achievement-status", $options.getAchievementStatusClass(achievement)])
                    },
                    [
                      vue.createElementVNode(
                        "text",
                        { class: "status-text" },
                        vue.toDisplayString($options.getAchievementStatusText(achievement)),
                        1
                        /* TEXT */
                      )
                    ],
                    2
                    /* CLASS */
                  )
                ])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        vue.createCommentVNode(" 空状态 "),
        $data.achievements.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "empty-state"
        }, [
          vue.createElementVNode("text", { class: "empty-icon" }, "🏆"),
          vue.createElementVNode("text", { class: "empty-text" }, "暂无成就数据")
        ])) : vue.createCommentVNode("v-if", true)
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 浮动操作按钮 "),
      vue.createCommentVNode(' <view class="fab-button" @click="addAchievement">\n			<text class="fab-icon">+</text>\n		</view> '),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesFeedAchievements = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$H], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/achievements.vue"]]);
  const _sfc_main$H = {
    data() {
      return {
        keyword: ""
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      search() {
        uni.showToast({
          title: "搜索功能开发中",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "search-page" }, [
      vue.createElementVNode("view", { class: "search-header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("text", null, "返回")
        ]),
        vue.withDirectives(vue.createElementVNode(
          "input",
          {
            class: "search-input",
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.keyword = $event),
            placeholder: "搜索内容..."
          },
          null,
          512
          /* NEED_PATCH */
        ), [
          [vue.vModelText, $data.keyword]
        ]),
        vue.createElementVNode("view", {
          class: "search-btn",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.search && $options.search(...args))
        }, "搜索")
      ]),
      vue.createElementVNode("view", { class: "search-results" }, [
        vue.createElementVNode("text", null, "搜索结果将在这里显示")
      ])
    ]);
  }
  const PagesFeedSearch = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$G], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/search.vue"]]);
  const _sfc_main$G = {
    name: "LikesDislikesPage",
    data() {
      return {
        likesExpanded: true,
        dislikesExpanded: true,
        likesList: [],
        dislikesList: [],
        showModal: false,
        modalType: "like",
        // 'like' or 'dislike'
        inputValue: "",
        isEditing: false,
        editingIndex: -1,
        editingId: null,
        userId: 1000100,
        // 默认用户ID，从页面参数获取
        loading: false,
        errorMessage: "",
        hasError: false
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
      }
      formatAppLog("log", "at pages/feed/likes-dislikes.vue:181", "页面加载，用户ID:", this.userId);
      this.loadLikesDislikesData();
    },
    computed: {
      likesCount() {
        return this.likesList.length;
      },
      dislikesCount() {
        return this.dislikesList.length;
      },
      totalCount() {
        return this.likesCount + this.dislikesCount;
      }
    },
    methods: {
      // 加载喜欢讨厌数据
      async loadLikesDislikesData() {
        try {
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:200", "=== 开始加载喜欢讨厌数据 ===");
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:201", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:202", "请求URL:", `http://localhost:8888/api/likes-dislikes/data?userId=${this.userId}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/likes-dislikes/data?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:215", "=== API响应详情 ===");
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:216", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:217", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const data = response.data.data;
            this.likesList = data.likes || [];
            this.dislikesList = data.dislikes || [];
            formatAppLog("log", "at pages/feed/likes-dislikes.vue:224", "成功加载喜欢讨厌数据，喜欢", this.likesList.length, "条，讨厌", this.dislikesList.length, "条");
            if (this.likesList.length === 0 && this.dislikesList.length === 0) {
              this.hasError = true;
              this.errorMessage = "暂无喜欢讨厌数据，请添加一些内容";
            }
          } else {
            formatAppLog("error", "at pages/feed/likes-dislikes.vue:231", "加载喜欢讨厌数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载数据失败";
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/likes-dislikes.vue:236", "加载喜欢讨厌数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
        } finally {
          this.loading = false;
        }
      },
      // 测试后端连接
      async testConnection() {
        try {
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:247", "=== 测试后端连接 ===");
          const response = await uni.request({
            url: "http://localhost:8888/api/likes-dislikes/test",
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/likes-dislikes.vue:256", "测试连接响应:", response);
          if (response.statusCode === 200) {
            uni.showToast({
              title: "后端连接正常",
              icon: "success"
            });
          } else {
            uni.showToast({
              title: "后端连接失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/likes-dislikes.vue:270", "测试连接异常:", error);
          uni.showToast({
            title: "连接异常",
            icon: "error"
          });
        }
      },
      goBack() {
        uni.navigateBack();
      },
      toggleLikes() {
        this.likesExpanded = !this.likesExpanded;
      },
      toggleDislikes() {
        this.dislikesExpanded = !this.dislikesExpanded;
      },
      showAddModal() {
        this.modalType = "like";
        this.isEditing = false;
        this.inputValue = "";
        this.showModal = true;
      },
      hideModal() {
        this.showModal = false;
        this.inputValue = "";
        this.isEditing = false;
        this.editingIndex = -1;
        this.editingId = null;
      },
      addItem(type) {
        this.modalType = type;
        this.isEditing = false;
        this.inputValue = "";
        this.showModal = true;
      },
      editItem(type, index) {
        this.modalType = type;
        this.isEditing = true;
        this.editingIndex = index;
        const item = type === "like" ? this.likesList[index] : this.dislikesList[index];
        this.inputValue = item.text || item;
        this.editingId = item.id || null;
        this.showModal = true;
      },
      async deleteItem(type, index) {
        uni.showModal({
          title: "确认删除",
          content: "确定要删除这个项目吗？",
          success: async (res) => {
            if (res.confirm) {
              try {
                const item = type === "like" ? this.likesList[index] : this.dislikesList[index];
                const itemId = item.id || item;
                const response = await uni.request({
                  url: `http://localhost:8888/api/likes-dislikes/delete-${type}`,
                  method: "POST",
                  data: {
                    userId: this.userId,
                    [type + "Id"]: itemId
                  },
                  header: {
                    "Content-Type": "application/json"
                  }
                });
                if (response.statusCode === 200 && response.data.success) {
                  if (type === "like") {
                    this.likesList.splice(index, 1);
                  } else {
                    this.dislikesList.splice(index, 1);
                  }
                  uni.showToast({
                    title: "删除成功",
                    icon: "success"
                  });
                } else {
                  uni.showToast({
                    title: response.data.message || "删除失败",
                    icon: "error"
                  });
                }
              } catch (error) {
                formatAppLog("error", "at pages/feed/likes-dislikes.vue:355", "删除操作异常:", error);
                uni.showToast({
                  title: "删除失败",
                  icon: "error"
                });
              }
            }
          }
        });
      },
      async confirmAction() {
        if (!this.inputValue.trim()) {
          uni.showToast({
            title: "请输入内容",
            icon: "none"
          });
          return;
        }
        try {
          if (this.isEditing) {
            const response = await uni.request({
              url: `http://localhost:8888/api/likes-dislikes/edit-${this.modalType}`,
              method: "POST",
              data: {
                userId: this.userId,
                [this.modalType + "Id"]: this.editingId,
                [this.modalType + "Text"]: this.inputValue.trim(),
                [this.modalType + "Type"]: "general"
              },
              header: {
                "Content-Type": "application/json"
              }
            });
            if (response.statusCode === 200 && response.data.success) {
              const item = this.modalType === "like" ? this.likesList[this.editingIndex] : this.dislikesList[this.editingIndex];
              item.text = this.inputValue.trim();
              item.updatedAt = /* @__PURE__ */ new Date();
              uni.showToast({
                title: "编辑成功",
                icon: "success"
              });
            } else {
              uni.showToast({
                title: response.data.message || "编辑失败",
                icon: "error"
              });
            }
          } else {
            const response = await uni.request({
              url: `http://localhost:8888/api/likes-dislikes/add-${this.modalType}`,
              method: "POST",
              data: {
                userId: this.userId,
                [this.modalType + "Text"]: this.inputValue.trim(),
                [this.modalType + "Type"]: "general"
              },
              header: {
                "Content-Type": "application/json"
              }
            });
            if (response.statusCode === 200 && response.data.success) {
              const newItem = {
                id: response.data.data,
                text: this.inputValue.trim(),
                type: "general",
                createdAt: /* @__PURE__ */ new Date(),
                updatedAt: /* @__PURE__ */ new Date(),
                timeAgo: "刚刚"
              };
              if (this.modalType === "like") {
                this.likesList.unshift(newItem);
              } else {
                this.dislikesList.unshift(newItem);
              }
              uni.showToast({
                title: "添加成功",
                icon: "success"
              });
            } else {
              uni.showToast({
                title: response.data.message || "添加失败",
                icon: "error"
              });
            }
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/likes-dislikes.vue:451", "操作异常:", error);
          uni.showToast({
            title: "操作失败",
            icon: "error"
          });
        }
        this.hideModal();
      }
    }
  };
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "likes-dislikes-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createCommentVNode(' <view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view> '),
        vue.createCommentVNode(' <text class="page-title">喜恶</text> '),
        vue.createCommentVNode(' <view class="placeholder"></view> ')
      ]),
      vue.createCommentVNode(" 统计卡片 "),
      vue.createElementVNode("view", { class: "stats-card" }, [
        vue.createElementVNode("view", { class: "stats-content" }, [
          vue.createElementVNode("view", { class: "stats-item" }, [
            vue.createElementVNode(
              "text",
              { class: "stats-number" },
              vue.toDisplayString($options.likesCount),
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "stats-label" }, "喜欢")
          ]),
          vue.createElementVNode("view", { class: "stats-divider" }),
          vue.createElementVNode("view", { class: "stats-item" }, [
            vue.createElementVNode(
              "text",
              { class: "stats-number" },
              vue.toDisplayString($options.dislikesCount),
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "stats-label" }, "讨厌")
          ]),
          vue.createElementVNode("view", { class: "stats-divider" }),
          vue.createElementVNode("view", { class: "stats-item" }, [
            vue.createElementVNode(
              "text",
              { class: "stats-number" },
              vue.toDisplayString($options.totalCount),
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", { class: "stats-label" }, "总计")
          ])
        ])
      ]),
      vue.createCommentVNode(" 喜欢列表 "),
      vue.createElementVNode("view", { class: "preference-section" }, [
        vue.createElementVNode("view", {
          class: "section-header",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleLikes && $options.toggleLikes(...args))
        }, [
          vue.createElementVNode("text", { class: "section-title" }, "我喜欢的"),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["expand-icon", { expanded: $data.likesExpanded }])
            },
            [
              vue.createElementVNode("text", { class: "expand-arrow" }, "^")
            ],
            2
            /* CLASS */
          )
        ]),
        $data.likesExpanded ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "section-content"
        }, [
          vue.createCommentVNode(" 加载状态 "),
          $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "loading-container"
          }, [
            vue.createElementVNode("text", { class: "loading-text" }, "正在加载数据...")
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 错误状态 "),
          $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "error-container"
          }, [
            vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
            vue.createElementVNode(
              "text",
              { class: "error-text" },
              vue.toDisplayString($data.errorMessage),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "error-actions" }, [
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.loadLikesDislikesData && $options.loadLikesDislikesData(...args))
              }, "重新加载"),
              vue.createElementVNode("button", {
                class: "retry-button",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.testConnection && $options.testConnection(...args))
              }, "测试连接")
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 喜欢列表 "),
          !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", { key: 2 }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.likesList, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "preference-item",
                  key: "like-" + index
                }, [
                  vue.createElementVNode("view", { class: "item-icon like-icon" }, [
                    vue.createElementVNode("text", { class: "icon-text" }, "❤️")
                  ]),
                  vue.createElementVNode("view", { class: "item-content" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "item-text" },
                      vue.toDisplayString(item.text || item),
                      1
                      /* TEXT */
                    ),
                    item.timeAgo ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "item-time"
                      },
                      vue.toDisplayString(item.timeAgo),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ]),
                  vue.createElementVNode("view", { class: "item-actions" }, [
                    vue.createElementVNode("view", {
                      class: "action-btn edit-btn",
                      onClick: ($event) => $options.editItem("like", index)
                    }, [
                      vue.createElementVNode("text", { class: "action-text" }, "编辑")
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "action-btn delete-btn",
                      onClick: ($event) => $options.deleteItem("like", index)
                    }, [
                      vue.createElementVNode("text", { class: "action-text" }, "删除")
                    ], 8, ["onClick"])
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            vue.createElementVNode("view", {
              class: "add-item-btn",
              onClick: _cache[3] || (_cache[3] = ($event) => $options.addItem("like"))
            }, [
              vue.createElementVNode("text", { class: "add-text" }, "+ 添加喜欢")
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 讨厌列表 "),
      vue.createElementVNode("view", { class: "preference-section" }, [
        vue.createElementVNode("view", {
          class: "section-header",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleDislikes && $options.toggleDislikes(...args))
        }, [
          vue.createElementVNode("text", { class: "section-title" }, "我讨厌的"),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["expand-icon", { expanded: $data.dislikesExpanded }])
            },
            [
              vue.createElementVNode("text", { class: "expand-arrow" }, "^")
            ],
            2
            /* CLASS */
          )
        ]),
        $data.dislikesExpanded ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "section-content"
        }, [
          vue.createCommentVNode(" 讨厌列表 "),
          !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", { key: 0 }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.dislikesList, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "preference-item",
                  key: "dislike-" + index
                }, [
                  vue.createElementVNode("view", { class: "item-icon dislike-icon" }, [
                    vue.createElementVNode("text", { class: "icon-text" }, "💔")
                  ]),
                  vue.createElementVNode("view", { class: "item-content" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "item-text" },
                      vue.toDisplayString(item.text || item),
                      1
                      /* TEXT */
                    ),
                    item.timeAgo ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "item-time"
                      },
                      vue.toDisplayString(item.timeAgo),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ]),
                  vue.createElementVNode("view", { class: "item-actions" }, [
                    vue.createElementVNode("view", {
                      class: "action-btn edit-btn",
                      onClick: ($event) => $options.editItem("dislike", index)
                    }, [
                      vue.createElementVNode("text", { class: "action-text" }, "编辑")
                    ], 8, ["onClick"]),
                    vue.createElementVNode("view", {
                      class: "action-btn delete-btn",
                      onClick: ($event) => $options.deleteItem("dislike", index)
                    }, [
                      vue.createElementVNode("text", { class: "action-text" }, "删除")
                    ], 8, ["onClick"])
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            vue.createElementVNode("view", {
              class: "add-item-btn",
              onClick: _cache[5] || (_cache[5] = ($event) => $options.addItem("dislike"))
            }, [
              vue.createElementVNode("text", { class: "add-text" }, "+ 添加讨厌")
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 浮动操作按钮 "),
      vue.createCommentVNode(' <view class="fab-button" @click="showAddModal">\n			<text class="fab-icon">+</text>\n		</view> '),
      vue.createCommentVNode(" 添加/编辑模态框 "),
      $data.showModal ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "modal-overlay",
        onClick: _cache[11] || (_cache[11] = (...args) => $options.hideModal && $options.hideModal(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[10] || (_cache[10] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "modal-header" }, [
            vue.createElementVNode(
              "text",
              { class: "modal-title" },
              vue.toDisplayString($data.isEditing ? "编辑" : "添加") + vue.toDisplayString($data.modalType === "like" ? "喜欢" : "讨厌"),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", {
              class: "close-btn",
              onClick: _cache[6] || (_cache[6] = (...args) => $options.hideModal && $options.hideModal(...args))
            }, [
              vue.createElementVNode("text", { class: "close-text" }, "×")
            ])
          ]),
          vue.createElementVNode("view", { class: "modal-body" }, [
            vue.withDirectives(vue.createElementVNode("input", {
              class: "input-field",
              "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.inputValue = $event),
              placeholder: "请输入您" + ($data.modalType === "like" ? "喜欢" : "讨厌") + "的内容",
              maxlength: "50"
            }, null, 8, ["placeholder"]), [
              [vue.vModelText, $data.inputValue]
            ]),
            vue.createElementVNode("view", { class: "modal-actions" }, [
              vue.createElementVNode("view", {
                class: "modal-btn cancel-btn",
                onClick: _cache[8] || (_cache[8] = (...args) => $options.hideModal && $options.hideModal(...args))
              }, [
                vue.createElementVNode("text", { class: "btn-text" }, "取消")
              ]),
              vue.createElementVNode("view", {
                class: "modal-btn confirm-btn",
                onClick: _cache[9] || (_cache[9] = (...args) => $options.confirmAction && $options.confirmAction(...args))
              }, [
                vue.createElementVNode("text", { class: "btn-text" }, "确定")
              ])
            ])
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesFeedLikesDislikes = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$F], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/likes-dislikes.vue"]]);
  const _sfc_main$F = {
    name: "InteractionMessagesPage",
    data() {
      return {
        filterExpanded: false,
        currentFilter: "all",
        userId: 1000100,
        // 默认用户ID，从chat-feed页面传递过来
        loading: false,
        hasError: false,
        errorMessage: "",
        messages: [],
        // 从后端API获取的真实数据
        messageFilters: [
          { type: "all", name: "全部消息", icon: "〰️" },
          { type: "likes", name: "赞与收藏", icon: "❤️" },
          /* { type: 'mentions', name: '提及', icon: '@' }, */
          { type: "received-comments", name: "收到的评论", icon: "💬" },
          { type: "sent-comments", name: "发出的评论", icon: "💬" }
          /* { type: 'received-danmu', name: '收到的弹幕', icon: '弹' },
          { type: 'sent-danmu', name: '发出的弹幕', icon: '弹' } */
        ]
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
        formatAppLog("log", "at pages/feed/interaction-messages.vue:129", "接收到用户ID:", this.userId);
      }
      this.loadInteractionMessages();
    },
    methods: {
      // 加载互动消息数据
      async loadInteractionMessages() {
        try {
          formatAppLog("log", "at pages/feed/interaction-messages.vue:138", "=== 开始加载互动消息数据 ===");
          formatAppLog("log", "at pages/feed/interaction-messages.vue:139", "用户ID:", this.userId);
          formatAppLog("log", "at pages/feed/interaction-messages.vue:140", "筛选类型:", this.currentFilter);
          formatAppLog("log", "at pages/feed/interaction-messages.vue:141", "请求URL:", `http://localhost:8888/api/interaction-messages/data?userId=${this.userId}&filterType=${this.currentFilter}`);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/interaction-messages/data?userId=${this.userId}&filterType=${this.currentFilter}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/feed/interaction-messages.vue:155", "=== API响应详情 ===");
          formatAppLog("log", "at pages/feed/interaction-messages.vue:156", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/feed/interaction-messages.vue:157", "响应数据:", response.data);
          if (response.statusCode === 200) {
            formatAppLog("log", "at pages/feed/interaction-messages.vue:161", "响应数据结构检查:");
            formatAppLog("log", "at pages/feed/interaction-messages.vue:162", "- response.data:", response.data);
            formatAppLog("log", "at pages/feed/interaction-messages.vue:163", "- response.data.success:", response.data.success);
            formatAppLog("log", "at pages/feed/interaction-messages.vue:164", "- response.data.data:", response.data.data);
            let messagesData = [];
            if (response.data && response.data.data && Array.isArray(response.data.data)) {
              messagesData = response.data.data;
            } else if (Array.isArray(response.data)) {
              messagesData = response.data;
            } else {
              formatAppLog("error", "at pages/feed/interaction-messages.vue:175", "无法识别的响应格式:", response.data);
              this.hasError = true;
              this.errorMessage = "响应数据格式错误";
              return;
            }
            this.messages = messagesData;
            formatAppLog("log", "at pages/feed/interaction-messages.vue:182", "成功加载互动消息数据，共", this.messages.length, "条");
            formatAppLog("log", "at pages/feed/interaction-messages.vue:183", "第一条数据示例:", this.messages.length > 0 ? this.messages[0] : "无数据");
            if (this.messages.length === 0) {
              this.hasError = true;
              this.errorMessage = "暂无互动消息，请稍后再试";
              formatAppLog("log", "at pages/feed/interaction-messages.vue:188", "没有获取到任何互动消息数据");
            } else {
              uni.showToast({
                title: `加载了${this.messages.length}条消息`,
                icon: "success",
                duration: 2e3
              });
            }
          } else {
            formatAppLog("error", "at pages/feed/interaction-messages.vue:198", "加载互动消息数据失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载数据失败";
            uni.showToast({
              title: "加载数据失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/feed/interaction-messages.vue:207", "加载互动消息数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      goBack() {
        uni.navigateBack();
      },
      toggleFilter() {
        this.filterExpanded = !this.filterExpanded;
      },
      selectFilter(filterType) {
        this.currentFilter = filterType;
        this.filterExpanded = false;
        this.loadInteractionMessages();
        uni.showToast({
          title: `已切换到${this.getMessageFilterName(filterType)}`,
          icon: "none"
        });
      },
      getMessageFilterName(filterType) {
        const filter = this.messageFilters.find((f) => f.type === filterType);
        return filter ? filter.name : "";
      },
      getCurrentFilterName() {
        return this.getMessageFilterName(this.currentFilter);
      },
      async markAllAsRead() {
        uni.showModal({
          title: "确认操作",
          content: "确定要将所有消息标记为已读吗？",
          success: async (res) => {
            if (res.confirm) {
              try {
                formatAppLog("log", "at pages/feed/interaction-messages.vue:249", "开始标记所有消息为已读");
                const response = await uni.request({
                  url: `http://localhost:8888/api/interaction-messages/mark-all-read?userId=${this.userId}`,
                  method: "POST",
                  header: {
                    "Content-Type": "application/json"
                  }
                });
                formatAppLog("log", "at pages/feed/interaction-messages.vue:259", "标记已读API响应:", response);
                if (response.statusCode === 200 && response.data.success) {
                  uni.showToast({
                    title: response.data.message,
                    icon: "success"
                  });
                  this.loadInteractionMessages();
                } else {
                  formatAppLog("error", "at pages/feed/interaction-messages.vue:269", "标记已读操作失败:", response.data.message);
                  uni.showToast({
                    title: response.data.message || "标记已读失败",
                    icon: "error"
                  });
                }
              } catch (error) {
                formatAppLog("error", "at pages/feed/interaction-messages.vue:276", "标记已读操作异常:", error);
                uni.showToast({
                  title: "网络错误",
                  icon: "error"
                });
              }
            }
          }
        });
      },
      // 处理消息点击
      handleMessageClick(message) {
        formatAppLog("log", "at pages/feed/interaction-messages.vue:289", "点击消息:", message);
        if (message.contentType) {
          let url = "";
          switch (message.contentType) {
            case "novel":
              url = `/pages/feed/novel-detail?id=${message.contentId}`;
              break;
            case "image":
              url = `/pages/feed/post-detail?postId=${message.contentId}`;
              break;
            case "text":
              url = `/pages/feed/post-detail?postId=${message.contentId}`;
              break;
            case "video":
              url = `/pages/feed/post-detail?postId=${message.contentId}`;
              break;
            default:
              url = `/pages/feed/post-detail?postId=${message.contentId}`;
              break;
          }
          if (url) {
            uni.navigateTo({
              url
            });
          }
        } else {
          uni.showModal({
            title: "消息详情",
            content: message.messageText + (message.commentText ? "\n\n评论内容：" + message.commentText : ""),
            showCancel: false
          });
        }
      }
    }
  };
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "interaction-messages-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          (vue.openBlock(), vue.createElementBlock("svg", {
            class: "back-icon",
            viewBox: "0 0 1024 1024",
            version: "1.1",
            xmlns: "http://www.w3.org/2000/svg",
            width: "32",
            height: "32"
          }, [
            vue.createElementVNode("path", {
              d: "M407.01 512l286.008-286.008a35.84 35.84 0 0 0-50.683-50.683L330.982 486.656a35.84 35.84 0 0 0 0 50.683L642.34 848.69a35.84 35.84 0 0 0 50.683-50.683L407.009 512z",
              fill: "#666666"
            })
          ]))
        ]),
        vue.createElementVNode("view", {
          class: "title-section",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleFilter && $options.toggleFilter(...args))
        }, [
          vue.createElementVNode(
            "text",
            { class: "page-title" },
            vue.toDisplayString($options.getCurrentFilterName()),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["filter-arrow", { expanded: $data.filterExpanded }])
            },
            [
              (vue.openBlock(), vue.createElementBlock("svg", {
                class: "arrow-icon",
                viewBox: "0 0 1024 1024",
                version: "1.1",
                xmlns: "http://www.w3.org/2000/svg",
                width: "32",
                height: "32"
              }, [
                vue.createElementVNode("path", {
                  d: "M832 288l-320 448-320-448z",
                  fill: "#020202"
                })
              ]))
            ],
            2
            /* CLASS */
          )
        ]),
        vue.createElementVNode("view", {
          class: "check-button",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.markAllAsRead && $options.markAllAsRead(...args))
        }, [
          vue.createElementVNode("view", { class: "check-icon" }, "✓")
        ])
      ]),
      vue.createCommentVNode(" 消息分类筛选 "),
      $data.filterExpanded ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "filter-section"
      }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.messageFilters, (filter, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: vue.normalizeClass(["filter-item", { active: $data.currentFilter === filter.type }]),
              key: index,
              onClick: ($event) => $options.selectFilter(filter.type)
            }, [
              vue.createElementVNode("view", { class: "filter-icon" }, [
                vue.createElementVNode(
                  "text",
                  { class: "icon-text" },
                  vue.toDisplayString(filter.icon),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode(
                "text",
                { class: "filter-text" },
                vue.toDisplayString(filter.name),
                1
                /* TEXT */
              ),
              $data.currentFilter === filter.type ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "filter-check"
              }, [
                vue.createElementVNode("text", { class: "check-text" }, "✓")
              ])) : vue.createCommentVNode("v-if", true)
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 消息列表 "),
      vue.createElementVNode("view", { class: "message-list" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-container"
        }, [
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载消息...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误状态 "),
        $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-container"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "error-actions" }, [
            vue.createElementVNode("button", {
              class: "retry-button",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.loadInteractionMessages && $options.loadInteractionMessages(...args))
            }, "重新加载")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 消息列表 "),
        !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", { key: 2 }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.messages, (message, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["message-item", { "unread": !message.isRead }]),
                key: index,
                onClick: ($event) => $options.handleMessageClick(message)
              }, [
                vue.createElementVNode("view", { class: "avatar-section" }, [
                  vue.createElementVNode("image", {
                    class: "user-avatar",
                    src: message.fromUserAvatar || "",
                    mode: "aspectFill"
                  }, null, 8, ["src"]),
                  vue.createCommentVNode(" 根据消息类型显示不同的徽章 "),
                  message.actionType === "like" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "action-badge"
                  }, "❤️")) : message.actionType === "favorite" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "action-badge"
                  }, "⭐")) : message.actionType === "received-comment" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 2,
                    class: "action-badge"
                  }, "💬")) : message.actionType === "sent-comment" ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 3,
                    class: "action-badge"
                  }, "💬")) : vue.createCommentVNode("v-if", true)
                ]),
                vue.createElementVNode("view", { class: "message-content" }, [
                  vue.createElementVNode("view", { class: "user-info" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "username" },
                      vue.toDisplayString(message.fromUsername || message.toUsername),
                      1
                      /* TEXT */
                    ),
                    message.relationship ? (vue.openBlock(), vue.createElementBlock(
                      "text",
                      {
                        key: 0,
                        class: "relationship"
                      },
                      vue.toDisplayString(message.relationship),
                      1
                      /* TEXT */
                    )) : vue.createCommentVNode("v-if", true)
                  ]),
                  vue.createElementVNode(
                    "text",
                    { class: "message-text" },
                    vue.toDisplayString(message.messageText),
                    1
                    /* TEXT */
                  ),
                  message.commentText ? (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 0,
                      class: "comment-text"
                    },
                    vue.toDisplayString(message.commentText),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode(
                    "text",
                    { class: "message-date" },
                    vue.toDisplayString(message.timeAgo),
                    1
                    /* TEXT */
                  )
                ]),
                message.contentThumbnail ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "content-thumbnail"
                }, [
                  vue.createElementVNode("image", {
                    class: "thumbnail-image",
                    src: message.contentThumbnail,
                    mode: "aspectFill"
                  }, null, 8, ["src"])
                ])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 未读标识 "),
                !message.isRead ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "unread-dot"
                })) : vue.createCommentVNode("v-if", true)
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createCommentVNode(" 空状态 "),
          $data.messages.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty-container"
          }, [
            vue.createElementVNode("view", { class: "empty-icon" }, "📭"),
            vue.createElementVNode(
              "text",
              { class: "empty-text" },
              "暂无" + vue.toDisplayString($options.getCurrentFilterName()) + "消息",
              1
              /* TEXT */
            )
          ])) : vue.createCommentVNode("v-if", true)
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesFeedInteractionMessages = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$E], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/feed/interaction-messages.vue"]]);
  const _sfc_main$E = {
    name: "PublishPage",
    data() {
      return {
        userId: 1000100,
        // 用户ID，从页面参数获取
        contentText: "",
        // 内容文本
        selectedColumn: "",
        // 选中的必选专栏
        showFeatureRow: true,
        // 是否显示功能按钮行
        showLocationTags: true,
        // 是否显示位置标签行
        imageUrls: "",
        // 图片URLs
        title: "",
        // 标题（用于我有、我要）
        description: "",
        // 描述（用于我有）
        featureItems: [
          { iconClass: "green-icon", text: "手记" },
          { iconClass: "diamond-icon", text: "小说" },
          { iconClass: "diamond-icon", text: "小日常" },
          { iconClass: "diamond-icon", text: "睡觉" }
        ],
        locationTags: ["杭州", "酒球会(杭州店)", "烟火万塘", "LiT CX"],
        columnOptions: [
          { value: "mood", label: "心情" },
          { value: "ihave", label: "我有" },
          { value: "iwant", label: "我要" },
          { value: "ilike", label: "我喜欢" },
          { value: "ihate", label: "我讨厌" }
        ]
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
        formatAppLog("log", "at pages/publish/publish.vue:173", "PublishPage: 接收用户ID:", this.userId);
      }
    },
    computed: {
      canPublish() {
        return this.selectedColumn !== "" && this.contentText.trim() !== "";
      }
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      selectColumn(value) {
        this.selectedColumn = value;
        formatAppLog("log", "at pages/publish/publish.vue:187", "选择专栏:", value);
      },
      getContentPlaceholder() {
        switch (this.selectedColumn) {
          case "mood":
            return "分享你的心情...";
          case "ihave":
            return "描述你拥有的物品...";
          case "iwant":
            return "描述你的需求...";
          case "ilike":
            return "分享你喜欢的东西...";
          case "ihate":
            return "分享你讨厌的东西...";
          default:
            return "分享你的想法...";
        }
      },
      closeFeatureRow() {
        this.showFeatureRow = false;
      },
      closeLocationRow() {
        this.showLocationTags = false;
      },
      selectImage() {
        uni.showToast({
          title: "选择图片功能开发中",
          icon: "none"
        });
      },
      mentionUser() {
        uni.showToast({
          title: "艾特用户功能开发中",
          icon: "none"
        });
      },
      addHashtag() {
        uni.showToast({
          title: "添加标签功能开发中",
          icon: "none"
        });
      },
      addGif() {
        uni.showToast({
          title: "添加GIF功能开发中",
          icon: "none"
        });
      },
      addEmoji() {
        uni.showToast({
          title: "添加表情功能开发中",
          icon: "none"
        });
      },
      addMore() {
        uni.showToast({
          title: "更多功能开发中",
          icon: "none"
        });
      },
      async publishContent() {
        if (!this.canPublish) {
          uni.showToast({
            title: "请先选择必选专栏",
            icon: "none"
          });
          return;
        }
        if (!this.contentText.trim()) {
          uni.showToast({
            title: "请输入内容",
            icon: "none"
          });
          return;
        }
        uni.showModal({
          title: "确认发布",
          content: "确定要发布这条内容吗？",
          success: async (res) => {
            if (res.confirm) {
              await this.submitContent();
            }
          }
        });
      },
      // 提交内容到后端
      async submitContent() {
        try {
          formatAppLog("log", "at pages/publish/publish.vue:278", "PublishPage: 开始发布内容");
          formatAppLog("log", "at pages/publish/publish.vue:279", "用户ID:", this.userId);
          formatAppLog("log", "at pages/publish/publish.vue:280", "专栏类型:", this.selectedColumn);
          formatAppLog("log", "at pages/publish/publish.vue:281", "内容:", this.contentText);
          let requestData = {
            userId: this.userId,
            contentText: this.contentText,
            columnType: this.selectedColumn
          };
          if (this.imageUrls) {
            requestData.imageUrls = this.imageUrls;
          }
          if (this.selectedColumn === "ihave" || this.selectedColumn === "iwant") {
            requestData.title = this.title || this.contentText.substring(0, 20) + "...";
            if (this.selectedColumn === "ihave") {
              requestData.description = this.description || this.contentText;
            }
          }
          formatAppLog("log", "at pages/publish/publish.vue:303", "请求数据:", requestData);
          const response = await uni.request({
            url: "http://localhost:8888/api/publish/content",
            method: "POST",
            data: requestData,
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/publish/publish.vue:314", "发布API响应:", response);
          if (response.statusCode === 200 && response.data.success) {
            uni.showToast({
              title: response.data.message || "发布成功",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateBack();
            }, 1500);
          } else {
            formatAppLog("error", "at pages/publish/publish.vue:327", "发布失败:", response.data.message);
            uni.showToast({
              title: response.data.message || "发布失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/publish/publish.vue:334", "发布异常:", error);
          uni.showToast({
            title: "网络错误，请重试",
            icon: "error"
          });
        }
      }
    }
  };
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "publish-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "cancel-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("text", { class: "cancel-text" }, "取消")
        ]),
        vue.createElementVNode("view", { class: "title-section" }, [
          vue.createElementVNode("text", { class: "page-title" }, "Afriends"),
          vue.createElementVNode("text", { class: "subtitle" }, "曇鬲")
        ]),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["send-button", { disabled: !$options.canPublish }]),
            onClick: _cache[1] || (_cache[1] = (...args) => $options.publishContent && $options.publishContent(...args))
          },
          [
            vue.createElementVNode("text", { class: "send-text" }, "发送")
          ],
          2
          /* CLASS */
        )
      ]),
      vue.createCommentVNode(" 内容输入区域 "),
      vue.createElementVNode("view", { class: "content-input-area" }, [
        vue.createCommentVNode(" 标题输入（我有、我要专栏） "),
        $data.selectedColumn === "ihave" || $data.selectedColumn === "iwant" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "title-input"
        }, [
          vue.withDirectives(vue.createElementVNode("input", {
            class: "title-field",
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.title = $event),
            placeholder: $data.selectedColumn === "ihave" ? "物品标题（如：我的iPhone 15）" : "需求标题（如：需要一台MacBook）",
            "placeholder-class": "input-placeholder"
          }, null, 8, ["placeholder"]), [
            [vue.vModelText, $data.title]
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 描述输入（我有专栏） "),
        $data.selectedColumn === "ihave" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "description-input"
        }, [
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              class: "description-field",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.description = $event),
              placeholder: "详细描述（如：购入时间、使用情况等）",
              "placeholder-class": "input-placeholder",
              "show-confirm-bar": false,
              "adjust-position": true,
              "hold-keyboard": true
            },
            null,
            512
            /* NEED_PATCH */
          ), [
            [vue.vModelText, $data.description]
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 主要内容输入 "),
        vue.withDirectives(vue.createElementVNode("textarea", {
          class: "input-field",
          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.contentText = $event),
          placeholder: $options.getContentPlaceholder(),
          "placeholder-class": "input-placeholder",
          "auto-focus": true,
          "show-confirm-bar": false,
          "adjust-position": true,
          "hold-keyboard": true
        }, null, 8, ["placeholder"]), [
          [vue.vModelText, $data.contentText]
        ])
      ]),
      vue.createCommentVNode(" 功能选项按钮 "),
      vue.createElementVNode("view", { class: "feature-buttons" }, [
        vue.createCommentVNode(" 第一行：可左右滑动的硬标签 "),
        $data.showFeatureRow ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "button-row scrollable-row"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.featureItems, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "feature-button",
                key: index
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["button-icon", item.iconClass])
                  },
                  null,
                  2
                  /* CLASS */
                ),
                vue.createElementVNode(
                  "text",
                  { class: "button-text" },
                  vue.toDisplayString(item.text),
                  1
                  /* TEXT */
                )
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "close-row-button",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.closeFeatureRow && $options.closeFeatureRow(...args))
          }, [
            vue.createElementVNode("text", { class: "close-text" }, "×")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 第二行：添加位置和超话靠左，公开靠右 "),
        vue.createElementVNode("view", { class: "button-row second-row" }, [
          vue.createElementVNode("view", { class: "left-buttons" }, [
            vue.createElementVNode("view", { class: "feature-button" }, [
              vue.createElementVNode("view", { class: "button-icon pin-icon" }),
              vue.createElementVNode("text", { class: "button-text" }, "添加位置")
            ]),
            vue.createElementVNode("view", { class: "feature-button" }, [
              vue.createElementVNode("view", { class: "button-icon diamond-icon" }),
              vue.createElementVNode("text", { class: "button-text" }, "超话")
            ])
          ]),
          vue.createElementVNode("view", { class: "right-buttons" }, [
            vue.createElementVNode("view", { class: "feature-button" }, [
              vue.createElementVNode("view", { class: "button-icon lock-icon" }),
              vue.createElementVNode("text", { class: "button-text" }, "公开")
            ])
          ])
        ]),
        vue.createCommentVNode(" 第三行：位置标签，可左右滑动 "),
        $data.showLocationTags ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "location-tags scrollable-row"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.locationTags, (tag, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "tag-item",
                key: index
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "tag-text" },
                  vue.toDisplayString(tag),
                  1
                  /* TEXT */
                )
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createElementVNode("view", {
            class: "close-row-button",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.closeLocationRow && $options.closeLocationRow(...args))
          }, [
            vue.createElementVNode("text", { class: "close-text" }, "×")
          ])
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 必选专栏 "),
      vue.createElementVNode("view", { class: "required-column" }, [
        vue.createElementVNode("text", { class: "column-title" }, "必选专栏 *"),
        vue.createElementVNode("view", { class: "column-options" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.columnOptions, (option) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["column-option", { selected: $data.selectedColumn === option.value }]),
                key: option.value,
                onClick: ($event) => $options.selectColumn(option.value)
              }, [
                vue.createElementVNode(
                  "text",
                  { class: "option-text" },
                  vue.toDisplayString(option.label),
                  1
                  /* TEXT */
                )
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ]),
      vue.createCommentVNode(" 底部工具栏 "),
      vue.createElementVNode("view", { class: "bottom-toolbar" }, [
        vue.createElementVNode("view", {
          class: "tool-item",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.selectImage && $options.selectImage(...args))
        }, [
          vue.createElementVNode("view", { class: "tool-icon gallery-icon" })
        ]),
        vue.createElementVNode("view", {
          class: "tool-item",
          onClick: _cache[8] || (_cache[8] = (...args) => $options.mentionUser && $options.mentionUser(...args))
        }, [
          vue.createElementVNode("view", { class: "tool-icon at-icon" }, "@")
        ]),
        vue.createElementVNode("view", {
          class: "tool-item",
          onClick: _cache[9] || (_cache[9] = (...args) => $options.addHashtag && $options.addHashtag(...args))
        }, [
          vue.createElementVNode("view", { class: "tool-icon hashtag-icon" }, "#")
        ]),
        vue.createElementVNode("view", {
          class: "tool-item",
          onClick: _cache[10] || (_cache[10] = (...args) => $options.addGif && $options.addGif(...args))
        }, [
          vue.createElementVNode("view", { class: "tool-icon gif-icon" }, "GIF")
        ]),
        vue.createElementVNode("view", {
          class: "tool-item",
          onClick: _cache[11] || (_cache[11] = (...args) => $options.addEmoji && $options.addEmoji(...args))
        }, [
          vue.createElementVNode("view", { class: "tool-icon emoji-icon" }, "😊")
        ]),
        vue.createElementVNode("view", {
          class: "tool-item",
          onClick: _cache[12] || (_cache[12] = (...args) => $options.addMore && $options.addMore(...args))
        }, [
          vue.createElementVNode("view", { class: "tool-icon plus-icon" }, "+")
        ])
      ])
    ]);
  }
  const PagesPublishPublish = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$D], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/publish/publish.vue"]]);
  const _sfc_main$D = {
    name: "SettingsPage",
    data() {
      return {
        darkMode: false
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/chat/chat"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      toggleDarkMode() {
        this.darkMode = !this.darkMode;
      },
      goToSwitchAccount() {
        uni.navigateTo({
          url: "/pages/settings/switch-account"
        });
      },
      goToAccountSecurity() {
        uni.navigateTo({
          url: "/pages/settings/account-security"
        });
      },
      goToModeSelection() {
        uni.navigateTo({
          url: "/pages/settings/mode-selection"
        });
      },
      goToNotifications() {
        uni.navigateTo({
          url: "/pages/settings/notification-settings"
        });
      },
      goToPrivacySettings() {
        uni.navigateTo({
          url: "/pages/settings/privacy-settings"
        });
      },
      goToLanguage() {
        uni.navigateTo({
          url: "/pages/settings/language"
        });
      },
      goToBlockedUsers() {
        uni.navigateTo({
          url: "/pages/settings/blocked-users"
        });
      },
      goToChatSettings() {
        uni.navigateTo({
          url: "/pages/settings/chat-settings"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToCustomerService() {
        uni.navigateTo({
          url: "/pages/chat/chat?friendName=客服"
        });
      },
      goToUsageTutorial() {
        uni.navigateTo({
          url: "/pages/settings/usage-tutorial"
        });
      },
      logoutAccount() {
        uni.showModal({
          title: "确认注销",
          content: "确定要注销账户吗？此操作不可逆。",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "账户已注销",
                icon: "none",
                duration: 1500
              });
              setTimeout(() => {
                uni.redirectTo({
                  url: "/pages/login/login-replica"
                });
              }, 1500);
            }
          }
        });
      },
      signOut() {
        uni.showModal({
          title: "确认退出",
          content: "确定要退出登录吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "已退出登录",
                icon: "none",
                duration: 1500
              });
              setTimeout(() => {
                uni.redirectTo({
                  url: "/pages/login/login-replica"
                });
              }, 1500);
            }
          }
        });
      }
    }
  };
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "settings-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">设置</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 设置内容 "),
      vue.createElementVNode("view", { class: "settings-content" }, [
        vue.createCommentVNode(" 我的账户 "),
        vue.createElementVNode("view", { class: "settings-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "我的账户")
          ]),
          vue.createElementVNode("view", { class: "section-items" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("text", { class: "item-text" }, "暗夜模式"),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["toggle-switch", { active: $data.darkMode }]),
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleDarkMode && $options.toggleDarkMode(...args))
                },
                [
                  vue.createElementVNode("view", { class: "toggle-circle" })
                ],
                2
                /* CLASS */
              )
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.goToSwitchAccount && $options.goToSwitchAccount(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "切换账号"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.goToAccountSecurity && $options.goToAccountSecurity(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "账号与安全"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.goToModeSelection && $options.goToModeSelection(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "模式选择"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ])
          ])
        ]),
        vue.createCommentVNode(" 账户设置 "),
        vue.createElementVNode("view", { class: "settings-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "账户设置")
          ]),
          vue.createElementVNode("view", { class: "section-items" }, [
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.goToNotifications && $options.goToNotifications(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "通知"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.goToPrivacySettings && $options.goToPrivacySettings(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "隐私设置"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[6] || (_cache[6] = (...args) => $options.goToLanguage && $options.goToLanguage(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "语言"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.goToBlockedUsers && $options.goToBlockedUsers(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "拉黑用户"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createCommentVNode(' <view class="setting-item" @click="goToChatSettings">\n						<text class="item-text">聊天设置</text>\n						<view class="arrow-right"></view>\n					</view> ')
          ])
        ]),
        vue.createCommentVNode(" 帮助 "),
        vue.createElementVNode("view", { class: "settings-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "帮助")
          ]),
          vue.createElementVNode("view", { class: "section-items" }, [
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[8] || (_cache[8] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "服务条款"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.goToCustomerService && $options.goToCustomerService(...args))
            }, [
              vue.createElementVNode("text", { class: "item-text" }, "客服与支持"),
              vue.createElementVNode("view", { class: "arrow-right" })
            ]),
            vue.createCommentVNode(' <view class="setting-item" @click="goToUsageTutorial">\n						<text class="item-text">使用教程</text>\n						<view class="arrow-right"></view>\n					</view> ')
          ])
        ]),
        vue.createCommentVNode(" 账户操作 "),
        vue.createElementVNode("view", { class: "account-actions" }, [
          vue.createElementVNode("view", {
            class: "action-button logout-account",
            onClick: _cache[10] || (_cache[10] = (...args) => $options.logoutAccount && $options.logoutAccount(...args))
          }, [
            vue.createElementVNode("text", { class: "action-text" }, "注销账户")
          ]),
          vue.createElementVNode("view", {
            class: "action-button sign-out",
            onClick: _cache[11] || (_cache[11] = (...args) => $options.signOut && $options.signOut(...args))
          }, [
            vue.createElementVNode("text", { class: "action-text" }, "退出登录")
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createCommentVNode(' <view class="bottom-navigation">\n			<view class="nav-item" @click="goToHome">\n				<text class="nav-text">首页</text>\n			</view>\n			<view class="nav-item" @click="goToChatList">\n				<text class="nav-text">消息</text>\n			</view>\n			<view class="nav-item" @click="goToAIChat">\n				<view class="ai-tab">\n					<text class="ai-text">AI</text>\n				</view>\n			</view>\n			<view class="nav-item" @click="goToFriendList">\n				<text class="nav-text">好友</text>\n			</view>\n			<view class="nav-avatar" @click="goToProfile">\n				<image class="avatar-small" src="" mode="aspectFill"></image>\n			</view>\n		</view> ')
    ]);
  }
  const PagesSettingsSettings = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$C], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/settings.vue"]]);
  const _sfc_main$C = {
    // 定义组件的数据
    data() {
      return {
        clipboardEnabled: true,
        // 剪切板权限开关的初始状态
        showDialog: false,
        // 是否显示权限弹窗
        currentPermissionTitle: "",
        // 当前权限标题
        currentPermissionType: ""
        // 当前权限类型
      };
    },
    // 定义组件的方法
    methods: {
      /**
       * @description 返回上一页
       * 在uni-app中，通常使用 uni.navigateBack()
       */
      goBack() {
        formatAppLog("log", "at pages/settings/system-permissions.vue:130", "返回上一页");
        uni.navigateBack();
      },
      /**
       * @description 切换剪切板权限开关状态
       * @param {Object} e - 事件对象，e.detail.value 包含开关的当前值
       */
      toggleClipboard(e) {
        this.clipboardEnabled = e.detail.value;
        formatAppLog("log", "at pages/settings/system-permissions.vue:139", "剪切板权限已切换为:", this.clipboardEnabled);
      },
      /**
       * @description 跳转到相册权限页面
       */
      goToAlbumPermissions() {
        uni.navigateTo({
          url: "/pages/settings/album-permissions"
        });
      },
      /**
       * @description 显示权限弹窗
       * @param {String} permissionTitle - 权限标题
       * @param {String} permissionType - 权限类型
       */
      showPermissionDialog(permissionTitle, permissionType) {
        this.currentPermissionTitle = permissionTitle;
        this.currentPermissionType = permissionType;
        this.showDialog = true;
      },
      /**
       * @description 隐藏权限弹窗
       */
      hidePermissionDialog() {
        this.showDialog = false;
      },
      /**
       * @description 获取权限图标
       * @param {String} permissionType - 权限类型
       * @returns {String} 图标文本
       */
      getPermissionIcon(permissionType) {
        const icons = {
          "location": "📍",
          "camera": "📷",
          "microphone": "🎤"
        };
        return icons[permissionType] || "⚙️";
      },
      /**
       * @description 获取权限描述
       * @param {String} permissionType - 权限类型
       * @returns {String} 描述文本
       */
      getPermissionDescription(permissionType) {
        const descriptions = {
          "location": "关闭后,将无法为你推荐位置相关的服务。",
          "camera": "关闭后,将无法使用抖音拍摄作品。",
          "microphone": "关闭后,将无法使用抖音拍摄作品。"
        };
        return descriptions[permissionType] || "关闭后,将无法使用相关功能。";
      },
      /**
       * @description 跳转到系统设置
       * @param {String} permissionType - 权限类型
       */
      goToSystemSettings(permissionType) {
        formatAppLog("log", "at pages/settings/system-permissions.vue:197", "前往系统设置:", permissionType);
        uni.showModal({
          title: "跳转系统设置",
          content: `即将跳转到系统设置页面，请在"${permissionType}"中开启相应权限。`,
          showCancel: false,
          success: () => {
            uni.showToast({
              title: "系统设置功能开发中",
              icon: "none"
            });
          }
        });
      }
    }
  };
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(" 外层容器，确保整个页面是白底黑字 "),
        vue.createElementVNode("view", { class: "system-permissions-page" }, [
          vue.createCommentVNode(" 顶部导航栏区域 "),
          vue.createCommentVNode(' <view class="header"> '),
          vue.createCommentVNode(" 返回箭头，使用 SVG 图标 "),
          vue.createCommentVNode(' <view @click="goBack" class="back-button">\n        <svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" class="back-icon">\n          <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>\n        </svg>\n      </view> '),
          vue.createCommentVNode(" 页面标题 "),
          vue.createCommentVNode(' <text class="page-title">系统权限</text> '),
          vue.createCommentVNode(" </view> "),
          vue.createCommentVNode(" 权限列表区域 "),
          vue.createElementVNode("view", { class: "permissions-list" }, [
            vue.createCommentVNode(" 通讯录权限 "),
            vue.createElementVNode("view", {
              class: "permission-item",
              onClick: _cache[0] || (_cache[0] = ($event) => $options.goToSystemSettings("通讯录权限"))
            }, [
              vue.createElementVNode("text", { class: "permission-text" }, "通讯录权限"),
              vue.createElementVNode("text", { class: "permission-arrow" }, ">")
            ]),
            vue.createCommentVNode(" 相册权限 "),
            vue.createElementVNode("view", {
              class: "permission-item",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.goToAlbumPermissions && $options.goToAlbumPermissions(...args))
            }, [
              vue.createElementVNode("text", { class: "permission-text" }, "相册权限"),
              vue.createElementVNode("view", { class: "permission-action" }, [
                vue.createElementVNode("text", { class: "action-text" }, "去设置"),
                vue.createElementVNode("text", { class: "permission-arrow" }, ">")
              ])
            ]),
            vue.createCommentVNode(" 位置权限 "),
            vue.createElementVNode("view", {
              class: "permission-item",
              onClick: _cache[2] || (_cache[2] = ($event) => $options.showPermissionDialog("位置权限", "location"))
            }, [
              vue.createElementVNode("text", { class: "permission-text" }, "位置权限"),
              vue.createElementVNode("view", { class: "permission-action" }, [
                vue.createElementVNode("text", { class: "action-text" }, "去设置"),
                vue.createElementVNode("text", { class: "permission-arrow" }, ">")
              ])
            ]),
            vue.createCommentVNode(" 相机权限 "),
            vue.createElementVNode("view", {
              class: "permission-item",
              onClick: _cache[3] || (_cache[3] = ($event) => $options.showPermissionDialog("相机权限", "camera"))
            }, [
              vue.createElementVNode("text", { class: "permission-text" }, "相机权限"),
              vue.createElementVNode("view", { class: "permission-action" }, [
                vue.createElementVNode("text", { class: "action-text" }, "去设置"),
                vue.createElementVNode("text", { class: "permission-arrow" }, ">")
              ])
            ]),
            vue.createCommentVNode(" 麦克风权限 "),
            vue.createElementVNode("view", {
              class: "permission-item",
              onClick: _cache[4] || (_cache[4] = ($event) => $options.showPermissionDialog("麦克风权限", "microphone"))
            }, [
              vue.createElementVNode("text", { class: "permission-text" }, "麦克风权限"),
              vue.createElementVNode("view", { class: "permission-action" }, [
                vue.createElementVNode("text", { class: "action-text" }, "去设置"),
                vue.createElementVNode("text", { class: "permission-arrow" }, ">")
              ])
            ]),
            vue.createCommentVNode(" 其他权限 "),
            vue.createElementVNode("view", {
              class: "permission-item",
              onClick: _cache[5] || (_cache[5] = ($event) => $options.goToSystemSettings("其他权限"))
            }, [
              vue.createElementVNode("text", { class: "permission-text" }, "其他权限"),
              vue.createElementVNode("view", { class: "permission-action" }, [
                vue.createElementVNode("text", { class: "action-text" }, "去设置"),
                vue.createElementVNode("text", { class: "permission-arrow" }, ">")
              ])
            ]),
            vue.createCommentVNode(" 剪切板读取权限区域 "),
            vue.createElementVNode("view", { class: "clipboard-section" }, [
              vue.createElementVNode("view", { class: "clipboard-header" }, [
                vue.createElementVNode("text", { class: "clipboard-title" }, "剪切板读取权限"),
                vue.createCommentVNode(" uni-app的switch组件 "),
                vue.createElementVNode("switch", {
                  checked: $data.clipboardEnabled,
                  onChange: _cache[6] || (_cache[6] = (...args) => $options.toggleClipboard && $options.toggleClipboard(...args)),
                  color: "#007aff",
                  class: "clipboard-switch"
                }, null, 40, ["checked"])
              ]),
              vue.createElementVNode("text", { class: "clipboard-description" }, " 关闭后，将无法自动识别你复制的口令以展示相应内容 ")
            ])
          ]),
          vue.createCommentVNode(" 权限弹窗 "),
          $data.showDialog ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "permission-overlay",
            onClick: _cache[11] || (_cache[11] = (...args) => $options.hidePermissionDialog && $options.hidePermissionDialog(...args))
          }, [
            vue.createElementVNode("view", {
              class: "permission-dialog",
              onClick: _cache[10] || (_cache[10] = vue.withModifiers(() => {
              }, ["stop"]))
            }, [
              vue.createCommentVNode(" 关闭按钮 "),
              vue.createElementVNode("view", {
                class: "close-button",
                onClick: _cache[7] || (_cache[7] = (...args) => $options.hidePermissionDialog && $options.hidePermissionDialog(...args))
              }, [
                vue.createElementVNode("text", { class: "close-icon" }, "×")
              ]),
              vue.createCommentVNode(" 权限图标 "),
              vue.createElementVNode("view", { class: "permission-icon" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["icon-container", $data.currentPermissionType])
                  },
                  [
                    vue.createElementVNode(
                      "text",
                      { class: "icon-text" },
                      vue.toDisplayString($options.getPermissionIcon($data.currentPermissionType)),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ]),
              vue.createCommentVNode(" 权限标题 "),
              vue.createElementVNode(
                "text",
                { class: "dialog-title" },
                vue.toDisplayString($data.currentPermissionTitle),
                1
                /* TEXT */
              ),
              vue.createCommentVNode(" 权限描述 "),
              vue.createElementVNode(
                "text",
                { class: "dialog-description" },
                vue.toDisplayString($options.getPermissionDescription($data.currentPermissionType)),
                1
                /* TEXT */
              ),
              vue.createCommentVNode(" 操作按钮 "),
              vue.createElementVNode("view", { class: "dialog-buttons" }, [
                vue.createElementVNode("view", {
                  class: "button button-secondary",
                  onClick: _cache[8] || (_cache[8] = (...args) => $options.hidePermissionDialog && $options.hidePermissionDialog(...args))
                }, [
                  vue.createElementVNode("text", { class: "button-text" }, "再想想")
                ]),
                vue.createElementVNode("view", {
                  class: "button button-primary",
                  onClick: _cache[9] || (_cache[9] = ($event) => $options.goToSystemSettings($data.currentPermissionTitle))
                }, [
                  vue.createElementVNode("text", { class: "button-text" }, "去设置")
                ])
              ])
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ])
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  const PagesSettingsSystemPermissions = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$B], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/system-permissions.vue"]]);
  const _sfc_main$B = {
    name: "PermissionsPage",
    data() {
      return {
        showDialog: false,
        currentPermissionTitle: "",
        currentPermissionType: ""
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      showPermissionDialog(permissionTitle) {
        this.currentPermissionTitle = permissionTitle;
        this.currentPermissionType = permissionTitle;
        this.showDialog = true;
      },
      hidePermissionDialog() {
        this.showDialog = false;
      },
      confirmPermission() {
        uni.showToast({
          title: "权限设置已更新",
          icon: "success"
        });
        this.hidePermissionDialog();
      },
      goToSystemSettings() {
        uni.showModal({
          title: "系统设置",
          content: "即将跳转到系统设置页面",
          showCancel: true,
          confirmText: "确定",
          cancelText: "取消",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "跳转系统设置",
                icon: "none"
              });
            }
          }
        });
      },
      getPermissionDescription(permissionType) {
        const descriptions = {
          "位置权限": "位置权限允许应用获取您的地理位置信息，用于提供基于位置的服务和功能。",
          "相机权限": "相机权限允许应用使用您的设备摄像头进行拍照、录制视频和视频通话。",
          "麦克风权限": "麦克风权限允许应用使用您的设备麦克风进行语音通话、录音和语音识别。"
        };
        return descriptions[permissionType] || "该权限用于提供相关功能和服务。";
      }
    }
  };
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "permissions-container" }, [
      vue.createCommentVNode(" Header "),
      vue.createCommentVNode('<view class="header">\n			<view class="header-left">\n				<text class="back-icon" @click="goBack">‹</text>\n			</view>\n			<view class="header-title">\n				<text>权限管理</text>\n			</view>\n			<view class="header-right">\n				<text class="more-icon">⋯</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" Content "),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createCommentVNode(" Permission Categories "),
        vue.createElementVNode("view", { class: "permission-section" }, [
          vue.createElementVNode("view", { class: "section-title" }, [
            vue.createElementVNode("text", null, "应用权限")
          ]),
          vue.createElementVNode("view", {
            class: "permission-item",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.showPermissionDialog("位置权限"))
          }, [
            vue.createElementVNode("view", { class: "permission-info" }, [
              vue.createElementVNode("view", { class: "permission-icon" }, "📍"),
              vue.createElementVNode("view", { class: "permission-details" }, [
                vue.createElementVNode("text", { class: "permission-name" }, "位置权限"),
                vue.createElementVNode("text", { class: "permission-desc" }, "用于获取您的位置信息")
              ])
            ]),
            vue.createElementVNode("view", { class: "permission-status" }, [
              vue.createElementVNode("text", { class: "status-text" }, "已授权"),
              vue.createElementVNode("text", { class: "arrow" }, "›")
            ])
          ]),
          vue.createElementVNode("view", {
            class: "permission-item",
            onClick: _cache[1] || (_cache[1] = ($event) => $options.showPermissionDialog("相机权限"))
          }, [
            vue.createElementVNode("view", { class: "permission-info" }, [
              vue.createElementVNode("view", { class: "permission-icon" }, "📷"),
              vue.createElementVNode("view", { class: "permission-details" }, [
                vue.createElementVNode("text", { class: "permission-name" }, "相机权限"),
                vue.createElementVNode("text", { class: "permission-desc" }, "用于拍照和视频通话")
              ])
            ]),
            vue.createElementVNode("view", { class: "permission-status" }, [
              vue.createElementVNode("text", { class: "status-text" }, "已授权"),
              vue.createElementVNode("text", { class: "arrow" }, "›")
            ])
          ]),
          vue.createElementVNode("view", {
            class: "permission-item",
            onClick: _cache[2] || (_cache[2] = ($event) => $options.showPermissionDialog("麦克风权限"))
          }, [
            vue.createElementVNode("view", { class: "permission-info" }, [
              vue.createElementVNode("view", { class: "permission-icon" }, "🎤"),
              vue.createElementVNode("view", { class: "permission-details" }, [
                vue.createElementVNode("text", { class: "permission-name" }, "麦克风权限"),
                vue.createElementVNode("text", { class: "permission-desc" }, "用于语音通话和录音")
              ])
            ]),
            vue.createElementVNode("view", { class: "permission-status" }, [
              vue.createElementVNode("text", { class: "status-text" }, "已授权"),
              vue.createElementVNode("text", { class: "arrow" }, "›")
            ])
          ]),
          vue.createElementVNode("view", {
            class: "permission-item",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.goToSystemSettings && $options.goToSystemSettings(...args))
          }, [
            vue.createElementVNode("view", { class: "permission-info" }, [
              vue.createElementVNode("view", { class: "permission-icon" }, "📱"),
              vue.createElementVNode("view", { class: "permission-details" }, [
                vue.createElementVNode("text", { class: "permission-name" }, "通讯录权限"),
                vue.createElementVNode("text", { class: "permission-desc" }, "用于同步联系人信息")
              ])
            ]),
            vue.createElementVNode("view", { class: "permission-status" }, [
              vue.createElementVNode("text", { class: "status-text" }, "未授权"),
              vue.createElementVNode("text", { class: "arrow" }, "›")
            ])
          ]),
          vue.createElementVNode("view", {
            class: "permission-item",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.goToSystemSettings && $options.goToSystemSettings(...args))
          }, [
            vue.createElementVNode("view", { class: "permission-info" }, [
              vue.createElementVNode("view", { class: "permission-icon" }, "⚙️"),
              vue.createElementVNode("view", { class: "permission-details" }, [
                vue.createElementVNode("text", { class: "permission-name" }, "其他权限"),
                vue.createElementVNode("text", { class: "permission-desc" }, "系统相关权限设置")
              ])
            ]),
            vue.createElementVNode("view", { class: "permission-status" }, [
              vue.createElementVNode("text", { class: "status-text" }, "系统管理"),
              vue.createElementVNode("text", { class: "arrow" }, "›")
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" Permission Dialog Overlay "),
      $data.showDialog ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "permission-overlay",
        onClick: _cache[9] || (_cache[9] = (...args) => $options.hidePermissionDialog && $options.hidePermissionDialog(...args))
      }, [
        vue.createElementVNode("view", {
          class: "permission-dialog",
          onClick: _cache[8] || (_cache[8] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "dialog-header" }, [
            vue.createElementVNode(
              "text",
              { class: "dialog-title" },
              vue.toDisplayString($data.currentPermissionTitle),
              1
              /* TEXT */
            ),
            vue.createElementVNode("text", {
              class: "close-btn",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.hidePermissionDialog && $options.hidePermissionDialog(...args))
            }, "×")
          ]),
          vue.createElementVNode("view", { class: "dialog-content" }, [
            vue.createElementVNode(
              "text",
              { class: "dialog-desc" },
              vue.toDisplayString($options.getPermissionDescription($data.currentPermissionType)),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "dialog-actions" }, [
            vue.createElementVNode("button", {
              class: "action-btn cancel-btn",
              onClick: _cache[6] || (_cache[6] = (...args) => $options.hidePermissionDialog && $options.hidePermissionDialog(...args))
            }, "取消"),
            vue.createElementVNode("button", {
              class: "action-btn confirm-btn",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.confirmPermission && $options.confirmPermission(...args))
            }, "确认")
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesSettingsPermissions = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$A], ["__scopeId", "data-v-99e09832"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/permissions.vue"]]);
  const _sfc_main$A = {
    name: "AlbumPermissionsPage",
    data() {
      return {
        locationPermission: true,
        sharePermission: true,
        analysisPermission: true
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      goToSettings() {
        uni.showToast({
          title: "跳转到系统设置",
          icon: "none"
        });
      },
      toggleLocationPermission() {
        this.locationPermission = !this.locationPermission;
      },
      toggleSharePermission() {
        this.sharePermission = !this.sharePermission;
      },
      toggleAnalysisPermission() {
        this.analysisPermission = !this.analysisPermission;
      }
    }
  };
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "album-permissions-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">相册权限</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 相册权限设置 "),
      vue.createElementVNode("view", { class: "permission-section" }, [
        vue.createElementVNode("view", { class: "permission-header" }, [
          vue.createElementVNode("text", { class: "permission-title" }, "相册权限"),
          vue.createElementVNode("view", {
            class: "go-to-settings",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.goToSettings && $options.goToSettings(...args))
          }, [
            vue.createElementVNode("text", { class: "settings-text" }, "去设置"),
            vue.createElementVNode("view", { class: "arrow-right" })
          ])
        ])
      ]),
      vue.createCommentVNode(" 权限选项列表 "),
      vue.createElementVNode("view", { class: "permissions-list" }, [
        vue.createCommentVNode(" 位置信息权限 "),
        vue.createElementVNode("view", { class: "permission-item" }, [
          vue.createElementVNode("view", { class: "permission-content" }, [
            vue.createElementVNode("text", { class: "permission-name" }, "允许使用相册内容的位置信息"),
            vue.createElementVNode("text", { class: "permission-description" }, "关闭后,将不使用本地相册和已经上传的相册内容中的位置信息,如发布时无法为你推荐相册中照片和视频的拍摄地点等")
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["toggle-switch", { active: $data.locationPermission }]),
              onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleLocationPermission && $options.toggleLocationPermission(...args))
            },
            [
              vue.createElementVNode("view", { class: "toggle-circle" })
            ],
            2
            /* CLASS */
          )
        ]),
        vue.createCommentVNode(" 快捷分享权限 "),
        vue.createElementVNode("view", { class: "permission-item" }, [
          vue.createElementVNode("view", { class: "permission-content" }, [
            vue.createElementVNode("text", { class: "permission-name" }, "允许快捷分享相册内容到Afriends"),
            vue.createElementVNode("text", { class: "permission-description" }, "关闭后,你无法将系统相册中的图片和视频快捷分享给Afriends朋友")
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["toggle-switch", { active: $data.sharePermission }]),
              onClick: _cache[2] || (_cache[2] = (...args) => $options.toggleSharePermission && $options.toggleSharePermission(...args))
            },
            [
              vue.createElementVNode("view", { class: "toggle-circle" })
            ],
            2
            /* CLASS */
          )
        ]),
        vue.createCommentVNode(" 识别分析权限 "),
        vue.createElementVNode("view", { class: "permission-item" }, [
          vue.createElementVNode("view", { class: "permission-content" }, [
            vue.createElementVNode("text", { class: "permission-name" }, "允许识别并分析相册内容"),
            vue.createElementVNode("text", { class: "permission-description" }, "在你进入相册后,我们仅会在授权访问的相册范围内识别分析,在设备本地运行,关闭后,将不再对您手机相册中的内容进行识别,如不再提供相册搜索、人像筛选、推荐影集等功能")
          ]),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["toggle-switch", { active: $data.analysisPermission }]),
              onClick: _cache[3] || (_cache[3] = (...args) => $options.toggleAnalysisPermission && $options.toggleAnalysisPermission(...args))
            },
            [
              vue.createElementVNode("view", { class: "toggle-circle" })
            ],
            2
            /* CLASS */
          )
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsAlbumPermissions = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$z], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/album-permissions.vue"]]);
  const _sfc_main$z = {
    name: "BlockedUsersPage",
    data() {
      return {
        searchKeyword: "",
        blockedUsers: [
          {
            id: "001",
            name: "张三",
            avatar: "",
            blockDate: "2024-12-20",
            reason: "骚扰行为"
          },
          {
            id: "002",
            name: "李四",
            avatar: "",
            blockDate: "2024-12-18",
            reason: "不当言论"
          },
          {
            id: "003",
            name: "王五",
            avatar: "",
            blockDate: "2024-12-15",
            reason: "恶意举报"
          },
          {
            id: "004",
            name: "赵六",
            avatar: "",
            blockDate: "2024-12-10",
            reason: "虚假信息"
          }
        ]
      };
    },
    computed: {
      totalBlockedUsers() {
        return this.blockedUsers.length;
      },
      searchResults() {
        if (!this.searchKeyword.trim()) {
          return this.blockedUsers;
        }
        return this.blockedUsers.filter(
          (user) => user.name.toLowerCase().includes(this.searchKeyword.toLowerCase()) || user.id.includes(this.searchKeyword)
        );
      },
      filteredUsers() {
        return this.searchResults;
      }
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      onSearchInput() {
      },
      clearSearch() {
        this.searchKeyword = "";
      },
      unblockUser(user) {
        uni.showModal({
          title: "确认解除拉黑",
          content: `确定要解除对 ${user.name} 的拉黑吗？`,
          success: (res) => {
            if (res.confirm) {
              const index = this.blockedUsers.findIndex((u) => u.id === user.id);
              if (index > -1) {
                this.blockedUsers.splice(index, 1);
                uni.showToast({
                  title: "已解除拉黑",
                  icon: "success"
                });
              }
            }
          }
        });
      },
      formatDate(dateString) {
        const date = new Date(dateString);
        return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
      }
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "blocked-users-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">黑名单管理</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 搜索栏 "),
      vue.createElementVNode("view", { class: "search-section" }, [
        vue.createElementVNode("view", { class: "search-input" }, [
          vue.createElementVNode("view", { class: "search-icon" }, [
            vue.createElementVNode("view", { class: "search-magnifier" })
          ]),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              class: "search-field",
              placeholder: "搜索黑名单用户",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchKeyword = $event),
              onInput: _cache[1] || (_cache[1] = (...args) => $options.onSearchInput && $options.onSearchInput(...args))
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.searchKeyword]
          ]),
          $data.searchKeyword ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "clear-button",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.clearSearch && $options.clearSearch(...args))
          }, [
            vue.createElementVNode("view", { class: "clear-icon" })
          ])) : vue.createCommentVNode("v-if", true)
        ])
      ]),
      vue.createCommentVNode(" 统计信息 "),
      vue.createElementVNode("view", { class: "stats-section" }, [
        vue.createElementVNode("view", { class: "stats-item" }, [
          vue.createElementVNode(
            "text",
            { class: "stats-number" },
            vue.toDisplayString($options.totalBlockedUsers),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "stats-label" }, "已拉黑用户")
        ]),
        vue.createElementVNode("view", { class: "stats-item" }, [
          vue.createElementVNode(
            "text",
            { class: "stats-number" },
            vue.toDisplayString($options.searchResults.length),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { class: "stats-label" }, "搜索结果")
        ])
      ]),
      vue.createCommentVNode(" 黑名单用户列表 "),
      vue.createElementVNode("view", { class: "users-list" }, [
        $options.filteredUsers.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "empty-state"
        }, [
          vue.createElementVNode("view", { class: "empty-icon" }, [
            vue.createElementVNode("view", { class: "empty-face" })
          ]),
          vue.createElementVNode("text", { class: "empty-title" }, "暂无黑名单用户"),
          vue.createElementVNode("text", { class: "empty-description" }, "你还没有拉黑任何用户")
        ])) : vue.createCommentVNode("v-if", true),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($options.filteredUsers, (user) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: user.id,
              class: "user-item"
            }, [
              vue.createElementVNode("view", { class: "user-info" }, [
                vue.createElementVNode("view", { class: "user-avatar" }, [
                  user.avatar ? (vue.openBlock(), vue.createElementBlock("image", {
                    key: 0,
                    src: user.avatar,
                    class: "avatar-image"
                  }, null, 8, ["src"])) : (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "avatar-placeholder"
                  }, [
                    vue.createElementVNode(
                      "text",
                      { class: "avatar-text" },
                      vue.toDisplayString(user.name.charAt(0)),
                      1
                      /* TEXT */
                    )
                  ]))
                ]),
                vue.createElementVNode("view", { class: "user-details" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "user-name" },
                    vue.toDisplayString(user.name),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "user-id" },
                    "ID: " + vue.toDisplayString(user.id),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "block-date" },
                    "拉黑时间: " + vue.toDisplayString($options.formatDate(user.blockDate)),
                    1
                    /* TEXT */
                  )
                ])
              ]),
              vue.createElementVNode("view", { class: "user-actions" }, [
                vue.createElementVNode("view", {
                  class: "action-button unblock-btn",
                  onClick: ($event) => $options.unblockUser(user)
                }, [
                  vue.createElementVNode("text", { class: "action-text" }, "解除拉黑")
                ], 8, ["onClick"])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部提示 "),
      vue.createElementVNode("view", { class: "bottom-tip" }, [
        vue.createElementVNode("text", { class: "tip-text" }, "拉黑的用户将无法与你联系，也无法看到你的动态")
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsBlockedUsers = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/blocked-users.vue"]]);
  const _sfc_main$y = {
    name: "CustomerServicePage",
    data() {
      return {
        activeTab: "orders",
        questions: [
          "账号处罚常见问题",
          "为什么封禁账号不能注销",
          "举报相关常见问题",
          "账号被处罚了我该怎么办?",
          "账号实名相关问题"
        ]
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      switchTab(tab) {
        this.activeTab = tab;
      },
      goToService(serviceType) {
        uni.showToast({
          title: `进入${serviceType}服务`,
          icon: "none"
        });
      },
      goToQuestion(question) {
        uni.showToast({
          title: `查看问题：${question}`,
          icon: "none"
        });
      },
      callCustomerService() {
        uni.showModal({
          title: "客服电话",
          content: "400-123-4567",
          confirmText: "拨打",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "正在拨打客服电话",
                icon: "none"
              });
            }
          }
        });
      },
      initiateNewService() {
        uni.showToast({
          title: "发起新服务",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "customer-service-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("view", {
          class: "back-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("view", { class: "back-arrow" })
        ]),
        vue.createElementVNode("view", { class: "header-content" }, [
          vue.createElementVNode("text", { class: "title" }, "Afriends客服中心"),
          vue.createElementVNode("text", { class: "subtitle" }, "7x24 守护您的Afriends体验")
        ]),
        vue.createElementVNode("view", { class: "mascot" }, [
          vue.createElementVNode("view", { class: "cat-character" }, [
            vue.createElementVNode("view", { class: "cat-face" }, [
              vue.createElementVNode("view", { class: "cat-eye left-eye" }),
              vue.createElementVNode("view", { class: "cat-eye right-eye" }),
              vue.createElementVNode("view", { class: "cat-mouth" })
            ]),
            vue.createElementVNode("view", { class: "cat-body" }, [
              vue.createElementVNode("view", { class: "logo-symbol" }, "A")
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 服务分类网格 "),
        vue.createElementVNode("view", { class: "service-grid" }, [
          vue.createElementVNode("view", { class: "grid-row" }, [
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[1] || (_cache[1] = ($event) => $options.goToService("appeal"))
            }, [
              vue.createElementVNode("view", { class: "service-icon appeal-icon" }, [
                vue.createElementVNode("view", { class: "wave-line" }),
                vue.createElementVNode("view", { class: "arrow-up" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "处罚申诉")
            ]),
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[2] || (_cache[2] = ($event) => $options.goToService("report"))
            }, [
              vue.createElementVNode("view", { class: "service-icon report-icon" }, [
                vue.createElementVNode("view", { class: "exclamation-mark" }),
                vue.createElementVNode("view", { class: "person-silhouette" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "举报中心")
            ]),
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[3] || (_cache[3] = ($event) => $options.goToService("security"))
            }, [
              vue.createElementVNode("view", { class: "service-icon security-icon" }, [
                vue.createElementVNode("view", { class: "shield" }),
                vue.createElementVNode("view", { class: "checkmark" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "安全中心")
            ])
          ]),
          vue.createElementVNode("view", { class: "grid-row" }, [
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[4] || (_cache[4] = ($event) => $options.goToService("verification"))
            }, [
              vue.createElementVNode("view", { class: "service-icon verification-icon" }, [
                vue.createElementVNode("view", { class: "lightning" }),
                vue.createElementVNode("view", { class: "speech-bubble" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "验证助手")
            ]),
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[5] || (_cache[5] = ($event) => $options.goToService("shop"))
            }, [
              vue.createElementVNode("view", { class: "service-icon shop-icon" }, [
                vue.createElementVNode("view", { class: "storefront" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "抖店入驻")
            ]),
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[6] || (_cache[6] = ($event) => $options.goToService("selling"))
            }, [
              vue.createElementVNode("view", { class: "service-icon selling-icon" }, [
                vue.createElementVNode("view", { class: "people-group" }),
                vue.createElementVNode("view", { class: "shopping-bag" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "我要带货")
            ])
          ]),
          vue.createElementVNode("view", { class: "grid-row" }, [
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[7] || (_cache[7] = ($event) => $options.goToService("account-recovery"))
            }, [
              vue.createElementVNode("view", { class: "service-icon recovery-icon" }, [
                vue.createElementVNode("view", { class: "star" }),
                vue.createElementVNode("view", { class: "person-silhouette" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "账号找回")
            ]),
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[8] || (_cache[8] = ($event) => $options.goToService("account-security"))
            }, [
              vue.createElementVNode("view", { class: "service-icon account-security-icon" }, [
                vue.createElementVNode("view", { class: "shield-100" }),
                vue.createElementVNode("text", { class: "hundred" }, "100")
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "账号安全")
            ]),
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[9] || (_cache[9] = ($event) => $options.goToService("enterprise"))
            }, [
              vue.createElementVNode("view", { class: "service-icon enterprise-icon" }, [
                vue.createElementVNode("view", { class: "hexagon" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "企业认证")
            ])
          ]),
          vue.createElementVNode("view", { class: "grid-row" }, [
            vue.createElementVNode("view", {
              class: "service-item",
              onClick: _cache[10] || (_cache[10] = ($event) => $options.goToService("billing"))
            }, [
              vue.createElementVNode("view", { class: "service-icon billing-icon" }, [
                vue.createElementVNode("view", { class: "currency-symbol" }, "¥"),
                vue.createElementVNode("view", { class: "document" })
              ]),
              vue.createElementVNode("text", { class: "service-label" }, "月付查账")
            ]),
            vue.createElementVNode("view", { class: "service-item" }),
            vue.createElementVNode("view", { class: "service-item" })
          ])
        ]),
        vue.createCommentVNode(" 分页指示器 "),
        vue.createElementVNode("view", { class: "pagination-dots" }, [
          vue.createElementVNode("view", { class: "dot active" }),
          vue.createElementVNode("view", { class: "dot" })
        ]),
        vue.createCommentVNode(" 订单/投稿标签页 "),
        vue.createElementVNode("view", { class: "tabs-section" }, [
          vue.createElementVNode("view", { class: "tabs-header" }, [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["tab", { active: $data.activeTab === "orders" }]),
                onClick: _cache[11] || (_cache[11] = ($event) => $options.switchTab("orders"))
              },
              [
                vue.createElementVNode("text", { class: "tab-text" }, "订单")
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["tab", { active: $data.activeTab === "submissions" }]),
                onClick: _cache[12] || (_cache[12] = ($event) => $options.switchTab("submissions"))
              },
              [
                vue.createElementVNode("text", { class: "tab-text" }, "投稿")
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode("view", { class: "view-all" }, [
              vue.createElementVNode("text", { class: "view-all-text" }, "查看全部 >")
            ])
          ]),
          vue.createElementVNode("view", { class: "tab-content" }, [
            vue.createElementVNode("view", { class: "content-scroll" }, [
              vue.createElementVNode("view", { class: "content-item" }, [
                vue.createElementVNode("view", { class: "item-image" }, [
                  vue.createElementVNode("view", { class: "food-image" }, [
                    vue.createElementVNode("view", { class: "soup-bowl" }),
                    vue.createElementVNode("view", { class: "ingredients" })
                  ])
                ]),
                vue.createElementVNode("view", { class: "item-info" }, [
                  vue.createElementVNode("text", { class: "item-title" }, "【逃离工位】单人快..."),
                  vue.createElementVNode("text", { class: "item-description" }, "含锅底小特色瓶子饭"),
                  vue.createElementVNode("text", { class: "item-price" }, "¥34.9")
                ]),
                vue.createElementVNode("view", { class: "consult-button" }, [
                  vue.createElementVNode("text", { class: "consult-text" }, "咨询")
                ])
              ]),
              vue.createElementVNode("view", { class: "content-item" }, [
                vue.createElementVNode("view", { class: "item-image" }, [
                  vue.createElementVNode("view", { class: "choice-image" }, [
                    vue.createElementVNode("view", { class: "cylinder-1" }),
                    vue.createElementVNode("view", { class: "cylinder-2" })
                  ])
                ]),
                vue.createElementVNode("view", { class: "item-info" }, [
                  vue.createElementVNode("text", { class: "item-title" }, "2选1"),
                  vue.createElementVNode("text", { class: "item-description" }, "选择您喜欢的商品"),
                  vue.createElementVNode("text", { class: "item-price" }, "¥29.9")
                ]),
                vue.createElementVNode("view", { class: "consult-button" }, [
                  vue.createElementVNode("text", { class: "consult-text" }, "咨询")
                ])
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 我的服务 "),
        vue.createElementVNode("view", { class: "my-services-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "我的服务"),
            vue.createElementVNode("view", { class: "arrow-icon" }, [
              vue.createElementVNode("view", { class: "arrow-right-large" })
            ])
          ])
        ]),
        vue.createCommentVNode(" 常见问题 "),
        vue.createElementVNode("view", { class: "common-questions-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "常见问题"),
            vue.createElementVNode("view", { class: "view-more" }, [
              vue.createElementVNode("text", { class: "view-more-text" }, "查看更多 >")
            ])
          ]),
          vue.createElementVNode("view", { class: "questions-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.questions, (question, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "question-item",
                  key: index,
                  onClick: ($event) => $options.goToQuestion(question)
                }, [
                  vue.createElementVNode(
                    "text",
                    {
                      class: vue.normalizeClass(["question-number", { active: index < 3 }])
                    },
                    vue.toDisplayString(index + 1),
                    3
                    /* TEXT, CLASS */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "question-text" },
                    vue.toDisplayString(question),
                    1
                    /* TEXT */
                  )
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部操作栏 "),
      vue.createElementVNode("view", { class: "bottom-action-bar" }, [
        vue.createElementVNode("view", {
          class: "phone-button",
          onClick: _cache[13] || (_cache[13] = (...args) => $options.callCustomerService && $options.callCustomerService(...args))
        }, [
          vue.createElementVNode("view", { class: "phone-icon" }),
          vue.createElementVNode("text", { class: "button-text" }, "客服电话")
        ]),
        vue.createElementVNode("view", {
          class: "new-service-button",
          onClick: _cache[14] || (_cache[14] = (...args) => $options.initiateNewService && $options.initiateNewService(...args))
        }, [
          vue.createElementVNode("view", { class: "speech-bubble-icon" }, [
            vue.createElementVNode("view", { class: "three-dots" })
          ]),
          vue.createElementVNode("text", { class: "button-text" }, "发起新服务")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsCustomerService = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/customer-service.vue"]]);
  const _sfc_main$x = {
    name: "TermsOfServicePage",
    methods: {
      goBack() {
        uni.navigateBack();
      }
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "terms-of-service-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">服务条款</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 介绍部分 "),
        vue.createElementVNode("view", { class: "intro-section" }, [
          vue.createElementVNode("text", { class: "intro-title" }, "交友软件服务条款"),
          vue.createElementVNode("text", { class: "intro-text" }, "欢迎使用本软件！本条款是您与我们之间就本软件的使用所达成的协议。请您在注册、登录或使用本软件前，仔细阅读并充分理解本条款的全部内容。如果您不同意本条款的任何内容，请不要注册、登录或使用本软件。您注册、登录或使用本软件的行为，即视为您已同意受本条款约束。")
        ]),
        vue.createCommentVNode(" 条款内容 "),
        vue.createElementVNode("view", { class: "terms-content" }, [
          vue.createCommentVNode(" 第一条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "I."),
            vue.createElementVNode("text", { class: "term-title" }, "账号注册与管理"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "注册资格"),
                vue.createElementVNode("text", { class: "item-content" }, "用户必须年满18周岁，具有完全民事行为能力。我们保留根据法律法规和实际情况调整注册资格的权利。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "注册信息"),
                vue.createElementVNode("text", { class: "item-content" }, "用户必须提供真实、准确、完整的个人信息（如手机号、昵称、性别、年龄、头像等），并保持信息更新。用户对提供虚假、不准确、不完整或过时信息造成的后果承担责任。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "3."),
                vue.createElementVNode("text", { class: "item-title" }, "账号安全"),
                vue.createElementVNode("text", { class: "item-content" }, "用户必须妥善保管自己的账号和密码，不得转让、出租、出售或分享账号。如发现账号被非法使用或存在安全风险，应立即通知我们。因用户保管不当造成的损失，我们不承担责任。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "4."),
                vue.createElementVNode("text", { class: "item-title" }, "账号注销"),
                vue.createElementVNode("text", { class: "item-content" }, "用户有权随时申请注销账号。注销后，个人信息将按照隐私政策进行处理，用户将无法使用相关服务。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第二条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "II."),
            vue.createElementVNode("text", { class: "term-title" }, "服务内容与使用规则"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "服务内容"),
                vue.createElementVNode("text", { class: "item-content" }, "本软件提供交友相关服务，包括但不限于用户匹配、聊天沟通、动态分享、活动组织等。具体内容以本软件实际提供为准。我们保留根据业务发展和用户需求调整、更新或终止服务内容的权利，并会适当通知。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "使用规则"),
                vue.createElementVNode("text", { class: "item-content" }, "用户在使用本软件时，必须遵守国家法律法规、社会道德和公共秩序。禁止行为包括：发布违法、违规、虚假、欺诈、淫秽、色情、暴力、恐怖、歧视、侮辱或诽谤等有害信息；侵犯他人知识产权、隐私权、名誉权或其他合法权益；利用本软件进行诈骗、传销、赌博或其他违法犯罪活动；干扰或破坏本软件正常运行，或恶意攻击、修改、破解本软件；违反本软件发布的其他规则和规定。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "3."),
                vue.createElementVNode("text", { class: "item-title" }, "信息发布与传播"),
                vue.createElementVNode("text", { class: "item-content" }, "用户对本软件上发布的内容（包括但不限于文字、图片、视频）承担责任，确保内容合法、真实、准确，不侵犯他人权利。我们有权对发布的内容进行审核。如内容违规，我们可以直接删除、屏蔽或限制传播，无需通知，并可能根据情节轻重对账号进行警告、暂停或永久封禁。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "4."),
                vue.createElementVNode("text", { class: "item-title" }, "付费服务"),
                vue.createElementVNode("text", { class: "item-content" }, "部分服务为付费服务。用户可根据需要选择购买。购买前，用户必须仔细阅读服务说明和价格信息。付费服务的具体内容、价格和有效期以本软件相关页面为准。购买后，付费服务一般不予退款，除非法律法规另有规定或双方另有约定。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第三条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "III."),
            vue.createElementVNode("text", { class: "term-title" }, "隐私保护"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "信息收集"),
                vue.createElementVNode("text", { class: "item-content" }, "我们按照隐私政策收集、使用、存储和保护用户的个人信息。在注册和使用过程中，我们可能收集基本信息（如姓名、性别、年龄）、联系信息、位置信息和行为数据，以提供更好的服务和个性化体验。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "信息使用与共享"),
                vue.createElementVNode("text", { class: "item-content" }, "我们仅在本条款和隐私政策规定的范围内使用用户的个人信息，不会向无关第三方分享、转让或披露个人信息，除非在以下情况下：获得用户明确同意；法律法规要求或主管机关指示；保护我们或其他用户的合法权益；与关联公司、合作伙伴等共享以提供软件服务所必需。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "3."),
                vue.createElementVNode("text", { class: "item-title" }, "信息安全"),
                vue.createElementVNode("text", { class: "item-content" }, "我们将采取合理的技术和管理措施保护用户个人信息安全，防止信息泄露、损坏或丢失。如发生个人信息安全事件，我们将及时通知用户并按照相关法律法规处理。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第四条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "IV."),
            vue.createElementVNode("text", { class: "term-title" }, "知识产权"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "软件与内容"),
                vue.createElementVNode("text", { class: "item-content" }, "本软件及其内容（如文字、图片、音频、视频、图标）的所有知识产权均属于我们或相关权利人。用户仅有权在本条款允许的范围内使用本软件和相关内容。未经我们或相关权利人书面同意，用户不得复制、传播、修改、改编、出租、出售或以其他方式使用本软件和相关内容。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "用户内容授权"),
                vue.createElementVNode("text", { class: "item-content" }, "对于用户在本软件上发布的内容，用户授予我们全球性、不可撤销、永久性、免费且可再许可的权利，包括使用、复制、修改、改编、发布、翻译、传播、展示、表演和创作衍生作品等，用于本软件的运营、推广和其他合法目的。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第五条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "V."),
            vue.createElementVNode("text", { class: "term-title" }, "责任限制与免责声明"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "责任限制"),
                vue.createElementVNode("text", { class: "item-content" }, "在法律法规允许的范围内，我们对本软件服务或相关事项给用户造成的任何直接、间接、偶然、特殊、惩罚性或后果性损失（包括但不限于利润损失、数据丢失、业务中断）不承担责任，无论原因如何（包括但不限于合同、侵权、过失），除非损失由我们的故意行为或重大过失造成。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "免责声明"),
                vue.createElementVNode("text", { class: "item-content" }, "本软件服务可能受到各种因素影响，包括但不限于网络故障、服务器故障、通信故障、黑客攻击、计算机病毒、法律法规变化，导致服务中断、延迟、错误或不可用。我们对此不承担责任，但会努力减少此类情况的发生并及时通知。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第六条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "VI."),
            vue.createElementVNode("text", { class: "term-title" }, "协议变更与终止"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "协议变更"),
                vue.createElementVNode("text", { class: "item-content" }, "我们有权根据业务发展、法律法规变化等修改或更新本条款。修改后的条款将在本软件上发布，自发布之日起生效。如用户继续使用本软件服务，即视为用户已接受变更后的条款。如用户不同意变更后的条款，应停止使用本软件服务。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "协议终止"),
                vue.createElementVNode("text", { class: "item-content" }, "在以下情况下，我们有权直接终止本条款和用户对本软件服务的使用，无需通知：用户违反本条款任何规定；法律法规要求或主管机关指示；本软件因业务调整、技术升级或其他原因需要停止运营。协议终止后，我们将按照相关规定处理用户个人信息，用户应立即停止使用本软件服务。如用户违反本条款给造成损失，用户应承担赔偿责任。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第七条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "VII."),
            vue.createElementVNode("text", { class: "term-title" }, "争议解决"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "适用法律"),
                vue.createElementVNode("text", { class: "item-content" }, "本条款的签署、履行、解释和争议解决均适用中华人民共和国法律（为本条款之目的，不包括香港特别行政区、澳门特别行政区和台湾地区的法律）。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "争议解决方式"),
                vue.createElementVNode("text", { class: "item-content" }, "如用户与我们之间就本条款或本软件服务发生争议，双方应首先通过友好协商解决。如协商不成，任何一方均有权向有管辖权的人民法院提起诉讼。")
              ])
            ])
          ]),
          vue.createCommentVNode(" 第八条 "),
          vue.createElementVNode("view", { class: "term-section" }, [
            vue.createElementVNode("text", { class: "term-number" }, "VIII."),
            vue.createElementVNode("text", { class: "term-title" }, "其他条款"),
            vue.createElementVNode("view", { class: "term-items" }, [
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "1."),
                vue.createElementVNode("text", { class: "item-title" }, "条款完整性"),
                vue.createElementVNode("text", { class: "item-content" }, "本条款构成用户与我们之间关于使用本软件服务的完整协议，取代之前关于本软件服务的所有口头或书面协议。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "2."),
                vue.createElementVNode("text", { class: "item-title" }, "条款可分割性"),
                vue.createElementVNode("text", { class: "item-content" }, "如本条款任何规定被视为无效或不可执行，不影响其他规定的有效性和可执行性，此类无效或不可执行的规定应被视为可分割的，不影响本条款其他部分的效力。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "3."),
                vue.createElementVNode("text", { class: "item-title" }, "弃权"),
                vue.createElementVNode("text", { class: "item-content" }, "我们未行使或延迟行使本条款下的任何权利或救济，不应被视为放弃该权利或救济；任何单一行使权利或救济的行为不影响我们行使其他权利或救济。")
              ]),
              vue.createElementVNode("view", { class: "term-item" }, [
                vue.createElementVNode("text", { class: "item-number" }, "4."),
                vue.createElementVNode("text", { class: "item-title" }, "通知"),
                vue.createElementVNode("text", { class: "item-content" }, "我们向用户发出的通知可通过应用内消息、短信、邮件或其他合理方式进行。通知自发送之日起视为送达。如用户因自身原因无法接收通知，不影响通知的效力。")
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 结尾说明 "),
        vue.createElementVNode("view", { class: "closing-section" }, [
          vue.createElementVNode("text", { class: "closing-text" }, "请您再次仔细阅读本条款，确保您已充分理解并同意其全部内容。如有任何疑问或建议，请随时联系我们的客服人员。")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsTermsOfService = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__scopeId", "data-v-241546b2"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/terms-of-service.vue"]]);
  const _sfc_main$w = {
    data() {
      return {};
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      switchToAccount(accountId) {
        uni.showModal({
          title: "切换账号",
          content: "确定要切换到该账号吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "账号切换成功",
                icon: "success"
              });
              setTimeout(() => {
                uni.redirectTo({
                  url: "/pages/feed/content-feed"
                });
              }, 1500);
            }
          }
        });
      },
      addNewAccount() {
        uni.navigateTo({
          url: "/pages/login/login-replica"
        });
      },
      logoutCurrent() {
        uni.showModal({
          title: "确认退出",
          content: "确定要退出当前账号吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "已退出当前账号",
                icon: "success"
              });
              setTimeout(() => {
                uni.redirectTo({
                  url: "/pages/login/login-replica"
                });
              }, 1500);
            }
          }
        });
      }
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view>\n			<text class="nav-title">更换账号</text>\n		</view> '),
      vue.createCommentVNode(" 当前账号 "),
      vue.createElementVNode("view", { class: "current-account" }, [
        vue.createElementVNode("view", { class: "account-header" }, [
          vue.createElementVNode("text", { class: "header-text" }, "当前账号")
        ]),
        vue.createElementVNode("view", { class: "account-item current" }, [
          vue.createElementVNode("view", { class: "account-left" }, [
            vue.createElementVNode("view", { class: "account-avatar" }, "👩"),
            vue.createElementVNode("view", { class: "account-info" }, [
              vue.createElementVNode("text", { class: "account-name" }, "当前用户"),
              vue.createElementVNode("text", { class: "account-phone" }, "138****8888")
            ])
          ]),
          vue.createElementVNode("view", { class: "current-badge" }, "当前")
        ])
      ]),
      vue.createCommentVNode(" 其他账号 "),
      vue.createElementVNode("view", { class: "other-accounts" }, [
        vue.createElementVNode("view", { class: "account-header" }, [
          vue.createElementVNode("text", { class: "header-text" }, "其他账号")
        ]),
        vue.createElementVNode("view", {
          class: "account-item",
          onClick: _cache[0] || (_cache[0] = ($event) => $options.switchToAccount("account1"))
        }, [
          vue.createElementVNode("view", { class: "account-left" }, [
            vue.createElementVNode("view", { class: "account-avatar" }, "👨"),
            vue.createElementVNode("view", { class: "account-info" }, [
              vue.createElementVNode("text", { class: "account-name" }, "张三"),
              vue.createElementVNode("text", { class: "account-phone" }, "139****9999")
            ])
          ]),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ]),
        vue.createElementVNode("view", {
          class: "account-item",
          onClick: _cache[1] || (_cache[1] = ($event) => $options.switchToAccount("account2"))
        }, [
          vue.createElementVNode("view", { class: "account-left" }, [
            vue.createElementVNode("view", { class: "account-avatar" }, "👧"),
            vue.createElementVNode("view", { class: "account-info" }, [
              vue.createElementVNode("text", { class: "account-name" }, "李四"),
              vue.createElementVNode("text", { class: "account-phone" }, "137****7777")
            ])
          ]),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ])
      ]),
      vue.createCommentVNode(" 添加账号 "),
      vue.createElementVNode("view", { class: "add-account" }, [
        vue.createElementVNode("view", {
          class: "account-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.addNewAccount && $options.addNewAccount(...args))
        }, [
          vue.createElementVNode("view", { class: "account-left" }, [
            vue.createElementVNode("view", { class: "account-avatar add-icon" }, "+"),
            vue.createElementVNode("view", { class: "account-info" }, [
              vue.createElementVNode("text", { class: "account-name" }, "添加账号"),
              vue.createElementVNode("text", { class: "account-phone" }, "使用其他账号登录")
            ])
          ]),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ])
      ]),
      vue.createCommentVNode(" 底部操作按钮 "),
      vue.createElementVNode("view", { class: "bottom-actions" }, [
        vue.createElementVNode("view", {
          class: "action-button logout",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.logoutCurrent && $options.logoutCurrent(...args))
        }, [
          vue.createElementVNode("text", { class: "action-text" }, "退出当前账号")
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsSwitchAccount = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/switch-account.vue"]]);
  const _sfc_main$v = {
    data() {
      return {
        selectedMode: "normal"
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      selectMode(mode) {
        this.selectedMode = mode;
        uni.showToast({
          title: `已选择${this.getModeName(mode)}`,
          icon: "success"
        });
        setTimeout(() => {
          uni.navigateBack();
        }, 1500);
      },
      getModeName(mode) {
        const modeNames = {
          "normal": "普通模式",
          "concise": "简洁模式",
          "minor": "未成年人模式",
          "care": "关怀模式"
        };
        return modeNames[mode] || "未知模式";
      }
    }
  };
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createElementVNode("view", { class: "nav-bar" }, [
        vue.createCommentVNode(' <view class="back-button" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view>\n			<text class="nav-title">模式选择</text> ')
      ]),
      vue.createCommentVNode(" 模式选择内容 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 分组标题 "),
        vue.createElementVNode("view", { class: "section-header" }, "模式切换"),
        vue.createCommentVNode(" 模式选项列表 "),
        vue.createElementVNode("view", { class: "mode-list" }, [
          vue.createElementVNode("view", {
            class: "mode-item",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.selectMode("normal"))
          }, [
            vue.createElementVNode("text", { class: "mode-text" }, "普通模式")
          ]),
          vue.createElementVNode("view", {
            class: "mode-item",
            onClick: _cache[1] || (_cache[1] = ($event) => $options.selectMode("concise"))
          }, [
            vue.createElementVNode("text", { class: "mode-text" }, "简洁模式")
          ]),
          vue.createElementVNode("view", {
            class: "mode-item",
            onClick: _cache[2] || (_cache[2] = ($event) => $options.selectMode("minor"))
          }, [
            vue.createElementVNode("text", { class: "mode-text" }, "未成年人模式")
          ]),
          vue.createElementVNode("view", {
            class: "mode-item",
            onClick: _cache[3] || (_cache[3] = ($event) => $options.selectMode("care"))
          }, [
            vue.createElementVNode("text", { class: "mode-text" }, "关怀模式")
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsModeSelection = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/mode-selection.vue"]]);
  const _sfc_main$u = {
    name: "NotificationSettings",
    data() {
      return {
        notificationSettings: {
          chatNotification: true,
          likeAndFavorite: false,
          comment: false,
          mention: false,
          contentRecommend: false,
          userRecommend: false
        }
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      goToNotificationDisplay() {
        uni.navigateTo({
          url: "/pages/settings/notification-display"
        });
      },
      toggleSetting(key, event) {
        this.notificationSettings[key] = event.detail.value;
        let settingName = "";
        switch (key) {
          case "chatNotification":
            settingName = "聊天消息";
            break;
          case "likeAndFavorite":
            settingName = "赞和收藏";
            break;
          case "comment":
            settingName = "评论";
            break;
          case "mention":
            settingName = "@";
            break;
          case "contentRecommend":
            settingName = "内容推荐";
            break;
          case "userRecommend":
            settingName = "用户推荐";
            break;
        }
        uni.showToast({
          title: `${settingName}通知已${event.detail.value ? "开启" : "关闭"}`,
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "notification-settings-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="status-time">9:41</text>\n			<view class="status-right">\n				<text class="status-signal">📶</text>\n				<text class="status-wifi">📶</text>\n				<text class="status-battery">🔋</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="nav-left" @click="goBack">\n				<text class="back-arrow">←</text>\n			</view>\n			<view class="nav-center">\n				<text class="nav-title">通知设置</text>\n			</view>\n			<view class="nav-right"></view>\n		</view> '),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 聊天消息通知分组 "),
        vue.createElementVNode("view", { class: "section-group" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "聊天消息")
          ]),
          vue.createElementVNode("view", { class: "settings-list" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-left" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "聊天消息通知")
              ]),
              vue.createElementVNode("view", { class: "setting-right" }, [
                vue.createElementVNode("switch", {
                  class: "setting-switch",
                  checked: $data.notificationSettings.chatNotification,
                  onChange: _cache[0] || (_cache[0] = ($event) => $options.toggleSetting("chatNotification", $event))
                }, null, 40, ["checked"])
              ])
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.goToNotificationDisplay && $options.goToNotificationDisplay(...args))
            }, [
              vue.createElementVNode("text", { class: "setting-label" }, "通知显示内容"),
              vue.createElementVNode("text", { class: "setting-arrow" }, "›")
            ])
          ])
        ]),
        vue.createCommentVNode(" 互动通知分组 "),
        vue.createElementVNode("view", { class: "section-group" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "互动通知")
          ]),
          vue.createElementVNode("view", { class: "settings-list" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-left" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "赞和收藏")
              ]),
              vue.createElementVNode("view", { class: "setting-right" }, [
                vue.createElementVNode("switch", {
                  class: "setting-switch",
                  checked: $data.notificationSettings.likeAndFavorite,
                  onChange: _cache[2] || (_cache[2] = ($event) => $options.toggleSetting("likeAndFavorite", $event))
                }, null, 40, ["checked"])
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-left" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "评论")
              ]),
              vue.createElementVNode("view", { class: "setting-right" }, [
                vue.createElementVNode("switch", {
                  class: "setting-switch",
                  checked: $data.notificationSettings.comment,
                  onChange: _cache[3] || (_cache[3] = ($event) => $options.toggleSetting("comment", $event))
                }, null, 40, ["checked"])
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-left" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "@")
              ]),
              vue.createElementVNode("view", { class: "setting-right" }, [
                vue.createElementVNode("switch", {
                  class: "setting-switch",
                  checked: $data.notificationSettings.mention,
                  onChange: _cache[4] || (_cache[4] = ($event) => $options.toggleSetting("mention", $event))
                }, null, 40, ["checked"])
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 推荐通知分组 "),
        vue.createElementVNode("view", { class: "section-group" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "推荐通知")
          ]),
          vue.createElementVNode("view", { class: "settings-list" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-left" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "内容推荐")
              ]),
              vue.createElementVNode("view", { class: "setting-right" }, [
                vue.createElementVNode("switch", {
                  class: "setting-switch",
                  checked: $data.notificationSettings.contentRecommend,
                  onChange: _cache[5] || (_cache[5] = ($event) => $options.toggleSetting("contentRecommend", $event))
                }, null, 40, ["checked"])
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-left" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "用户推荐")
              ]),
              vue.createElementVNode("view", { class: "setting-right" }, [
                vue.createElementVNode("switch", {
                  class: "setting-switch",
                  checked: $data.notificationSettings.userRecommend,
                  onChange: _cache[6] || (_cache[6] = ($event) => $options.toggleSetting("userRecommend", $event))
                }, null, 40, ["checked"])
              ])
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesSettingsNotificationSettings = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/notification-settings.vue"]]);
  const _sfc_main$t = {
    name: "PrivacySettings",
    data() {
      return {
        settings: {
          oneClickProtection: false,
          showMyStatus: false,
          allowFriendsComment: false,
          allowFriendsAt: false,
          publicCollections: false,
          friendVerification: false,
          recommendFriends: false
        }
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      toggleSetting(key) {
        this.settings[key] = !this.settings[key];
        uni.showToast({
          title: "设置已保存",
          icon: "success"
        });
      },
      goToSystemPermissions() {
        uni.navigateTo({
          url: "/pages/settings/system-permissions"
        });
      },
      goToAddWays() {
        uni.navigateTo({
          url: "/pages/settings/add-ways"
        });
      },
      goToBlacklist() {
        uni.navigateTo({
          url: "/pages/settings/blocked-users"
        });
      }
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "privacy-settings" }, [
      vue.createCommentVNode(" 顶部导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n      <view class="nav-left" @click="goBack">\n        <text class="back-arrow">‹</text>\n      </view>\n      <view class="nav-title">隐私设置</view>\n      <view class="nav-right"></view>\n    </view> '),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("scroll-view", {
        class: "content",
        "scroll-y": ""
      }, [
        vue.createCommentVNode(" 互动设置模块 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "互动")
          ]),
          vue.createElementVNode("view", { class: "section-content" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "一键防护"),
                vue.createElementVNode("text", { class: "setting-desc" }, "开启后,7天内将不接收陌生人的好友申请/评论/分享")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[0] || (_cache[0] = ($event) => $options.toggleSetting("oneClickProtection"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.oneClickProtection }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.oneClickProtection }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createCommentVNode(` <view class="setting-item">
            <view class="setting-info">
              <text class="setting-label">展示我的状态</text>
            </view>
            <view class="toggle-switch" @click="toggleSetting('showMyStatus')">
              <view class="toggle-track" :class="{ active: settings.showMyStatus }">
                <view class="toggle-thumb" :class="{ active: settings.showMyStatus }"></view>
              </view>
            </view>
          </view> `),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "只允许我的好友评论我")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[1] || (_cache[1] = ($event) => $options.toggleSetting("allowFriendsComment"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.allowFriendsComment }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.allowFriendsComment }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "只允许我的好友@我")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[2] || (_cache[2] = ($event) => $options.toggleSetting("allowFriendsAt"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.allowFriendsAt }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.allowFriendsAt }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "公开我的收藏")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[3] || (_cache[3] = ($event) => $options.toggleSetting("publicCollections"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.publicCollections }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.publicCollections }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 朋友设置模块 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "朋友")
          ]),
          vue.createElementVNode("view", { class: "section-content" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "加我为好友时需要验证")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[4] || (_cache[4] = ($event) => $options.toggleSetting("friendVerification"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.friendVerification }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.friendVerification }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.goToAddWays && $options.goToAddWays(...args))
            }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "添加我的方式")
              ]),
              vue.createElementVNode("view", { class: "arrow-right" }, [
                vue.createElementVNode("text", { class: "arrow-icon" }, "›")
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "给我推荐可能认识的人")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[6] || (_cache[6] = ($event) => $options.toggleSetting("recommendFriends"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.recommendFriends }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.recommendFriends }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.goToBlacklist && $options.goToBlacklist(...args))
            }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "黑名单用户")
              ]),
              vue.createElementVNode("view", { class: "arrow-right" }, [
                vue.createElementVNode("text", { class: "arrow-icon" }, "›")
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 权限设置模块 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "权限")
          ]),
          vue.createElementVNode("view", { class: "section-content" }, [
            vue.createElementVNode("view", {
              class: "setting-item",
              onClick: _cache[8] || (_cache[8] = (...args) => $options.goToSystemPermissions && $options.goToSystemPermissions(...args))
            }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "系统权限管理"),
                vue.createElementVNode("text", { class: "setting-desc" }, "APP内使用的所有系统权限")
              ]),
              vue.createElementVNode("view", { class: "arrow-right" }, [
                vue.createElementVNode("text", { class: "arrow-icon" }, "›")
              ])
            ])
          ])
        ])
      ])
    ]);
  }
  const PagesSettingsPrivacySettings = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__scopeId", "data-v-344a8419"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/privacy-settings.vue"]]);
  const _sfc_main$s = {
    name: "AccountSecurityPage",
    data() {
      return {};
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToChatList() {
        uni.navigateTo({
          url: "/pages/chat/chat-list"
        });
      },
      goToAIChat() {
        uni.navigateTo({
          url: "/pages/chat/chat"
        });
      },
      goToFriendList() {
        uni.navigateTo({
          url: "/pages/chat/friend-list"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      },
      goToPhoneNumber() {
        uni.showToast({
          title: "手机号设置",
          icon: "none"
        });
      },
      goToPassword() {
        uni.showToast({
          title: "密码设置",
          icon: "none"
        });
      },
      goToThirdPartyBinding() {
        uni.navigateTo({
          url: "/pages/settings/third-party-binding"
        });
      },
      goToRealNameVerification() {
        uni.navigateTo({
          url: "/pages/verification/real-name-verification"
        });
      },
      goToOfficialCertification() {
        uni.navigateTo({
          url: "/pages/verification/official-certification"
        });
      },
      goToDeviceManagement() {
        uni.navigateTo({
          url: "/pages/settings/device-management"
        });
      },
      goToAccountManagement() {
        uni.navigateTo({
          url: "/pages/settings/switch-account"
        });
      },
      goToAccountDeletion() {
        uni.showToast({
          title: "注销账号",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "account-security-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">账号与安全</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 安全设置列表 "),
      vue.createElementVNode("view", { class: "security-list" }, [
        vue.createCommentVNode(" 第一组：基础信息 "),
        vue.createElementVNode("view", { class: "list-group" }, [
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.goToPhoneNumber && $options.goToPhoneNumber(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "手机号"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("text", { class: "item-value" }, "+86133****8358"),
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ]),
          vue.createElementVNode("view", { class: "divider" }),
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.goToPassword && $options.goToPassword(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "登录密码"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("text", { class: "item-value" }, "未设置"),
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ])
        ]),
        vue.createCommentVNode(" 第二组：第三方账号绑定 "),
        vue.createElementVNode("view", { class: "list-group" }, [
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.goToThirdPartyBinding && $options.goToThirdPartyBinding(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "第三方账号绑定"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ])
        ]),
        vue.createCommentVNode(" 第三组：认证信息 "),
        vue.createElementVNode("view", { class: "list-group" }, [
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.goToRealNameVerification && $options.goToRealNameVerification(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "实名认证"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ]),
          vue.createElementVNode("view", { class: "divider" }),
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.goToOfficialCertification && $options.goToOfficialCertification(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "官方认证"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ])
        ]),
        vue.createCommentVNode(" 第四组：账户管理 "),
        vue.createElementVNode("view", { class: "list-group" }, [
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.goToDeviceManagement && $options.goToDeviceManagement(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "登录设备管理"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ]),
          vue.createElementVNode("view", { class: "divider" }),
          vue.createCommentVNode(' <view class="list-item" @click="goToAccountManagement">\n					<text class="item-label">账号管理</text>\n					<view class="item-content">\n						<view class="arrow-icon">></view>\n					</view>\n				</view> '),
          vue.createElementVNode("view", { class: "divider" }),
          vue.createElementVNode("view", {
            class: "list-item",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.goToAccountDeletion && $options.goToAccountDeletion(...args))
          }, [
            vue.createElementVNode("text", { class: "item-label" }, "注销账号"),
            vue.createElementVNode("view", { class: "item-content" }, [
              vue.createElementVNode("view", { class: "arrow-icon" }, ">")
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部导航栏 "),
      vue.createCommentVNode(' <view class="bottom-navigation">\n			<view class="nav-item" @click="goToHome">\n				<text class="nav-text">首页</text>\n			</view>\n			<view class="nav-item" @click="goToChatList">\n				<text class="nav-text">消息</text>\n			</view>\n			<view class="nav-item" @click="goToAIChat">\n				<view class="ai-tab">\n					<text class="ai-text">AI</text>\n				</view>\n			</view>\n			<view class="nav-item" @click="goToFriendList">\n				<text class="nav-text">好友</text>\n			</view>\n			<view class="nav-avatar" @click="goToProfile">\n				<image class="avatar-small" src="" mode="aspectFill"></image>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesSettingsAccountSecurity = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/account-security.vue"]]);
  const _sfc_main$r = {
    name: "DeviceManagementPage",
    data() {
      return {
        devices: [
          {
            id: 0,
            name: "qwe",
            type: "iPhone 13",
            lastLogin: "2025-08-18 15:23",
            location: "中国浙江杭州",
            isCurrent: true
          },
          {
            id: 1,
            name: "PEQM00",
            type: "PEQM00",
            lastLogin: "2025-08-21 08:34",
            location: "中国天津天津",
            isCurrent: false
          },
          {
            id: 2,
            name: "王柳清",
            type: "Windows",
            lastLogin: "2024-11-19 08:03",
            location: "中国山西太原",
            isCurrent: false
          },
          {
            id: 3,
            name: "iPad7,5",
            type: "iPad",
            lastLogin: "2025-05-09 22:53",
            location: "中国吉林长春",
            isCurrent: false
          },
          {
            id: 4,
            name: "王柳清",
            type: "Windows",
            lastLogin: "2025-07-13 17:23",
            location: "中国浙江",
            isCurrent: false
          }
        ]
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      showManageOptions() {
        uni.showActionSheet({
          itemList: ["批量移除设备", "导出设备列表", "设备安全设置"],
          success: (res) => {
            switch (res.tapIndex) {
              case 0:
                this.batchRemoveDevices();
                break;
              case 1:
                this.exportDeviceList();
                break;
              case 2:
                this.deviceSecuritySettings();
                break;
            }
          }
        });
      },
      showHelp() {
        uni.showModal({
          title: "帮助说明",
          content: "设备删除后，该设备再次登录时需要重新进行身份验证，包括手机验证码、密码等。这是为了保护您的账户安全。",
          showCancel: false,
          confirmText: "我知道了"
        });
      },
      removeDevice(deviceId) {
        uni.showModal({
          title: "确认移除",
          content: "确定要移除这个设备吗？移除后该设备需要重新登录。",
          success: (res) => {
            if (res.confirm) {
              this.devices = this.devices.filter((device) => device.id !== deviceId);
              uni.showToast({
                title: "设备已移除",
                icon: "success"
              });
            }
          }
        });
      },
      batchRemoveDevices() {
        uni.showModal({
          title: "批量移除",
          content: "确定要移除所有非本机设备吗？",
          success: (res) => {
            if (res.confirm) {
              this.devices = this.devices.filter((device) => device.isCurrent);
              uni.showToast({
                title: "批量移除完成",
                icon: "success"
              });
            }
          }
        });
      },
      exportDeviceList() {
        uni.showToast({
          title: "导出功能开发中",
          icon: "none"
        });
      },
      deviceSecuritySettings() {
        uni.showToast({
          title: "安全设置功能开发中",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "device-management-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">登录设备管理</text>\n			<view class="manage-button" @click="showManageOptions">\n				<text class="manage-text">管理</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 信息提示栏 "),
      vue.createElementVNode("view", { class: "info-bar" }, [
        vue.createElementVNode("text", { class: "info-text" }, "设备删除后再次登录需身份验证。"),
        vue.createElementVNode("text", {
          class: "help-link",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.showHelp && $options.showHelp(...args))
        }, "存在疑问?")
      ]),
      vue.createCommentVNode(" 设备列表 "),
      vue.createElementVNode("view", { class: "device-list" }, [
        vue.createCommentVNode(" 设备项目1 - 本机 "),
        vue.createElementVNode("view", { class: "device-item" }, [
          vue.createElementVNode("view", { class: "device-icon" }, [
            vue.createElementVNode("view", { class: "icon-phone" })
          ]),
          vue.createElementVNode("view", { class: "device-info" }, [
            vue.createElementVNode("text", { class: "device-name" }, "qwe"),
            vue.createElementVNode("text", { class: "device-type" }, "iPhone 13"),
            vue.createElementVNode("text", { class: "device-login" }, "2025-08-18 15:23 | 中国浙江杭州")
          ]),
          vue.createElementVNode("view", { class: "device-status" }, [
            vue.createElementVNode("text", { class: "status-text" }, "本机")
          ])
        ]),
        vue.createCommentVNode(" 设备项目2 "),
        vue.createElementVNode("view", { class: "device-item" }, [
          vue.createElementVNode("view", { class: "device-icon" }, [
            vue.createElementVNode("view", { class: "icon-phone" })
          ]),
          vue.createElementVNode("view", { class: "device-info" }, [
            vue.createElementVNode("text", { class: "device-name" }, "PEQM00"),
            vue.createElementVNode("text", { class: "device-type" }, "PEQM00"),
            vue.createElementVNode("text", { class: "device-login" }, "2025-08-21 08:34 | 中国天津天津")
          ]),
          vue.createElementVNode("view", { class: "device-actions" }, [
            vue.createElementVNode("view", {
              class: "action-btn",
              onClick: _cache[1] || (_cache[1] = ($event) => $options.removeDevice(1))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "移除")
            ])
          ])
        ]),
        vue.createCommentVNode(" 设备项目3 "),
        vue.createElementVNode("view", { class: "device-item" }, [
          vue.createElementVNode("view", { class: "device-icon" }, [
            vue.createElementVNode("view", { class: "icon-desktop" })
          ]),
          vue.createElementVNode("view", { class: "device-info" }, [
            vue.createElementVNode("text", { class: "device-name" }, "王柳清"),
            vue.createElementVNode("text", { class: "device-type" }, "Windows"),
            vue.createElementVNode("text", { class: "device-login" }, "2024-11-19 08:03 | 中国山西太原")
          ]),
          vue.createElementVNode("view", { class: "device-actions" }, [
            vue.createElementVNode("view", {
              class: "action-btn",
              onClick: _cache[2] || (_cache[2] = ($event) => $options.removeDevice(2))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "移除")
            ])
          ])
        ]),
        vue.createCommentVNode(" 设备项目4 "),
        vue.createElementVNode("view", { class: "device-item" }, [
          vue.createElementVNode("view", { class: "device-icon" }, [
            vue.createElementVNode("view", { class: "icon-phone" })
          ]),
          vue.createElementVNode("view", { class: "device-info" }, [
            vue.createElementVNode("text", { class: "device-name" }, "iPad7,5"),
            vue.createElementVNode("text", { class: "device-type" }, "iPad"),
            vue.createElementVNode("text", { class: "device-login" }, "2025-05-09 22:53 | 中国吉林长春")
          ]),
          vue.createElementVNode("view", { class: "device-actions" }, [
            vue.createElementVNode("view", {
              class: "action-btn",
              onClick: _cache[3] || (_cache[3] = ($event) => $options.removeDevice(3))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "移除")
            ])
          ])
        ]),
        vue.createCommentVNode(" 设备项目5 "),
        vue.createElementVNode("view", { class: "device-item" }, [
          vue.createElementVNode("view", { class: "device-icon" }, [
            vue.createElementVNode("view", { class: "icon-desktop" })
          ]),
          vue.createElementVNode("view", { class: "device-info" }, [
            vue.createElementVNode("text", { class: "device-name" }, "王柳清"),
            vue.createElementVNode("text", { class: "device-type" }, "Windows"),
            vue.createElementVNode("text", { class: "device-login" }, "2025-07-13 17:23 | 中国浙江")
          ]),
          vue.createElementVNode("view", { class: "device-actions" }, [
            vue.createElementVNode("view", {
              class: "action-btn",
              onClick: _cache[4] || (_cache[4] = ($event) => $options.removeDevice(4))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "移除")
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsDeviceManagement = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/device-management.vue"]]);
  const _sfc_main$q = {
    name: "ThirdPartyBindingPage",
    data() {
      return {
        syncFollowers: false,
        syncProfile: false
      };
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      bindWechat() {
        uni.showModal({
          title: "绑定微信",
          content: "确定要绑定微信账号吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "微信绑定功能开发中",
                icon: "none"
              });
            }
          }
        });
      },
      bindQQ() {
        uni.showModal({
          title: "绑定QQ",
          content: "确定要绑定QQ账号吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "QQ绑定功能开发中",
                icon: "none"
              });
            }
          }
        });
      },
      bindWeibo() {
        uni.showModal({
          title: "绑定微博",
          content: "确定要绑定微博账号吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "微博绑定功能开发中",
                icon: "none"
              });
            }
          }
        });
      },
      bindApple() {
        uni.showModal({
          title: "绑定Apple",
          content: "确定要绑定Apple账号吗？",
          success: (res) => {
            if (res.confirm) {
              uni.showToast({
                title: "Apple绑定功能开发中",
                icon: "none"
              });
            }
          }
        });
      },
      viewSyncDetails() {
        uni.showToast({
          title: "同步详情功能开发中",
          icon: "none"
        });
      },
      toggleSyncFollowers(e) {
        this.syncFollowers = e.detail.value;
        uni.showToast({
          title: this.syncFollowers ? "已开启粉丝同步" : "已关闭粉丝同步",
          icon: "none"
        });
      },
      toggleSyncProfile(e) {
        this.syncProfile = e.detail.value;
        uni.showToast({
          title: this.syncProfile ? "已开启资料同步" : "已关闭资料同步",
          icon: "none"
        });
      }
    }
  };
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "third-party-binding-page" }, [
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">第三方账号绑定</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 第三方登录方式 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("text", { class: "section-title" }, "第三方登录方式"),
          vue.createElementVNode("view", { class: "binding-list" }, [
            vue.createElementVNode("view", {
              class: "binding-item",
              onClick: _cache[0] || (_cache[0] = (...args) => $options.bindWechat && $options.bindWechat(...args))
            }, [
              vue.createElementVNode("text", { class: "platform-name" }, "微信"),
              vue.createElementVNode("view", { class: "binding-status" }, [
                vue.createElementVNode("text", { class: "status-text" }, "未绑定"),
                vue.createElementVNode("view", { class: "arrow-icon" }, ">")
              ])
            ]),
            vue.createElementVNode("view", {
              class: "binding-item",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.bindQQ && $options.bindQQ(...args))
            }, [
              vue.createElementVNode("text", { class: "platform-name" }, "QQ"),
              vue.createElementVNode("view", { class: "binding-status" }, [
                vue.createElementVNode("view", { class: "qq-status" }, [
                  vue.createElementVNode("text", { class: "wave-icon" }, "〰️"),
                  vue.createElementVNode("text", { class: "qq-username" }, "糖糖没有")
                ]),
                vue.createElementVNode("view", { class: "arrow-icon" }, ">")
              ])
            ]),
            vue.createElementVNode("view", {
              class: "binding-item",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.bindWeibo && $options.bindWeibo(...args))
            }, [
              vue.createElementVNode("text", { class: "platform-name" }, "微博"),
              vue.createElementVNode("view", { class: "binding-status" }, [
                vue.createElementVNode("text", { class: "status-text" }, "未绑定"),
                vue.createElementVNode("view", { class: "arrow-icon" }, ">")
              ])
            ]),
            vue.createElementVNode("view", {
              class: "binding-item",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.bindApple && $options.bindApple(...args))
            }, [
              vue.createElementVNode("text", { class: "platform-name" }, "Apple"),
              vue.createElementVNode("view", { class: "binding-status" }, [
                vue.createElementVNode("text", { class: "status-text" }, "未绑定"),
                vue.createElementVNode("view", { class: "arrow-icon" }, ">")
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 第三方内容同步平台 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("text", { class: "section-title" }, "第三方内容同步平台"),
          vue.createElementVNode("view", { class: "binding-list" }, [
            vue.createElementVNode("view", {
              class: "binding-item",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.viewSyncDetails && $options.viewSyncDetails(...args))
            }, [
              vue.createElementVNode("text", { class: "platform-name" }, "今日头条 / 西瓜视频 / 懂车帝"),
              vue.createElementVNode("view", { class: "binding-status" }, [
                vue.createElementVNode("text", { class: "status-text" }, "查看详情"),
                vue.createElementVNode("view", { class: "arrow-icon" }, ">")
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 同步选项 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "sync-option" }, [
            vue.createElementVNode("view", { class: "option-info" }, [
              vue.createElementVNode("text", { class: "option-title" }, "同步粉丝数量"),
              vue.createElementVNode("text", { class: "option-description" }, "开启后,抖音粉丝数量将增加(关闭粉丝数量减少)")
            ]),
            vue.createElementVNode("switch", {
              checked: $data.syncFollowers,
              onChange: _cache[5] || (_cache[5] = (...args) => $options.toggleSyncFollowers && $options.toggleSyncFollowers(...args)),
              color: "#007aff",
              class: "sync-switch"
            }, null, 40, ["checked"])
          ]),
          vue.createElementVNode("view", { class: "sync-option" }, [
            vue.createElementVNode("view", { class: "option-info" }, [
              vue.createElementVNode("text", { class: "option-title" }, "同步抖音头像和昵称信息")
            ]),
            vue.createElementVNode("switch", {
              checked: $data.syncProfile,
              onChange: _cache[6] || (_cache[6] = (...args) => $options.toggleSyncProfile && $options.toggleSyncProfile(...args)),
              color: "#007aff",
              class: "sync-switch"
            }, null, 40, ["checked"])
          ])
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesSettingsThirdPartyBinding = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/third-party-binding.vue"]]);
  const _sfc_main$p = {
    name: "AddWays",
    data() {
      return {
        settings: {
          wechatSearch: true,
          phoneSearch: true,
          qqSearch: true,
          groupAdd: true,
          cardShare: true
        }
      };
    },
    onLoad() {
      this.loadSettings();
    },
    methods: {
      loadSettings() {
        try {
          const savedSettings = uni.getStorageSync("addWaysSettings");
          if (savedSettings) {
            this.settings = JSON.parse(savedSettings);
          }
        } catch (e) {
          formatAppLog("error", "at pages/settings/add-ways.vue:107", "加载设置失败:", e);
        }
      },
      toggleSetting(key) {
        this.settings[key] = !this.settings[key];
        this.saveSettings();
        uni.showToast({
          title: "设置已保存",
          icon: "success"
        });
      },
      saveSettings() {
        try {
          uni.setStorageSync("addWaysSettings", JSON.stringify(this.settings));
        } catch (e) {
          formatAppLog("error", "at pages/settings/add-ways.vue:125", "保存设置失败:", e);
        }
      }
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "add-ways-page" }, [
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("scroll-view", {
        class: "content",
        "scroll-y": ""
      }, [
        vue.createCommentVNode(" 添加方式设置模块 "),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "添加方式")
          ]),
          vue.createElementVNode("view", { class: "section-content" }, [
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "微信号搜索"),
                vue.createElementVNode("text", { class: "setting-desc" }, "允许他人通过微信号搜索到我")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[0] || (_cache[0] = ($event) => $options.toggleSetting("wechatSearch"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.wechatSearch }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.wechatSearch }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "手机号搜索"),
                vue.createElementVNode("text", { class: "setting-desc" }, "允许他人通过手机号搜索到我")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[1] || (_cache[1] = ($event) => $options.toggleSetting("phoneSearch"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.phoneSearch }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.phoneSearch }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "QQ号搜索"),
                vue.createElementVNode("text", { class: "setting-desc" }, "允许他人通过QQ号搜索到我")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[2] || (_cache[2] = ($event) => $options.toggleSetting("qqSearch"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.qqSearch }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.qqSearch }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "群聊添加"),
                vue.createElementVNode("text", { class: "setting-desc" }, "允许他人通过群聊添加我为好友")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[3] || (_cache[3] = ($event) => $options.toggleSetting("groupAdd"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.groupAdd }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.groupAdd }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ]),
            vue.createElementVNode("view", { class: "setting-item" }, [
              vue.createElementVNode("view", { class: "setting-info" }, [
                vue.createElementVNode("text", { class: "setting-label" }, "名片分享"),
                vue.createElementVNode("text", { class: "setting-desc" }, "允许他人通过名片分享添加我为好友")
              ]),
              vue.createElementVNode("view", {
                class: "toggle-switch",
                onClick: _cache[4] || (_cache[4] = ($event) => $options.toggleSetting("cardShare"))
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["toggle-track", { active: $data.settings.cardShare }])
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["toggle-thumb", { active: $data.settings.cardShare }])
                      },
                      null,
                      2
                      /* CLASS */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])
            ])
          ])
        ]),
        vue.createCommentVNode(" 隐私说明 "),
        vue.createElementVNode("view", { class: "privacy-note" }, [
          vue.createElementVNode("text", { class: "note-text" }, "关闭某些添加方式可能会影响他人找到您，建议根据实际需要合理设置")
        ])
      ])
    ]);
  }
  const PagesSettingsAddWays = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__scopeId", "data-v-a42a8120"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/add-ways.vue"]]);
  const _sfc_main$o = {
    name: "LanguageSettings",
    data() {
      return {
        currentLanguage: "zh-CN",
        languages: [
          {
            code: "zh-CN",
            name: "简体中文",
            nativeName: "简体中文"
          },
          {
            code: "zh-HK",
            name: "繁体中文（香港）",
            nativeName: "繁體中文（香港）"
          },
          {
            code: "zh-TW",
            name: "繁体中文（台湾）",
            nativeName: "繁體中文（台灣）"
          },
          {
            code: "en",
            name: "English",
            nativeName: "English"
          }
        ]
      };
    },
    onLoad() {
      this.loadCurrentLanguage();
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      loadCurrentLanguage() {
        try {
          const savedLanguage = uni.getStorageSync("appLanguage");
          if (savedLanguage) {
            this.currentLanguage = savedLanguage;
          }
        } catch (e) {
          formatAppLog("error", "at pages/settings/language.vue:91", "加载语言设置失败:", e);
        }
      },
      selectLanguage(languageCode) {
        if (this.currentLanguage === languageCode) {
          return;
        }
        uni.showModal({
          title: "确认更改语言",
          content: "更改语言后应用将重新启动，确定要继续吗？",
          success: (res) => {
            if (res.confirm) {
              this.currentLanguage = languageCode;
              this.saveLanguage(languageCode);
              uni.showToast({
                title: "语言设置已保存",
                icon: "success"
              });
              setTimeout(() => {
                this.restartApp();
              }, 1500);
            }
          }
        });
      },
      saveLanguage(languageCode) {
        try {
          uni.setStorageSync("appLanguage", languageCode);
        } catch (e) {
          formatAppLog("error", "at pages/settings/language.vue:126", "保存语言设置失败:", e);
        }
      },
      restartApp() {
        uni.showModal({
          title: "语言设置完成",
          content: "请手动重启应用以应用新的语言设置",
          showCancel: false,
          success: () => {
            uni.navigateBack();
          }
        });
      }
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "language-page" }, [
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="nav-left" @click="goBack">\n				<text class="back-arrow">←</text>\n			</view>\n			<view class="nav-center">\n				<text class="nav-title">语言</text>\n			</view>\n			<view class="nav-right"></view>\n		</view> '),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 语言选项列表 "),
        vue.createElementVNode("view", { class: "language-list" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.languages, (language, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["language-item", { active: $data.currentLanguage === language.code }]),
                key: index,
                onClick: ($event) => $options.selectLanguage(language.code)
              }, [
                vue.createElementVNode("view", { class: "language-info" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "language-name" },
                    vue.toDisplayString(language.name),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "language-native" },
                    vue.toDisplayString(language.nativeName),
                    1
                    /* TEXT */
                  )
                ]),
                $data.currentLanguage === language.code ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "language-check"
                }, [
                  vue.createElementVNode("text", { class: "check-icon" }, "✓")
                ])) : vue.createCommentVNode("v-if", true)
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 说明文字 "),
        vue.createElementVNode("view", { class: "language-note" }, [
          vue.createElementVNode("text", { class: "note-text" }, "更改语言后，应用将重新启动以应用新语言设置")
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsLanguage = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/language.vue"]]);
  const _sfc_main$n = {
    name: "NotificationDisplay",
    data() {
      return {
        currentDisplayMode: "full",
        displayOptions: [
          {
            value: "minimal",
            title: "仅显示【你收到了一条消息】",
            description: "最简洁的通知方式，保护隐私"
          },
          {
            value: "medium",
            title: "显示朋友名称、群聊名",
            description: "显示发送者信息，但不显示具体内容"
          },
          {
            value: "full",
            title: "显示朋友名称、群聊名及消息内容",
            description: "显示完整的消息信息"
          }
        ]
      };
    },
    onLoad() {
      this.loadCurrentDisplayMode();
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      loadCurrentDisplayMode() {
        try {
          const savedMode = uni.getStorageSync("notificationDisplayMode");
          if (savedMode) {
            this.currentDisplayMode = savedMode;
          }
        } catch (e) {
          formatAppLog("error", "at pages/settings/notification-display.vue:86", "加载通知显示设置失败:", e);
        }
      },
      selectDisplayMode(mode) {
        if (this.currentDisplayMode === mode) {
          return;
        }
        this.currentDisplayMode = mode;
        this.saveDisplayMode(mode);
        uni.showToast({
          title: "设置已保存",
          icon: "success"
        });
      },
      saveDisplayMode(mode) {
        try {
          uni.setStorageSync("notificationDisplayMode", mode);
        } catch (e) {
          formatAppLog("error", "at pages/settings/notification-display.vue:108", "保存通知显示设置失败:", e);
        }
      }
    }
  };
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "notification-display-page" }, [
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="nav-left" @click="goBack">\n				<text class="back-arrow">←</text>\n			</view>\n			<view class="nav-center">\n				<text class="nav-title">通知显示内容</text>\n			</view>\n			<view class="nav-right"></view>\n		</view> '),
      vue.createCommentVNode(" 内容区域 "),
      vue.createElementVNode("view", { class: "content-area" }, [
        vue.createCommentVNode(" 通知显示方式选项 "),
        vue.createElementVNode("view", { class: "display-options" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.displayOptions, (option, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["option-item", { active: $data.currentDisplayMode === option.value }]),
                key: index,
                onClick: ($event) => $options.selectDisplayMode(option.value)
              }, [
                vue.createElementVNode("view", { class: "option-info" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "option-title" },
                    vue.toDisplayString(option.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "option-desc" },
                    vue.toDisplayString(option.description),
                    1
                    /* TEXT */
                  )
                ]),
                $data.currentDisplayMode === option.value ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "option-check"
                }, [
                  vue.createElementVNode("text", { class: "check-icon" }, "✓")
                ])) : vue.createCommentVNode("v-if", true)
              ], 10, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        vue.createCommentVNode(" 说明文字 "),
        vue.createElementVNode("view", { class: "display-note" }, [
          vue.createElementVNode("text", { class: "note-text" }, "选择通知在锁屏和通知栏中的显示方式")
        ])
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesSettingsNotificationDisplay = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/settings/notification-display.vue"]]);
  const _sfc_main$m = {
    name: "OfficialCertificationPage",
    data() {
      return {
        loading: false,
        realnameInfo: null,
        schoolCount: 0,
        jobCount: 0
      };
    },
    onLoad() {
      this.loadCertificationData();
    },
    methods: {
      // 加载认证数据
      async loadCertificationData() {
        this.loading = true;
        try {
          await Promise.all([
            this.loadRealnameData(),
            this.loadSchoolData(),
            this.loadJobData()
          ]);
        } catch (error) {
          formatAppLog("error", "at pages/verification/official-certification.vue:96", "加载认证数据失败:", error);
          uni.showToast({
            title: "加载失败，请重试",
            icon: "none"
          });
        } finally {
          this.loading = false;
        }
      },
      // 获取实名认证数据
      async loadRealnameData() {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/cert-realname-base/all",
            method: "GET",
            timeout: 1e4
          });
          if (response.data && response.data.length > 0) {
            this.realnameInfo = response.data[0];
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/official-certification.vue:119", "获取实名认证数据失败:", error);
        }
      },
      // 获取学校认证数据
      async loadSchoolData() {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/cert-student-base/all",
            method: "GET",
            timeout: 1e4
          });
          if (response.data) {
            this.schoolCount = response.data.length;
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/official-certification.vue:136", "获取学校认证数据失败:", error);
        }
      },
      // 获取职业认证数据
      async loadJobData() {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/cert-job-base/all",
            method: "GET",
            timeout: 1e4
          });
          if (response.data) {
            this.jobCount = response.data.length;
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/official-certification.vue:153", "获取职业认证数据失败:", error);
        }
      },
      goBack() {
        uni.navigateBack();
      },
      goToRealNameCertification() {
        uni.navigateTo({
          url: "/pages/verification/real-name-verification"
        });
      },
      goToSchoolCertification() {
        uni.navigateTo({
          url: "/pages/verification/school-certification"
        });
      },
      goToProfessionalCertification() {
        uni.navigateTo({
          url: "/pages/verification/professional-certification"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      }
    }
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "official-certification-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">官方认证</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 认证选项列表 "),
      vue.createElementVNode("view", { class: "certification-list" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-section"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载认证信息...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 实名认证 "),
        !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "list-item",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goToRealNameCertification && $options.goToRealNameCertification(...args))
        }, [
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.createElementVNode("text", { class: "item-text" }, "实名认证"),
            $data.realnameInfo ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "item-desc"
              },
              vue.toDisplayString($data.realnameInfo.ruleDesc || "身份验证"),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("view", { class: "arrow-icon" }, ">")
        ])) : vue.createCommentVNode("v-if", true),
        !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "divider"
        })) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 学校认证 "),
        !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "list-item",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToSchoolCertification && $options.goToSchoolCertification(...args))
        }, [
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.createElementVNode("text", { class: "item-text" }, "学校认证"),
            $data.schoolCount > 0 ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "item-desc"
              },
              "支持 " + vue.toDisplayString($data.schoolCount) + " 所学校",
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("view", { class: "arrow-icon" }, ">")
        ])) : vue.createCommentVNode("v-if", true),
        !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 4,
          class: "divider"
        })) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 职业认证 "),
        !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 5,
          class: "list-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToProfessionalCertification && $options.goToProfessionalCertification(...args))
        }, [
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.createElementVNode("text", { class: "item-text" }, "职业认证"),
            $data.jobCount > 0 ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "item-desc"
              },
              "支持 " + vue.toDisplayString($data.jobCount) + " 种职业",
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createElementVNode("view", { class: "arrow-icon" }, ">")
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 服务条款链接 "),
      vue.createElementVNode("view", {
        class: "terms-link",
        onClick: _cache[3] || (_cache[3] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
      }, [
        vue.createElementVNode("text", { class: "terms-text" }, "服务条款")
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesVerificationOfficialCertification = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/official-certification.vue"]]);
  const _sfc_main$l = {
    name: "SchoolCertificationPage",
    data() {
      return {
        isAgreed: false,
        showPicker: false,
        provinces: [],
        schools: [],
        selectedProvince: "",
        selectedSchool: "",
        loading: false,
        loadError: false,
        errorMessage: ""
      };
    },
    onLoad() {
      this.loadSchoolData();
    },
    methods: {
      // 加载学校数据
      async loadSchoolData() {
        this.loading = true;
        this.loadError = false;
        this.errorMessage = "";
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/cert-student-base/all",
            method: "GET",
            timeout: 1e4
          });
          if (response.data && response.data.length > 0) {
            this.schools = response.data;
            const provinceSet = /* @__PURE__ */ new Set();
            response.data.forEach((school) => {
              if (school.region) {
                provinceSet.add(school.region);
              }
            });
            this.provinces = Array.from(provinceSet).sort();
            formatAppLog("log", "at pages/verification/school-certification.vue:135", "成功加载学校数据:", this.schools.length, "所学校");
          } else {
            this.loadError = true;
            this.errorMessage = "数据库中没有学校数据，请联系管理员";
            this.provinces = [];
            this.schools = [];
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/school-certification.vue:144", "获取学校数据失败:", error);
          this.loadError = true;
          this.errorMessage = "网络连接失败，请检查网络后重试";
          this.provinces = [];
          this.schools = [];
          uni.showToast({
            title: "数据加载失败",
            icon: "none",
            duration: 3e3
          });
        } finally {
          this.loading = false;
        }
      },
      // 根据省份获取学校列表
      getSchoolsByProvince(province) {
        return this.schools.filter((school) => school.region === province);
      },
      goBack() {
        uni.navigateBack();
      },
      toggleAgreement() {
        this.isAgreed = !this.isAgreed;
      },
      showSchoolPicker() {
        this.showPicker = true;
      },
      hideSchoolPicker() {
        this.showPicker = false;
      },
      selectProvince(province) {
        formatAppLog("log", "at pages/verification/school-certification.vue:178", "选择省份:", province);
        this.selectedProvince = province;
        uni.navigateTo({
          url: `/pages/verification/school-list?province=${encodeURIComponent(province)}`
        });
        this.hideSchoolPicker();
      },
      async goToNextStep() {
        if (!this.isAgreed) {
          uni.showToast({
            title: "请先同意服务条款",
            icon: "none"
          });
          return;
        }
        if (!this.selectedSchool) {
          uni.showToast({
            title: "请选择学校",
            icon: "none"
          });
          return;
        }
        try {
          uni.showLoading({
            title: "正在提交认证信息..."
          });
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.hideLoading();
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          const certInfo = {
            name: "",
            // 这里可以添加姓名输入框
            degree: "",
            // 这里可以添加学历选择
            school: this.selectedSchool,
            province: this.selectedProvince,
            studentId: "",
            // 这里可以添加学号输入框
            submitTime: (/* @__PURE__ */ new Date()).toISOString()
          };
          const response = await this.saveCertRecord(userId, "STUDENT", certInfo);
          uni.hideLoading();
          if (response.success) {
            uni.showToast({
              title: "认证信息提交成功",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateTo({
                url: `/pages/verification/certification-feedback?type=school&school=${encodeURIComponent(this.selectedSchool)}&province=${encodeURIComponent(this.selectedProvince)}`
              });
            }, 1500);
          } else {
            uni.showToast({
              title: response.message || "提交失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/verification/school-certification.vue:258", "提交认证信息失败:", error);
          uni.showToast({
            title: "网络错误，请重试",
            icon: "none"
          });
        }
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      // 保存认证记录到后端
      async saveCertRecord(userId, certType, certInfo) {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/u-entities/user-cert-record/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              userId,
              certType,
              certInfo: JSON.stringify(certInfo)
            },
            timeout: 1e4
          });
          if (response.statusCode === 200) {
            return response.data;
          } else {
            throw new Error(`HTTP ${response.statusCode}`);
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/school-certification.vue:294", "保存认证记录失败:", error);
          throw error;
        }
      }
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "school-certification-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">学校认证</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 提示文字 "),
      vue.createElementVNode("view", { class: "prompt-text" }, [
        vue.createElementVNode("text", { class: "prompt" }, "请选择学校名称")
      ]),
      vue.createCommentVNode(" 学校选择区域 "),
      vue.createElementVNode("view", { class: "school-selection" }, [
        !$data.loadError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "selection-field",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.showSchoolPicker && $options.showSchoolPicker(...args))
        }, [
          vue.createElementVNode("text", { class: "field-label" }, "学校名称"),
          vue.createElementVNode("view", { class: "selection-content" }, [
            $data.selectedSchool ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "selected-text"
              },
              vue.toDisplayString($data.selectedSchool),
              1
              /* TEXT */
            )) : !$data.loading ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 1,
              class: "placeholder-text"
            }, "请选择>")) : (vue.openBlock(), vue.createElementBlock("text", {
              key: 2,
              class: "loading-text"
            }, "加载中..."))
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误提示 "),
        $data.loadError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-section"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", {
            class: "retry-button",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.loadSchoolData && $options.loadSchoolData(...args))
          }, [
            vue.createElementVNode("text", { class: "retry-text" }, "重试")
          ])
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 协议同意区域 "),
      vue.createElementVNode("view", { class: "agreement-section" }, [
        vue.createElementVNode("view", { class: "agreement-item" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["checkbox", { checked: $data.isAgreed }]),
              onClick: _cache[2] || (_cache[2] = (...args) => $options.toggleAgreement && $options.toggleAgreement(...args))
            },
            [
              $data.isAgreed ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "checkmark"
              }, "✓")) : vue.createCommentVNode("v-if", true)
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode("text", { class: "agreement-text" }, "阅读并同意"),
          vue.createElementVNode("text", {
            class: "agreement-link",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
          }, "《AFriends官方认证服务协议》")
        ])
      ]),
      vue.createCommentVNode(" 下一步按钮 "),
      vue.createElementVNode("view", { class: "next-button-section" }, [
        vue.createElementVNode("view", {
          class: "next-button",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToNextStep && $options.goToNextStep(...args))
        }, [
          vue.createElementVNode("text", { class: "next-text" }, "下一步")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" }),
      vue.createCommentVNode(" 学校选择弹窗 "),
      $data.showPicker ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "school-picker-modal",
        onClick: _cache[7] || (_cache[7] = (...args) => $options.hideSchoolPicker && $options.hideSchoolPicker(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[6] || (_cache[6] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "modal-header" }, [
            vue.createElementVNode("view", {
              class: "modal-back",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.hideSchoolPicker && $options.hideSchoolPicker(...args))
            }, [
              vue.createElementVNode("view", { class: "back-arrow" })
            ]),
            vue.createElementVNode("text", { class: "modal-title" }, "请选择您的学校"),
            vue.createElementVNode("view", { class: "search-icon" }, [
              vue.createElementVNode("view", { class: "magnifier" })
            ])
          ]),
          vue.createElementVNode("view", { class: "school-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.provinces, (province, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "school-item",
                  key: index,
                  onClick: ($event) => $options.selectProvince(province)
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "province-name" },
                    vue.toDisplayString(province),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "arrow-icon" }, ">")
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesVerificationSchoolCertification = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/school-certification.vue"]]);
  const _sfc_main$k = {
    name: "ProfessionalCertificationPage",
    data() {
      return {
        isAgreed: false,
        showPicker: false,
        showJobPicker: false,
        professions: [],
        jobTypes: [],
        selectedJobType: "",
        selectedProfession: "",
        loading: false,
        loadError: false,
        errorMessage: "",
        currentStep: "type"
        // 'type' 或 'job'
      };
    },
    onLoad() {
      this.loadJobData();
    },
    methods: {
      // 加载职业数据
      async loadJobData() {
        this.loading = true;
        this.loadError = false;
        this.errorMessage = "";
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/cert-job-base/all",
            method: "GET",
            timeout: 1e4
          });
          if (response.data && response.data.length > 0) {
            const jobTypeSet = /* @__PURE__ */ new Set();
            response.data.forEach((job) => {
              if (job.jobType) {
                jobTypeSet.add(job.jobType);
              }
            });
            this.jobTypes = Array.from(jobTypeSet).sort();
            this.professions = response.data;
            formatAppLog("log", "at pages/verification/professional-certification.vue:158", "成功加载职业数据:", this.professions.length, "个职业");
          } else {
            this.loadError = true;
            this.errorMessage = "数据库中没有职业数据，请联系管理员";
            this.jobTypes = [];
            this.professions = [];
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/professional-certification.vue:167", "获取职业数据失败:", error);
          this.loadError = true;
          this.errorMessage = "网络连接失败，请检查网络后重试";
          this.jobTypes = [];
          this.professions = [];
          uni.showToast({
            title: "数据加载失败",
            icon: "none",
            duration: 3e3
          });
        } finally {
          this.loading = false;
        }
      },
      // 根据职业类型获取具体职业列表
      getJobsByType(jobType) {
        return this.professions.filter((job) => job.jobType === jobType);
      },
      // 显示具体职业选择弹窗
      showJobPickerModal() {
        this.showJobPicker = true;
      },
      // 隐藏具体职业选择弹窗
      hideJobPickerModal() {
        this.showJobPicker = false;
      },
      // 选择具体职业
      selectJob(job) {
        formatAppLog("log", "at pages/verification/professional-certification.vue:200", "选择具体职业:", job);
        formatAppLog("log", "at pages/verification/professional-certification.vue:201", "job类型:", typeof job);
        formatAppLog("log", "at pages/verification/professional-certification.vue:202", "job.jobName:", job.jobName);
        if (job && job.jobName) {
          this.selectedProfession = job.jobName;
          this.hideJobPickerModal();
          this.currentStep = "type";
        } else {
          formatAppLog("error", "at pages/verification/professional-certification.vue:209", "职业对象格式错误:", job);
          uni.showToast({
            title: "选择失败，请重试",
            icon: "none"
          });
        }
      },
      // 返回职业类型选择
      backToJobType() {
        this.showJobPicker = false;
        this.showPicker = true;
        this.currentStep = "type";
      },
      goBack() {
        uni.navigateBack();
      },
      toggleAgreement() {
        this.isAgreed = !this.isAgreed;
      },
      showProfessionPicker() {
        this.showPicker = true;
      },
      hideProfessionPicker() {
        this.showPicker = false;
      },
      selectProfession(profession) {
        formatAppLog("log", "at pages/verification/professional-certification.vue:237", "选择职业类型:", profession);
        this.selectedJobType = profession;
        this.hideProfessionPicker();
        this.showJobPicker = true;
        this.currentStep = "job";
      },
      async goToNextStep() {
        if (!this.isAgreed) {
          uni.showToast({
            title: "请先同意服务条款",
            icon: "none"
          });
          return;
        }
        if (!this.selectedJobType) {
          uni.showToast({
            title: "请选择职业类型",
            icon: "none"
          });
          return;
        }
        if (!this.selectedProfession) {
          uni.showToast({
            title: "请选择具体职业",
            icon: "none"
          });
          return;
        }
        try {
          uni.showLoading({
            title: "正在提交认证信息..."
          });
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.hideLoading();
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          const certInfo = {
            name: "",
            // 这里可以添加姓名输入框
            jobType: this.selectedJobType,
            jobName: this.selectedProfession,
            company: "",
            // 这里可以添加公司输入框
            position: this.selectedProfession,
            submitTime: (/* @__PURE__ */ new Date()).toISOString()
          };
          const response = await this.saveCertRecord(userId, "JOB", certInfo);
          uni.hideLoading();
          if (response.success) {
            uni.showToast({
              title: "认证信息提交成功",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateTo({
                url: `/pages/verification/certification-feedback?type=professional&jobType=${encodeURIComponent(this.selectedJobType)}&jobName=${encodeURIComponent(this.selectedProfession)}`
              });
            }, 1500);
          } else {
            uni.showToast({
              title: response.message || "提交失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/verification/professional-certification.vue:325", "提交认证信息失败:", error);
          uni.showToast({
            title: "网络错误，请重试",
            icon: "none"
          });
        }
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      // 保存认证记录到后端
      async saveCertRecord(userId, certType, certInfo) {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/u-entities/user-cert-record/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              userId,
              certType,
              certInfo: JSON.stringify(certInfo)
            },
            timeout: 1e4
          });
          if (response.statusCode === 200) {
            return response.data;
          } else {
            throw new Error(`HTTP ${response.statusCode}`);
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/professional-certification.vue:361", "保存认证记录失败:", error);
          throw error;
        }
      }
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "professional-certification-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">个人职业认证</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 提示文字 "),
      vue.createElementVNode("view", { class: "prompt-text" }, [
        vue.createElementVNode("text", { class: "prompt" }, "请选择职业类型")
      ]),
      vue.createCommentVNode(" 职业类型选择区域 "),
      vue.createElementVNode("view", { class: "profession-selection" }, [
        !$data.loadError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "selection-field",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.showProfessionPicker && $options.showProfessionPicker(...args))
        }, [
          vue.createElementVNode("text", { class: "field-label" }, "职业类型"),
          vue.createElementVNode("view", { class: "selection-content" }, [
            $data.selectedProfession ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "selected-text"
              },
              vue.toDisplayString($data.selectedJobType) + " - " + vue.toDisplayString($data.selectedProfession),
              1
              /* TEXT */
            )) : $data.selectedJobType ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 1,
                class: "selected-text"
              },
              vue.toDisplayString($data.selectedJobType) + " - 请选择具体职业",
              1
              /* TEXT */
            )) : !$data.loading ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 2,
              class: "placeholder-text"
            }, "请选择>")) : (vue.openBlock(), vue.createElementBlock("text", {
              key: 3,
              class: "loading-text"
            }, "加载中..."))
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误提示 "),
        $data.loadError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-section"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", {
            class: "retry-button",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.loadJobData && $options.loadJobData(...args))
          }, [
            vue.createElementVNode("text", { class: "retry-text" }, "重试")
          ])
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode(" 协议同意区域 "),
      vue.createElementVNode("view", { class: "agreement-section" }, [
        vue.createElementVNode("view", { class: "agreement-item" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["checkbox", { checked: $data.isAgreed }]),
              onClick: _cache[2] || (_cache[2] = (...args) => $options.toggleAgreement && $options.toggleAgreement(...args))
            },
            [
              $data.isAgreed ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "checkmark"
              }, "✓")) : vue.createCommentVNode("v-if", true)
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode("text", { class: "agreement-text" }, "阅读并同意"),
          vue.createElementVNode("text", {
            class: "agreement-link",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
          }, "《AFriends官方认证服务协议》")
        ])
      ]),
      vue.createCommentVNode(" 下一步按钮 "),
      vue.createElementVNode("view", { class: "next-button-section" }, [
        vue.createElementVNode("view", {
          class: "next-button",
          onClick: _cache[4] || (_cache[4] = (...args) => $options.goToNextStep && $options.goToNextStep(...args))
        }, [
          vue.createElementVNode("text", { class: "next-text" }, "下一步")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" }),
      vue.createCommentVNode(" 职业类型选择弹窗 "),
      $data.showPicker ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "profession-picker-modal",
        onClick: _cache[7] || (_cache[7] = (...args) => $options.hideProfessionPicker && $options.hideProfessionPicker(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[6] || (_cache[6] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "modal-header" }, [
            vue.createElementVNode("view", {
              class: "modal-back",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.hideProfessionPicker && $options.hideProfessionPicker(...args))
            }, [
              vue.createElementVNode("view", { class: "back-arrow" })
            ]),
            vue.createElementVNode("text", { class: "modal-title" }, "请选择您的行业类型"),
            vue.createElementVNode("view", { class: "search-icon" }, [
              vue.createElementVNode("view", { class: "magnifier" })
            ])
          ]),
          vue.createElementVNode("view", { class: "profession-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.jobTypes, (profession, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "profession-item",
                  key: index,
                  onClick: ($event) => $options.selectProfession(profession)
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "profession-name" },
                    vue.toDisplayString(profession),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "arrow-icon" }, ">")
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 具体职业选择弹窗 "),
      $data.showJobPicker ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "job-picker-modal",
        onClick: _cache[10] || (_cache[10] = (...args) => $options.hideJobPickerModal && $options.hideJobPickerModal(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[9] || (_cache[9] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "modal-header" }, [
            vue.createElementVNode("view", {
              class: "modal-back",
              onClick: _cache[8] || (_cache[8] = (...args) => $options.backToJobType && $options.backToJobType(...args))
            }, [
              vue.createElementVNode("view", { class: "back-arrow" })
            ]),
            vue.createElementVNode(
              "text",
              { class: "modal-title" },
              vue.toDisplayString($data.selectedJobType) + " - 选择具体职业",
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "search-icon" }, [
              vue.createElementVNode("view", { class: "magnifier" })
            ])
          ]),
          vue.createElementVNode("view", { class: "job-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($options.getJobsByType($data.selectedJobType), (job, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "job-item",
                  key: index,
                  onClick: ($event) => $options.selectJob(job)
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "job-name" },
                    vue.toDisplayString(job.jobName),
                    1
                    /* TEXT */
                  )
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesVerificationProfessionalCertification = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/professional-certification.vue"]]);
  const _sfc_main$j = {
    name: "RealNameVerificationPage",
    data() {
      return {
        selectedDocumentType: "",
        realName: "",
        documentNumber: "",
        isAgreed: false,
        showDocumentTypePicker: false,
        documentTypes: [],
        loading: false,
        loadError: false,
        errorMessage: ""
      };
    },
    onLoad() {
      this.loadDocumentTypes();
    },
    computed: {
      canProceed() {
        return this.selectedDocumentType && this.realName && this.documentNumber && this.isAgreed;
      }
    },
    methods: {
      // 加载证件类型数据
      async loadDocumentTypes() {
        this.loading = true;
        this.loadError = false;
        this.errorMessage = "";
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/bc-entities/cert-realname-base/all",
            method: "GET",
            timeout: 1e4
          });
          if (response.data && response.data.length > 0) {
            this.documentTypes = response.data.map((item) => item.idType);
            formatAppLog("log", "at pages/verification/real-name-verification.vue:164", "成功加载证件类型:", this.documentTypes);
          } else {
            this.loadError = true;
            this.errorMessage = "数据库中没有证件类型数据，请联系管理员";
            this.documentTypes = [];
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/real-name-verification.vue:172", "获取证件类型失败:", error);
          this.loadError = true;
          this.errorMessage = "网络连接失败，请检查网络后重试";
          this.documentTypes = [];
          uni.showToast({
            title: "数据加载失败",
            icon: "none",
            duration: 3e3
          });
        } finally {
          this.loading = false;
        }
      },
      goBack() {
        uni.navigateBack();
      },
      goToTermsOfService() {
        formatAppLog("log", "at pages/verification/real-name-verification.vue:191", "goToTermsOfService 被调用了");
        uni.showToast({
          title: "点击了协议链接",
          icon: "success"
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/settings/terms-of-service",
            success: () => {
              formatAppLog("log", "at pages/verification/real-name-verification.vue:202", "跳转成功");
            },
            fail: (err) => {
              formatAppLog("error", "at pages/verification/real-name-verification.vue:205", "跳转失败:", err);
              uni.showToast({
                title: "跳转失败",
                icon: "none"
              });
            }
          });
        }, 1e3);
      },
      openDocumentTypePicker() {
        this.showDocumentTypePicker = true;
      },
      hideDocumentTypePicker() {
        this.showDocumentTypePicker = false;
      },
      selectDocumentType(type) {
        this.selectedDocumentType = type;
        this.hideDocumentTypePicker();
      },
      toggleAgreement() {
        this.isAgreed = !this.isAgreed;
      },
      async goToFaceRecognition() {
        if (!this.canProceed) {
          uni.showToast({
            title: "请完善所有信息并同意协议",
            icon: "none"
          });
          return;
        }
        if (this.realName.length < 2) {
          uni.showToast({
            title: "请输入正确的姓名",
            icon: "none"
          });
          return;
        }
        if (this.selectedDocumentType === "身份证" && this.documentNumber.length !== 18) {
          uni.showToast({
            title: "请输入正确的身份证号码",
            icon: "none"
          });
          return;
        }
        try {
          uni.showLoading({
            title: "正在提交认证信息..."
          });
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.hideLoading();
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          const certInfo = {
            name: this.realName,
            gender: "",
            // 这里可以添加性别选择
            idNumber: this.documentNumber,
            documentType: this.selectedDocumentType,
            submitTime: (/* @__PURE__ */ new Date()).toISOString()
          };
          const response = await this.saveCertRecord(userId, "REALNAME", certInfo);
          uni.hideLoading();
          if (response.success) {
            uni.showToast({
              title: "认证信息提交成功",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateTo({
                url: "/pages/verification/face-recognition?type=realName"
              });
            }, 1500);
          } else {
            uni.showToast({
              title: response.message || "提交失败",
              icon: "none"
            });
          }
        } catch (error) {
          uni.hideLoading();
          formatAppLog("error", "at pages/verification/real-name-verification.vue:306", "提交认证信息失败:", error);
          uni.showToast({
            title: "网络错误，请重试",
            icon: "none"
          });
        }
      },
      // 保存认证记录到后端
      async saveCertRecord(userId, certType, certInfo) {
        try {
          const response = await uni.request({
            url: "http://localhost:8888/api/u-entities/user-cert-record/save",
            method: "POST",
            header: {
              "Content-Type": "application/json"
            },
            data: {
              userId,
              certType,
              certInfo: JSON.stringify(certInfo)
            },
            timeout: 1e4
          });
          if (response.statusCode === 200) {
            return response.data;
          } else {
            throw new Error(`HTTP ${response.statusCode}`);
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/real-name-verification.vue:337", "保存认证记录失败:", error);
          throw error;
        }
      }
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "real-name-verification-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">实名认证</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 说明文字 "),
      vue.createElementVNode("view", { class: "disclaimer" }, [
        vue.createElementVNode("text", { class: "disclaimer-text" }, "认证信息将用于AFriends平台服务,与账号唯一绑定,无法解除绑定,我们会对信息严格保密")
      ]),
      vue.createCommentVNode(" 认证表单 "),
      vue.createElementVNode("view", { class: "verification-form" }, [
        vue.createCommentVNode(" 证件类型 "),
        !$data.loadError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "form-item",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.openDocumentTypePicker && $options.openDocumentTypePicker(...args))
        }, [
          vue.createElementVNode("text", { class: "item-label" }, "证件类型"),
          vue.createElementVNode("view", { class: "item-content" }, [
            $data.selectedDocumentType ? (vue.openBlock(), vue.createElementBlock(
              "text",
              {
                key: 0,
                class: "item-value"
              },
              vue.toDisplayString($data.selectedDocumentType),
              1
              /* TEXT */
            )) : !$data.loading ? (vue.openBlock(), vue.createElementBlock("text", {
              key: 1,
              class: "placeholder-text"
            }, "请选择证件类型 >")) : (vue.openBlock(), vue.createElementBlock("text", {
              key: 2,
              class: "loading-text"
            }, "加载中..."))
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 错误提示 "),
        $data.loadError ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "error-section"
        }, [
          vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
          vue.createElementVNode(
            "text",
            { class: "error-text" },
            vue.toDisplayString($data.errorMessage),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", {
            class: "retry-button",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.loadDocumentTypes && $options.loadDocumentTypes(...args))
          }, [
            vue.createElementVNode("text", { class: "retry-text" }, "重试")
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "divider" }),
        vue.createCommentVNode(" 真实姓名 "),
        vue.createElementVNode("view", { class: "form-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "真实姓名"),
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                class: "input-field",
                type: "text",
                placeholder: "请填写真实姓名",
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.realName = $event),
                maxlength: "20"
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue.vModelText, $data.realName]
            ])
          ])
        ]),
        vue.createElementVNode("view", { class: "divider" }),
        vue.createCommentVNode(" 证件号码 "),
        vue.createElementVNode("view", { class: "form-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "证件号码"),
          vue.createElementVNode("view", { class: "item-content" }, [
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                class: "input-field",
                type: "text",
                placeholder: "请填写真实证件号码",
                "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.documentNumber = $event),
                maxlength: "18"
              },
              null,
              512
              /* NEED_PATCH */
            ), [
              [vue.vModelText, $data.documentNumber]
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 协议同意区域 "),
      vue.createElementVNode("view", { class: "agreement-section" }, [
        vue.createElementVNode("view", { class: "agreement-item" }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["checkbox", { checked: $data.isAgreed }]),
              onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleAgreement && $options.toggleAgreement(...args))
            },
            [
              $data.isAgreed ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "checkmark"
              }, "✓")) : vue.createCommentVNode("v-if", true)
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode("text", { class: "agreement-text" }, "阅读并同意"),
          vue.createElementVNode("text", {
            class: "agreement-link",
            onClick: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args), ["stop"]))
          }, "《实名认证服务协议》")
        ])
      ]),
      vue.createCommentVNode(" 进入人脸识别按钮 "),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["face-recognition-button", { disabled: !$options.canProceed }]),
          onClick: _cache[6] || (_cache[6] = (...args) => $options.goToFaceRecognition && $options.goToFaceRecognition(...args))
        },
        [
          vue.createElementVNode("text", { class: "button-text" }, "进入人脸识别")
        ],
        2
        /* CLASS */
      ),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" }),
      vue.createCommentVNode(" 证件类型选择弹窗 "),
      $data.showDocumentTypePicker ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "document-type-modal",
        onClick: _cache[9] || (_cache[9] = (...args) => $options.hideDocumentTypePicker && $options.hideDocumentTypePicker(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[8] || (_cache[8] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("view", { class: "modal-header" }, [
            vue.createElementVNode("text", { class: "modal-title" }, "选择证件类型"),
            vue.createElementVNode("view", {
              class: "close-button",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.hideDocumentTypePicker && $options.hideDocumentTypePicker(...args))
            }, [
              vue.createElementVNode("text", { class: "close-icon" }, "×")
            ])
          ]),
          vue.createElementVNode("view", { class: "document-type-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.documentTypes, (type, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "document-type-item",
                  key: index,
                  onClick: ($event) => $options.selectDocumentType(type)
                }, [
                  vue.createElementVNode(
                    "text",
                    { class: "type-name" },
                    vue.toDisplayString(type),
                    1
                    /* TEXT */
                  )
                ], 8, ["onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesVerificationRealNameVerification = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/real-name-verification.vue"]]);
  const _sfc_main$i = {
    name: "FaceRecognitionPage",
    data() {
      return {
        progress: 0,
        showResult: false,
        recognitionResult: "success",
        // 'success' 或 'error'
        resultTitle: "识别成功",
        resultDesc: "人脸识别已完成，请继续下一步",
        certificationType: "realName"
        // 认证类型：realName 表示实名认证
      };
    },
    onLoad(options) {
      if (options.type) {
        this.certificationType = options.type;
      }
    },
    mounted() {
      this.startRecognition();
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      startRecognition() {
        this.progress = 0;
        const timer = setInterval(() => {
          this.progress += 10;
          if (this.progress >= 100) {
            clearInterval(timer);
            this.recognitionComplete();
          }
        }, 200);
      },
      recognitionComplete() {
        const isSuccess = Math.random() > 0.2;
        this.recognitionResult = isSuccess ? "success" : "error";
        this.resultTitle = isSuccess ? "识别成功" : "识别失败";
        this.resultDesc = isSuccess ? "人脸识别已完成，请继续下一步" : "请重新进行人脸识别";
        this.showResult = true;
      },
      retakePhoto() {
        this.progress = 0;
        this.startRecognition();
      },
      confirmRecognition() {
        if (this.progress < 100) {
          uni.showToast({
            title: "识别尚未完成",
            icon: "none"
          });
          return;
        }
        if (this.recognitionResult === "success") {
          uni.showToast({
            title: "认证完成",
            icon: "success"
          });
          setTimeout(() => {
            if (this.certificationType === "realName") {
              uni.redirectTo({
                url: "/pages/verification/certification-feedback?type=realName"
              });
            } else {
              uni.navigateBack();
            }
          }, 1500);
        } else {
          uni.showToast({
            title: "请重新识别",
            icon: "none"
          });
        }
      },
      hideResult() {
        this.showResult = false;
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "face-recognition-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">人脸识别</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 摄像头预览区域 "),
      vue.createElementVNode("view", { class: "camera-preview" }, [
        vue.createElementVNode("view", { class: "preview-container" }, [
          vue.createElementVNode("view", { class: "face-frame" }, [
            vue.createElementVNode("view", { class: "frame-corner top-left" }),
            vue.createElementVNode("view", { class: "frame-corner top-right" }),
            vue.createElementVNode("view", { class: "frame-corner bottom-left" }),
            vue.createElementVNode("view", { class: "frame-corner bottom-right" })
          ]),
          vue.createElementVNode("view", { class: "preview-placeholder" }, [
            vue.createElementVNode("view", { class: "camera-icon" }, [
              vue.createElementVNode("view", { class: "camera-lens" })
            ]),
            vue.createElementVNode("text", { class: "preview-text" }, "摄像头预览区域")
          ])
        ])
      ]),
      vue.createCommentVNode(" 识别提示 "),
      vue.createElementVNode("view", { class: "recognition-tips" }, [
        vue.createElementVNode("text", { class: "tips-title" }, "请将脸部放入框内"),
        vue.createElementVNode("text", { class: "tips-desc" }, "保持光线充足，面部清晰可见")
      ]),
      vue.createCommentVNode(" 操作按钮区域 "),
      vue.createElementVNode("view", { class: "action-buttons" }, [
        vue.createElementVNode("view", {
          class: "retake-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.retakePhoto && $options.retakePhoto(...args))
        }, [
          vue.createElementVNode("text", { class: "button-text" }, "重新拍摄")
        ]),
        vue.createElementVNode("view", {
          class: "confirm-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.confirmRecognition && $options.confirmRecognition(...args))
        }, [
          vue.createElementVNode("text", { class: "button-text" }, "确认识别")
        ])
      ]),
      vue.createCommentVNode(" 进度指示器 "),
      vue.createElementVNode("view", { class: "progress-indicator" }, [
        vue.createElementVNode("view", { class: "progress-bar" }, [
          vue.createElementVNode(
            "view",
            {
              class: "progress-fill",
              style: vue.normalizeStyle({ width: $data.progress + "%" })
            },
            null,
            4
            /* STYLE */
          )
        ]),
        vue.createElementVNode(
          "text",
          { class: "progress-text" },
          vue.toDisplayString($data.progress) + "%",
          1
          /* TEXT */
        )
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" }),
      vue.createCommentVNode(" 识别结果弹窗 "),
      $data.showResult ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "result-modal",
        onClick: _cache[4] || (_cache[4] = (...args) => $options.hideResult && $options.hideResult(...args))
      }, [
        vue.createElementVNode("view", {
          class: "modal-content",
          onClick: _cache[3] || (_cache[3] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["result-icon", $data.recognitionResult])
            },
            [
              $data.recognitionResult === "success" ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "success-icon"
              }, "✓")) : (vue.openBlock(), vue.createElementBlock("text", {
                key: 1,
                class: "error-icon"
              }, "✗"))
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "text",
            { class: "result-title" },
            vue.toDisplayString($data.resultTitle),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "text",
            { class: "result-desc" },
            vue.toDisplayString($data.resultDesc),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "result-actions" }, [
            vue.createElementVNode("view", {
              class: "action-button",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.hideResult && $options.hideResult(...args))
            }, [
              vue.createElementVNode("text", { class: "action-text" }, "确定")
            ])
          ])
        ])
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesVerificationFaceRecognition = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/face-recognition.vue"]]);
  const _sfc_main$h = {
    name: "VerificationCompletePage",
    data() {
      return {
        verificationType: "实名认证",
        verificationTime: "2024年8月20日 14:30",
        verificationStatus: "已认证",
        loading: true,
        verificationRecord: null,
        errorMessage: ""
      };
    },
    onLoad(options) {
      if (options.type) {
        this.verificationType = this.getCertTypeText(options.type);
      }
      this.loadVerificationRecord();
    },
    methods: {
      // 加载认证记录
      async loadVerificationRecord() {
        this.loading = true;
        try {
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            this.errorMessage = "用户未登录";
            this.loading = false;
            return;
          }
          const response = await this.getUserCertRecords(userId);
          if (response.data && response.data.length > 0) {
            this.verificationRecord = response.data[response.data.length - 1];
            this.updateVerificationInfo();
          } else {
            this.errorMessage = "未找到认证记录";
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/verification-complete.vue:164", "加载认证记录失败:", error);
          this.errorMessage = "加载认证记录失败";
        } finally {
          this.loading = false;
        }
      },
      // 获取用户认证记录
      getUserCertRecords(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: "http://localhost:8888/api/u-entities/user-cert-record/user/" + userId,
            method: "GET",
            timeout: 1e4,
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 更新认证信息显示
      updateVerificationInfo() {
        if (this.verificationRecord) {
          this.verificationType = this.getCertTypeText(this.verificationRecord.certType);
          const createTime = new Date(this.verificationRecord.createdAt);
          this.verificationTime = this.formatDateTime(createTime);
          this.verificationStatus = this.getStatusText(this.verificationRecord.status);
        }
      },
      // 获取认证类型文本
      getCertTypeText(certType) {
        const typeMap = {
          "REALNAME": "实名认证",
          "STUDENT": "学校认证",
          "JOB": "职业认证"
        };
        return typeMap[certType] || "未知认证";
      },
      // 获取状态文本
      getStatusText(status) {
        const statusMap = {
          0: "待审核",
          1: "已通过",
          2: "未通过"
        };
        return statusMap[status] || "未知状态";
      },
      // 格式化日期时间
      formatDateTime(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");
        return `${year}年${month}月${day}日 ${hours}:${minutes}`;
      },
      // 重试加载
      retryLoad() {
        this.loadVerificationRecord();
      },
      // 获取状态样式类
      getStatusClass() {
        if (!this.verificationRecord)
          return "status-pending";
        const status = this.verificationRecord.status;
        if (status === 1)
          return "status-success";
        if (status === 2)
          return "status-error";
        return "status-pending";
      },
      // 获取状态图标
      getStatusIcon() {
        if (!this.verificationRecord)
          return "?";
        const status = this.verificationRecord.status;
        if (status === 1)
          return "✓";
        if (status === 2)
          return "✗";
        return "⏳";
      },
      // 获取状态标题
      getStatusTitle() {
        if (!this.verificationRecord)
          return "认证处理中";
        const status = this.verificationRecord.status;
        if (status === 1)
          return "认证成功";
        if (status === 2)
          return "认证失败";
        return "认证处理中";
      },
      // 获取状态描述
      getStatusDesc() {
        if (!this.verificationRecord)
          return "您的认证申请正在处理中，请耐心等待";
        const status = this.verificationRecord.status;
        if (status === 1)
          return `恭喜您完成${this.verificationType}，现在可以享受更多平台服务`;
        if (status === 2)
          return "很抱歉，您的认证申请未通过，请检查信息后重新提交";
        return "您的认证申请正在审核中，我们会在1-3个工作日内完成审核";
      },
      // 获取状态徽章样式
      getStatusBadgeClass() {
        if (!this.verificationRecord)
          return "badge-pending";
        const status = this.verificationRecord.status;
        if (status === 1)
          return "badge-success";
        if (status === 2)
          return "badge-error";
        return "badge-pending";
      },
      // 获取认证详情
      getCertDetails() {
        if (!this.verificationRecord || !this.verificationRecord.certInfo)
          return "";
        try {
          const certInfo = JSON.parse(this.verificationRecord.certInfo);
          const certType = this.verificationRecord.certType;
          if (certType === "REALNAME") {
            return `${certInfo.name || ""} - ${certInfo.documentType || ""}`;
          } else if (certType === "STUDENT") {
            return `${certInfo.school || ""} - ${certInfo.degree || ""}`;
          } else if (certType === "JOB") {
            return `${certInfo.jobType || ""} - ${certInfo.jobName || ""}`;
          }
          return "认证详情";
        } catch (error) {
          formatAppLog("error", "at pages/verification/verification-complete.vue:300", "解析认证详情失败:", error);
          return "认证详情";
        }
      },
      goBack() {
        uni.navigateBack();
      },
      goToHome() {
        uni.navigateTo({
          url: "/pages/feed/content-feed"
        });
      },
      goToProfile() {
        uni.navigateTo({
          url: "/pages/feed/user-profile"
        });
      }
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "verification-complete-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 头部导航 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="page-title">认证完成</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "loading-section"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载认证信息...")
        ])) : $data.errorMessage ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createCommentVNode(" 错误状态 "),
            vue.createElementVNode("view", { class: "error-section" }, [
              vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
              vue.createElementVNode(
                "text",
                { class: "error-text" },
                vue.toDisplayString($data.errorMessage),
                1
                /* TEXT */
              ),
              vue.createElementVNode("view", {
                class: "retry-button",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.retryLoad && $options.retryLoad(...args))
              }, [
                vue.createElementVNode("text", { class: "retry-text" }, "重试")
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )) : (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createCommentVNode(" 成功状态 "),
            vue.createElementVNode("view", null, [
              vue.createCommentVNode(" 成功图标 "),
              vue.createElementVNode("view", { class: "success-icon" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["icon-circle", $options.getStatusClass()])
                  },
                  [
                    vue.createElementVNode(
                      "text",
                      { class: "checkmark" },
                      vue.toDisplayString($options.getStatusIcon()),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ]),
              vue.createCommentVNode(" 状态标题 "),
              vue.createElementVNode("view", { class: "status-title" }, [
                vue.createElementVNode(
                  "text",
                  { class: "title-text" },
                  vue.toDisplayString($options.getStatusTitle()),
                  1
                  /* TEXT */
                )
              ]),
              vue.createCommentVNode(" 成功描述 "),
              vue.createElementVNode("view", { class: "success-desc" }, [
                vue.createElementVNode(
                  "text",
                  { class: "desc-text" },
                  vue.toDisplayString($options.getStatusDesc()),
                  1
                  /* TEXT */
                )
              ]),
              vue.createCommentVNode(" 认证信息卡片 "),
              vue.createElementVNode("view", { class: "verification-info" }, [
                vue.createElementVNode("view", { class: "info-header" }, [
                  vue.createElementVNode("text", { class: "info-title" }, "认证信息")
                ]),
                vue.createElementVNode("view", { class: "info-content" }, [
                  vue.createElementVNode("view", { class: "info-item" }, [
                    vue.createElementVNode("text", { class: "item-label" }, "认证类型"),
                    vue.createElementVNode(
                      "text",
                      { class: "item-value" },
                      vue.toDisplayString($data.verificationType),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "info-item" }, [
                    vue.createElementVNode("text", { class: "item-label" }, "认证时间"),
                    vue.createElementVNode(
                      "text",
                      { class: "item-value" },
                      vue.toDisplayString($data.verificationTime),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "info-item" }, [
                    vue.createElementVNode("text", { class: "item-label" }, "认证状态"),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["status-badge", $options.getStatusBadgeClass()])
                      },
                      [
                        vue.createElementVNode(
                          "text",
                          { class: "status-text" },
                          vue.toDisplayString($data.verificationStatus),
                          1
                          /* TEXT */
                        )
                      ],
                      2
                      /* CLASS */
                    )
                  ]),
                  vue.createCommentVNode(" 认证详情 "),
                  $data.verificationRecord && $data.verificationRecord.certInfo ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "info-item"
                  }, [
                    vue.createElementVNode("text", { class: "item-label" }, "认证详情"),
                    vue.createElementVNode(
                      "text",
                      { class: "item-value" },
                      vue.toDisplayString($options.getCertDetails()),
                      1
                      /* TEXT */
                    )
                  ])) : vue.createCommentVNode("v-if", true)
                ])
              ])
            ])
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        )),
        vue.createCommentVNode(" 下一步提示 "),
        vue.createElementVNode("view", { class: "next-steps" }, [
          vue.createElementVNode("text", { class: "steps-title" }, "下一步您可以："),
          vue.createElementVNode("view", { class: "steps-list" }, [
            vue.createElementVNode("view", { class: "step-item" }, [
              vue.createElementVNode("view", { class: "step-icon" }, "1"),
              vue.createElementVNode("text", { class: "step-text" }, "完善个人资料")
            ]),
            vue.createElementVNode("view", { class: "step-item" }, [
              vue.createElementVNode("view", { class: "step-icon" }, "2"),
              vue.createElementVNode("text", { class: "step-text" }, "申请官方认证")
            ]),
            vue.createElementVNode("view", { class: "step-item" }, [
              vue.createElementVNode("view", { class: "step-icon" }, "3"),
              vue.createElementVNode("text", { class: "step-text" }, "开始使用平台服务")
            ])
          ])
        ])
      ]),
      vue.createCommentVNode(" 操作按钮 "),
      vue.createElementVNode("view", { class: "action-buttons" }, [
        vue.createElementVNode("view", {
          class: "primary-button",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToHome && $options.goToHome(...args))
        }, [
          vue.createElementVNode("text", { class: "button-text" }, "返回首页")
        ]),
        vue.createElementVNode("view", {
          class: "secondary-button",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToProfile && $options.goToProfile(...args))
        }, [
          vue.createElementVNode("text", { class: "button-text" }, "完善资料")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesVerificationVerificationComplete = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/verification-complete.vue"]]);
  const _sfc_main$g = {
    name: "CertificationFeedbackPage",
    data() {
      return {
        certificationType: "职业认证",
        // 或 '学校认证'
        submitTime: this.formatDateTime(/* @__PURE__ */ new Date()),
        expectedTime: this.formatExpectedTime(/* @__PURE__ */ new Date()),
        certRecords: [],
        // 认证记录列表
        loading: false,
        // 加载状态
        userId: null
        // 用户ID
      };
    },
    methods: {
      // 加载认证记录数据
      async loadCertRecords() {
        try {
          this.loading = true;
          const userId = uni.getStorageSync("userId");
          if (!userId) {
            uni.showToast({
              title: "请先登录",
              icon: "none"
            });
            return;
          }
          this.userId = userId;
          const response = await this.getUserCertRecords(userId);
          if (response && response.data) {
            this.certRecords = response.data;
          }
        } catch (error) {
          formatAppLog("error", "at pages/verification/certification-feedback.vue:173", "加载认证记录失败:", error);
          uni.showToast({
            title: "加载认证记录失败",
            icon: "none"
          });
        } finally {
          this.loading = false;
        }
      },
      // 获取用户认证记录
      getUserCertRecords(userId) {
        return new Promise((resolve, reject) => {
          uni.request({
            url: "http://localhost:8888/api/u-entities/user-cert-record/user/" + userId,
            method: "GET",
            timeout: 1e4,
            // 10秒超时
            success: (res) => {
              resolve(res);
            },
            fail: (err) => {
              reject(err);
            }
          });
        });
      },
      // 获取认证状态文本
      getStatusText(status) {
        switch (status) {
          case 0:
            return "待审核";
          case 1:
            return "已通过";
          case 2:
            return "未通过";
          default:
            return "未知状态";
        }
      },
      // 获取认证类型文本
      getCertTypeText(certType) {
        switch (certType) {
          case "REALNAME":
            return "实名认证";
          case "STUDENT":
            return "学校认证";
          case "JOB":
            return "职业认证";
          default:
            return "未知类型";
        }
      },
      // 获取状态颜色
      getStatusColor(status) {
        switch (status) {
          case 0:
            return "#FF9500";
          case 1:
            return "#34C759";
          case 2:
            return "#FF3B30";
          default:
            return "#8E8E93";
        }
      },
      goBack() {
        uni.redirectTo({
          url: "/pages/verification/official-certification"
        });
      },
      formatDateTime(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, "0");
        const day = date.getDate().toString().padStart(2, "0");
        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        return `${year}-${month}-${day} ${hours}:${minutes}`;
      },
      formatExpectedTime(date) {
        const expectedDate = new Date(date);
        let workDays = 0;
        while (workDays < 3) {
          expectedDate.setDate(expectedDate.getDate() + 1);
          if (expectedDate.getDay() !== 0 && expectedDate.getDay() !== 6) {
            workDays++;
          }
        }
        const year = expectedDate.getFullYear();
        const month = (expectedDate.getMonth() + 1).toString().padStart(2, "0");
        const day = expectedDate.getDate().toString().padStart(2, "0");
        return `${year}-${month}-${day}`;
      }
    },
    onLoad(options) {
      if (options.type) {
        if (options.type === "school") {
          this.certificationType = "学校认证";
        } else if (options.type === "realName") {
          this.certificationType = "实名认证";
        } else {
          this.certificationType = "职业认证";
        }
      }
      this.loadCertRecords();
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "certification-feedback-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">确认认证</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 成功图标 - 只在有真实记录时显示 "),
        $data.certRecords.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "success-icon-container"
        }, [
          vue.createElementVNode("view", { class: "success-icon" }, [
            vue.createElementVNode("view", { class: "checkmark" })
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 成功消息 "),
        vue.createElementVNode("view", { class: "success-message" }, [
          $data.certRecords.length > 0 ? (vue.openBlock(), vue.createElementBlock("text", {
            key: 0,
            class: "message-text"
          }, " 以下是您的认证记录 ")) : !$data.loading ? (vue.openBlock(), vue.createElementBlock("text", {
            key: 1,
            class: "message-text"
          }, " 暂无认证记录 ")) : vue.createCommentVNode("v-if", true)
        ]),
        vue.createCommentVNode(" 认证记录列表 "),
        $data.certRecords.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: "cert-records-section"
        }, [
          vue.createElementVNode("view", { class: "records-header" }, [
            vue.createElementVNode("view", { class: "records-icon" }, [
              vue.createElementVNode("view", { class: "list-icon" })
            ]),
            vue.createElementVNode("text", { class: "records-title" }, "我的认证记录")
          ]),
          vue.createElementVNode("view", { class: "records-list" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.certRecords, (record) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  key: record.recordId,
                  class: "record-item"
                }, [
                  vue.createElementVNode("view", { class: "record-header" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "record-type" },
                      vue.toDisplayString($options.getCertTypeText(record.certType)),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      {
                        class: "status-badge",
                        style: vue.normalizeStyle({ backgroundColor: $options.getStatusColor(record.status) })
                      },
                      [
                        vue.createElementVNode(
                          "text",
                          { class: "status-text" },
                          vue.toDisplayString($options.getStatusText(record.status)),
                          1
                          /* TEXT */
                        )
                      ],
                      4
                      /* STYLE */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "record-info" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "record-desc" },
                      vue.toDisplayString(record.certInfo || "暂无详细信息"),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "record-time" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "time-text" },
                      "提交时间：" + vue.toDisplayString($options.formatDateTime(record.createdAt)),
                      1
                      /* TEXT */
                    )
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 无认证记录提示 - 只在加载完成且没有记录时显示 "),
        !$data.loading && $data.certRecords.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "no-records-section"
        }, [
          vue.createElementVNode("view", { class: "no-records-icon" }, [
            vue.createElementVNode("view", { class: "empty-icon" })
          ]),
          vue.createElementVNode("text", { class: "no-records-text" }, "暂无认证记录")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 加载状态 "),
        $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 3,
          class: "loading-section"
        }, [
          vue.createElementVNode("view", { class: "loading-spinner" }),
          vue.createElementVNode("text", { class: "loading-text" }, "正在加载认证记录...")
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 温馨提示 "),
        vue.createElementVNode("view", { class: "tips-section" }, [
          vue.createElementVNode("view", { class: "tips-header" }, [
            vue.createElementVNode("view", { class: "tips-icon" }, [
              vue.createElementVNode("view", { class: "lightbulb" })
            ]),
            vue.createElementVNode("text", { class: "tips-title" }, "温馨提示")
          ]),
          vue.createElementVNode("view", { class: "tips-content" }, [
            vue.createElementVNode("text", { class: "tip-item" }, "• 认证期间请保持手机畅通，我们会及时通知您审核结果"),
            vue.createElementVNode("text", { class: "tip-item" }, "• 如有疑问，请联系客服获取帮助"),
            vue.createElementVNode("text", { class: "tip-item" }, "• 认证通过后，您的账号将获得相应标识")
          ])
        ])
      ]),
      vue.createCommentVNode(" 返回按钮 "),
      vue.createElementVNode("view", { class: "return-button-section" }, [
        vue.createElementVNode("view", {
          class: "return-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("text", { class: "return-text" }, "点击返回")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesVerificationCertificationFeedback = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/verification/certification-feedback.vue"]]);
  const _sfc_main$f = {
    data() {
      return {
        userId: 1000100,
        // 默认用户ID
        balance: 1e7,
        // 钱包余额
        loading: false,
        errorMessage: "",
        hasError: false
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
        formatAppLog("log", "at pages/wallet/wallet.vue:93", "钱包页面接收到用户ID:", this.userId);
      }
      this.loadWalletData();
    },
    methods: {
      // 加载钱包数据
      async loadWalletData() {
        try {
          formatAppLog("log", "at pages/wallet/wallet.vue:102", "=== 开始加载钱包数据 ===");
          formatAppLog("log", "at pages/wallet/wallet.vue:103", "用户ID:", this.userId);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/wallet/balance?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/wallet/wallet.vue:116", "=== 钱包余额API响应 ===");
          formatAppLog("log", "at pages/wallet/wallet.vue:117", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/wallet/wallet.vue:118", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const balanceData = response.data.data;
            this.balance = balanceData.currentBalance;
            formatAppLog("log", "at pages/wallet/wallet.vue:123", "成功加载钱包余额:", this.balance);
            uni.showToast({
              title: "钱包数据加载成功",
              icon: "success",
              duration: 1500
            });
          } else {
            formatAppLog("error", "at pages/wallet/wallet.vue:131", "加载钱包余额失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载钱包数据失败";
            uni.showToast({
              title: "加载钱包数据失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/wallet/wallet.vue:140", "加载钱包数据异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      goBack() {
        uni.navigateBack();
      },
      goToRecharge() {
        uni.navigateTo({
          url: `/pages/wallet/recharge?userId=${this.userId}`
        });
      },
      goToBill() {
        uni.navigateTo({
          url: `/pages/wallet/purchase-record?userId=${this.userId}`
        });
      },
      goToCustomerService() {
        uni.navigateTo({
          url: "/pages/chat/chat?friendName=客服"
        });
      },
      goToServiceTerms() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      // 格式化余额显示
      formatBalance(balance) {
        if (balance >= 1e4) {
          return (balance / 1e4).toFixed(1) + "wC";
        } else if (balance >= 1e3) {
          return (balance / 1e3).toFixed(1) + "kC";
        } else {
          return balance + "C";
        }
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view>\n			<text class="nav-title">钱包</text>\n		</view> '),
      vue.createCommentVNode(" 钱包选项列表 "),
      vue.createElementVNode("view", { class: "wallet-options" }, [
        vue.createCommentVNode(" 余额 "),
        vue.createElementVNode("view", { class: "option-item" }, [
          vue.createElementVNode("view", { class: "option-left" }, [
            vue.createElementVNode("view", { class: "option-icon balance-icon" }, "$"),
            vue.createElementVNode("text", { class: "option-text" }, "余额")
          ]),
          vue.createElementVNode(
            "text",
            { class: "balance-amount" },
            vue.toDisplayString($options.formatBalance($data.balance)),
            1
            /* TEXT */
          )
        ]),
        vue.createCommentVNode(" 充值 "),
        vue.createElementVNode("view", {
          class: "option-item",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goToRecharge && $options.goToRecharge(...args))
        }, [
          vue.createElementVNode("view", { class: "option-left" }, [
            vue.createElementVNode("view", { class: "option-icon recharge-icon" }, "💳"),
            vue.createElementVNode("text", { class: "option-text" }, "充值")
          ]),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ]),
        vue.createCommentVNode(" 账单 "),
        vue.createElementVNode("view", {
          class: "option-item",
          onClick: _cache[1] || (_cache[1] = (...args) => $options.goToBill && $options.goToBill(...args))
        }, [
          vue.createElementVNode("view", { class: "option-left" }, [
            vue.createElementVNode("view", { class: "option-icon bill-icon" }, "📄"),
            vue.createElementVNode("text", { class: "option-text" }, "账单")
          ]),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ]),
        vue.createCommentVNode(" 客服与支持 "),
        vue.createElementVNode("view", {
          class: "option-item",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.goToCustomerService && $options.goToCustomerService(...args))
        }, [
          vue.createElementVNode("view", { class: "option-left" }, [
            vue.createElementVNode("view", { class: "option-icon service-icon" }, "🎧"),
            vue.createElementVNode("text", { class: "option-text" }, "客服与支持")
          ]),
          vue.createElementVNode("text", { class: "arrow" }, "›")
        ])
      ]),
      vue.createCommentVNode(" 底部服务条款 "),
      vue.createElementVNode("view", { class: "bottom-section" }, [
        vue.createElementVNode("text", {
          class: "service-terms",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.goToServiceTerms && $options.goToServiceTerms(...args))
        }, "服务条款")
      ])
    ]);
  }
  const PagesWalletWallet = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/wallet/wallet.vue"]]);
  const _sfc_main$e = {
    data() {
      return {
        userId: 1000100,
        // 默认用户ID
        rechargeAmount: "10086",
        ccoinAmount: "1008600",
        balance: 1e7,
        // 当前余额
        loading: false,
        errorMessage: "",
        hasError: false,
        // 充值记录数据
        rechargeRecords: [],
        // 支付方式列表
        paymentMethods: [
          { id: "wechat", name: "微信支付", icon: "💚" },
          { id: "alipay", name: "支付宝", icon: "💙" },
          { id: "unionpay", name: "银联支付", icon: "💛" }
        ]
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
        formatAppLog("log", "at pages/wallet/recharge.vue:137", "充值页面接收到用户ID:", this.userId);
      }
      this.loadWalletData();
      this.loadRechargeRecords();
    },
    methods: {
      // 加载钱包数据
      async loadWalletData() {
        try {
          formatAppLog("log", "at pages/wallet/recharge.vue:147", "=== 开始加载钱包数据 ===");
          formatAppLog("log", "at pages/wallet/recharge.vue:148", "用户ID:", this.userId);
          const response = await uni.request({
            url: `http://localhost:8888/api/wallet/balance?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/wallet/recharge.vue:158", "=== 钱包余额API响应 ===");
          formatAppLog("log", "at pages/wallet/recharge.vue:159", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/wallet/recharge.vue:160", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            const balanceData = response.data.data;
            this.balance = balanceData.currentBalance;
            formatAppLog("log", "at pages/wallet/recharge.vue:165", "成功加载钱包余额:", this.balance);
          } else {
            formatAppLog("error", "at pages/wallet/recharge.vue:167", "加载钱包余额失败:", response.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/wallet/recharge.vue:170", "加载钱包数据异常:", error);
        }
      },
      // 加载充值记录
      async loadRechargeRecords() {
        try {
          formatAppLog("log", "at pages/wallet/recharge.vue:177", "=== 开始加载充值记录 ===");
          formatAppLog("log", "at pages/wallet/recharge.vue:178", "用户ID:", this.userId);
          const response = await uni.request({
            url: `http://localhost:8888/api/wallet/recharge-records?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/wallet/recharge.vue:188", "=== 充值记录API响应 ===");
          formatAppLog("log", "at pages/wallet/recharge.vue:189", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/wallet/recharge.vue:190", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            this.rechargeRecords = response.data.data;
            formatAppLog("log", "at pages/wallet/recharge.vue:194", "成功加载充值记录，共", this.rechargeRecords.length, "条");
          } else {
            formatAppLog("error", "at pages/wallet/recharge.vue:196", "加载充值记录失败:", response.data.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/wallet/recharge.vue:199", "加载充值记录异常:", error);
        }
      },
      goBack() {
        uni.navigateBack();
      },
      calculateCCoins() {
        if (this.rechargeAmount && !isNaN(this.rechargeAmount)) {
          this.ccoinAmount = (parseInt(this.rechargeAmount) * 100).toString();
        } else {
          this.ccoinAmount = "0";
        }
      },
      // 充值方法
      doRecharge() {
        if (!this.rechargeAmount || isNaN(this.rechargeAmount) || parseInt(this.rechargeAmount) <= 0) {
          uni.showToast({
            title: "请输入有效的充值金额",
            icon: "none"
          });
          return;
        }
        this.showPaymentMethodDialog();
      },
      // 显示支付方式选择弹窗
      showPaymentMethodDialog() {
        uni.showActionSheet({
          itemList: this.paymentMethods.map((item) => `${item.icon} ${item.name}`),
          success: (res) => {
            const selectedMethod = this.paymentMethods[res.tapIndex];
            this.processPayment(selectedMethod);
          },
          fail: () => {
            formatAppLog("log", "at pages/wallet/recharge.vue:237", "用户取消选择支付方式");
          }
        });
      },
      // 处理支付
      async processPayment(paymentMethod) {
        try {
          uni.showLoading({
            title: "正在跳转支付..."
          });
          await new Promise((resolve) => setTimeout(resolve, 1500));
          uni.hideLoading();
          this.handlePaymentSuccess(paymentMethod);
        } catch (error) {
          uni.hideLoading();
          uni.showToast({
            title: "支付跳转失败",
            icon: "none"
          });
        }
      },
      // 处理支付成功
      async handlePaymentSuccess(paymentMethod) {
        try {
          uni.showModal({
            title: "充值成功",
            content: `已成功充值${this.rechargeAmount}元，获得${this.ccoinAmount}C`,
            showCancel: false,
            confirmText: "确定",
            success: async () => {
              await this.submitRechargeInfo(paymentMethod);
              this.updateRechargeRecord();
              this.rechargeAmount = "";
              this.ccoinAmount = "0";
            }
          });
        } catch (error) {
          formatAppLog("error", "at pages/wallet/recharge.vue:291", "处理支付成功失败:", error);
        }
      },
      // 提交充值信息到后端
      async submitRechargeInfo(paymentMethod) {
        try {
          formatAppLog("log", "at pages/wallet/recharge.vue:298", "=== 开始提交充值信息到后端 ===");
          formatAppLog("log", "at pages/wallet/recharge.vue:299", "用户ID:", this.userId);
          formatAppLog("log", "at pages/wallet/recharge.vue:300", "充值金额:", this.rechargeAmount);
          formatAppLog("log", "at pages/wallet/recharge.vue:301", "支付方式:", paymentMethod);
          const response = await uni.request({
            url: "http://localhost:8888/api/wallet/recharge",
            method: "POST",
            data: {
              userId: this.userId,
              amount: parseFloat(this.rechargeAmount),
              paymentMethod: paymentMethod.id
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/wallet/recharge.vue:316", "=== 充值API响应 ===");
          formatAppLog("log", "at pages/wallet/recharge.vue:317", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/wallet/recharge.vue:318", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            formatAppLog("log", "at pages/wallet/recharge.vue:321", "充值信息提交成功:", response.data);
            this.balance = response.data.newBalance;
            await this.loadRechargeRecords();
            uni.showToast({
              title: "充值成功",
              icon: "success",
              duration: 2e3
            });
          } else {
            throw new Error(response.data.message || "充值失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/wallet/recharge.vue:339", "提交充值信息失败:", error);
          uni.showToast({
            title: "充值信息提交失败: " + error.message,
            icon: "none"
          });
        }
      },
      // 更新充值记录
      updateRechargeRecord() {
        const newRecord = {
          id: this.rechargeRecords.length + 1,
          amount: `+${this.ccoinAmount}C`,
          time: this.formatDateTime(/* @__PURE__ */ new Date()),
          orderNumber: this.generateOrderNumber()
        };
        this.rechargeRecords.unshift(newRecord);
        formatAppLog("log", "at pages/wallet/recharge.vue:361", "充值记录已更新:", newRecord);
      },
      // 生成订单号
      generateOrderNumber() {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substr(2, 9);
        return `ORDER${timestamp}${random}`.toUpperCase();
      },
      // 格式化日期时间
      formatDateTime(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");
        return `${year}/${month}/${day} ${hours}:${minutes}`;
      },
      goToServiceAgreement() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToMinorRefund() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToServiceTerms() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      // 格式化余额显示
      formatBalance(balance) {
        if (balance >= 1e4) {
          return (balance / 1e4).toFixed(1) + "wC";
        } else if (balance >= 1e3) {
          return (balance / 1e3).toFixed(1) + "kC";
        } else {
          return balance + "C";
        }
      }
    },
    mounted() {
      this.calculateCCoins();
    }
  };
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view>\n			<text class="nav-title">充值</text>\n		</view> '),
      vue.createCommentVNode(" 账户余额 "),
      vue.createElementVNode("view", { class: "balance-section" }, [
        vue.createElementVNode("view", { class: "balance-item" }, [
          vue.createElementVNode("view", { class: "balance-left" }, [
            vue.createElementVNode("view", { class: "balance-icon" }, "$"),
            vue.createElementVNode("text", { class: "balance-text" }, "余额")
          ]),
          vue.createElementVNode(
            "text",
            { class: "balance-amount" },
            vue.toDisplayString($options.formatBalance($data.balance)),
            1
            /* TEXT */
          )
        ])
      ]),
      vue.createCommentVNode(" 充值选项 "),
      vue.createElementVNode("view", { class: "recharge-section" }, [
        vue.createElementVNode("view", { class: "recharge-item" }, [
          vue.createElementVNode("view", { class: "recharge-left" }, [
            vue.createElementVNode("view", { class: "recharge-icon" }, "💳"),
            vue.createElementVNode("text", { class: "recharge-text" }, "充值")
          ])
        ])
      ]),
      vue.createCommentVNode(" 充值输入区域 "),
      vue.createElementVNode("view", { class: "input-section" }, [
        vue.createCommentVNode(" 汇率 "),
        vue.createElementVNode("view", { class: "exchange-rate" }, "100C=1元"),
        vue.createCommentVNode(" 自定义充值金额 "),
        vue.createElementVNode("view", { class: "custom-amount" }, [
          vue.createElementVNode("text", { class: "custom-label" }, "自定义充值金额:"),
          vue.createElementVNode("view", { class: "amount-input-container" }, [
            vue.withDirectives(vue.createElementVNode(
              "input",
              {
                class: "amount-input",
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.rechargeAmount = $event),
                type: "number",
                placeholder: "10086",
                onInput: _cache[1] || (_cache[1] = (...args) => $options.calculateCCoins && $options.calculateCCoins(...args))
              },
              null,
              544
              /* NEED_HYDRATION, NEED_PATCH */
            ), [
              [vue.vModelText, $data.rechargeAmount]
            ])
          ]),
          vue.createElementVNode(
            "view",
            { class: "ccoin-equivalent" },
            "= " + vue.toDisplayString($data.ccoinAmount) + "C",
            1
            /* TEXT */
          )
        ]),
        vue.createCommentVNode(" 充值按钮 "),
        vue.createElementVNode("view", {
          class: "recharge-button",
          onClick: _cache[2] || (_cache[2] = (...args) => $options.doRecharge && $options.doRecharge(...args))
        }, [
          vue.createElementVNode(
            "text",
            { class: "recharge-button-text" },
            "立即充值" + vue.toDisplayString($data.rechargeAmount) + "元",
            1
            /* TEXT */
          )
        ]),
        vue.createCommentVNode(" 协议文本 "),
        vue.createElementVNode("view", { class: "agreement-text" }, [
          vue.createTextVNode(" ●充值则表示您同意 "),
          vue.createElementVNode("text", {
            class: "agreement-link",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.goToServiceAgreement && $options.goToServiceAgreement(...args))
          }, "《AFriends充值服务协议》"),
          vue.createElementVNode("text", {
            class: "agreement-link",
            onClick: _cache[4] || (_cache[4] = (...args) => $options.goToMinorRefund && $options.goToMinorRefund(...args))
          }, "《未成年人退款申请》")
        ])
      ]),
      vue.createCommentVNode(" 充值记录 "),
      vue.createElementVNode("view", { class: "record-section" }, [
        vue.createElementVNode("view", { class: "record-header" }, [
          vue.createElementVNode("view", { class: "record-left" }, [
            vue.createElementVNode("view", { class: "record-icon" }, "📄"),
            vue.createElementVNode("text", { class: "record-text" }, "充值记录")
          ])
        ]),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.rechargeRecords, (record) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "record-item",
              key: record.id
            }, [
              vue.createElementVNode(
                "view",
                { class: "record-amount" },
                vue.toDisplayString(record.amountFormatted),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                { class: "record-time" },
                vue.toDisplayString(record.timeAgo),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                { class: "order-number" },
                "订单号: " + vue.toDisplayString(record.orderNumber),
                1
                /* TEXT */
              )
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 底部服务条款 "),
      vue.createElementVNode("view", { class: "bottom-section" }, [
        vue.createElementVNode("text", {
          class: "service-terms",
          onClick: _cache[5] || (_cache[5] = (...args) => $options.goToServiceTerms && $options.goToServiceTerms(...args))
        }, "服务条款")
      ]),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createCommentVNode(' <view class="home-indicator"></view> ')
    ]);
  }
  const PagesWalletRecharge = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/wallet/recharge.vue"]]);
  const _sfc_main$d = {
    data() {
      return {
        userId: 1000100,
        // 默认用户ID
        purchaseRecords: [],
        // 购买记录数据
        loading: false,
        errorMessage: "",
        hasError: false
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
        formatAppLog("log", "at pages/wallet/purchase-record.vue:92", "购买记录页面接收到用户ID:", this.userId);
      }
      this.loadPurchaseRecords();
    },
    methods: {
      // 加载购买记录数据
      async loadPurchaseRecords() {
        try {
          formatAppLog("log", "at pages/wallet/purchase-record.vue:101", "=== 开始加载购买记录数据 ===");
          formatAppLog("log", "at pages/wallet/purchase-record.vue:102", "用户ID:", this.userId);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: `http://localhost:8888/api/wallet/purchase-records?userId=${this.userId}`,
            method: "GET",
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/wallet/purchase-record.vue:115", "=== 购买记录API响应 ===");
          formatAppLog("log", "at pages/wallet/purchase-record.vue:116", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/wallet/purchase-record.vue:117", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            this.purchaseRecords = response.data.data;
            formatAppLog("log", "at pages/wallet/purchase-record.vue:121", "成功加载购买记录，共", this.purchaseRecords.length, "条");
            if (this.purchaseRecords.length === 0) {
              this.hasError = true;
              this.errorMessage = "暂无购买记录";
              formatAppLog("log", "at pages/wallet/purchase-record.vue:126", "没有获取到任何购买记录");
            } else {
              uni.showToast({
                title: `加载了${this.purchaseRecords.length}条购买记录`,
                icon: "success",
                duration: 2e3
              });
            }
          } else {
            formatAppLog("error", "at pages/wallet/purchase-record.vue:135", "加载购买记录失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "加载购买记录失败";
            uni.showToast({
              title: "加载购买记录失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/wallet/purchase-record.vue:144", "加载购买记录异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      }
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button">\n				<text class="back-arrow">‹</text>\n			</view>\n			<view class="title">购买记录</view>\n			<view class="search-button">\n				<text class="search-icon">🔍</text>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 加载状态 "),
      $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "loading-container"
      }, [
        vue.createElementVNode("text", { class: "loading-text" }, "正在加载购买记录...")
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 错误状态 "),
      $data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "error-container"
      }, [
        vue.createElementVNode("view", { class: "error-icon" }, "⚠️"),
        vue.createElementVNode(
          "text",
          { class: "error-text" },
          vue.toDisplayString($data.errorMessage),
          1
          /* TEXT */
        ),
        vue.createElementVNode("view", { class: "error-actions" }, [
          vue.createElementVNode("button", {
            class: "retry-button",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.loadPurchaseRecords && $options.loadPurchaseRecords(...args))
          }, "重新加载")
        ])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 交易记录列表 "),
      !$data.hasError && !$data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "transaction-list"
      }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.purchaseRecords, (record) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: "transaction-item",
              key: record.id
            }, [
              vue.createElementVNode("view", { class: "left-section" }, [
                vue.createElementVNode("view", { class: "avatar" }, [
                  vue.createElementVNode("view", { class: "cartoon-creature" }, [
                    vue.createElementVNode("view", { class: "eyes" }, [
                      vue.createElementVNode("view", { class: "eye eye-left" }),
                      vue.createElementVNode("view", { class: "eye eye-right" })
                    ]),
                    vue.createElementVNode("view", { class: "mouth" })
                  ])
                ]),
                vue.createElementVNode("view", { class: "transaction-info" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "item-name" },
                    vue.toDisplayString(record.itemName),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "transaction-time" },
                    vue.toDisplayString(record.timeAgo),
                    1
                    /* TEXT */
                  )
                ])
              ]),
              vue.createElementVNode("view", { class: "right-section" }, [
                vue.createElementVNode(
                  "text",
                  { class: "amount" },
                  vue.toDisplayString(record.amountFormatted),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  { class: "balance" },
                  vue.toDisplayString(record.balanceFormatted),
                  1
                  /* TEXT */
                )
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 底部手势条 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesWalletPurchaseRecord = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/wallet/purchase-record.vue"]]);
  const _sfc_main$c = {
    data() {
      return {
        reportReasons: [
          "色情低俗",
          "政治敏感",
          "诈骗信息",
          "种族歧视",
          "攻击谩骂",
          "网络暴力",
          "站外引流",
          "违法违规",
          "涉未成年人",
          "其他违规"
        ],
        selectedReason: -1,
        userId: 1000100,
        reportedUserId: null,
        contentId: null,
        contentType: null
      };
    },
    onLoad(options) {
      if (options.userId) {
        this.userId = parseInt(options.userId);
      }
      if (options.reportedUserId) {
        this.reportedUserId = parseInt(options.reportedUserId);
      }
      if (options.contentId) {
        this.contentId = parseInt(options.contentId);
      }
      if (options.contentType) {
        this.contentType = options.contentType;
      }
    },
    methods: {
      selectReason(index) {
        this.selectedReason = index;
      },
      goToNext() {
        if (this.selectedReason === -1) {
          uni.showToast({
            title: "请选择举报原因",
            icon: "none"
          });
          return;
        }
        const params = {
          reason: encodeURIComponent(this.reportReasons[this.selectedReason]),
          userId: this.userId
        };
        if (this.reportedUserId) {
          params.reportedUserId = this.reportedUserId;
        }
        if (this.contentId) {
          params.contentId = this.contentId;
        }
        if (this.contentType) {
          params.contentType = this.contentType;
        }
        const queryString = Object.keys(params).map((key) => `${key}=${params[key]}`).join("&");
        formatAppLog("log", "at pages/report/report.vue:130", "跳转到举报证据页面，参数:", params);
        uni.navigateTo({
          url: `/pages/report/report-evidence?${queryString}`
        });
      },
      goBack() {
        uni.navigateBack();
      }
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button" @click="goBack">\n				<text class="back-arrow"></text>\n			</view>\n			<text class="nav-title">举报</text>\n		</view> '),
      vue.createCommentVNode(" 说明横幅 "),
      vue.createElementVNode("view", { class: "instruction-banner" }, [
        vue.createElementVNode("text", { class: "instruction-text" }, "请选择最符合的举报原因,帮助我们准确处理")
      ]),
      vue.createCommentVNode(" 举报原因列表 "),
      vue.createElementVNode("view", { class: "report-reasons" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.reportReasons, (reason, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: vue.normalizeClass(["reason-item", { "selected": $data.selectedReason === index }]),
              key: index,
              onClick: ($event) => $options.selectReason(index)
            }, [
              vue.createElementVNode(
                "text",
                { class: "reason-text" },
                vue.toDisplayString(reason),
                1
                /* TEXT */
              ),
              $data.selectedReason === index ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "check-icon"
              }, "✓")) : vue.createCommentVNode("v-if", true)
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 下一步按钮 "),
      vue.createElementVNode("view", {
        class: "next-button",
        onClick: _cache[0] || (_cache[0] = (...args) => $options.goToNext && $options.goToNext(...args))
      }, [
        vue.createElementVNode("text", { class: "next-text" }, "下一步")
      ])
    ]);
  }
  const PagesReportReport = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/report/report.vue"]]);
  const _sfc_main$b = {
    data() {
      return {
        selectedReason: "色情低俗",
        descriptionText: "",
        charCount: 0,
        uploadedImages: [],
        userId: 1000100,
        reportedUserId: null,
        contentId: null,
        contentType: null,
        categoryId: 1,
        loading: false,
        hasError: false,
        errorMessage: ""
      };
    },
    onLoad(options) {
      if (options.reason) {
        this.selectedReason = options.reason;
      }
      if (options.userId) {
        this.userId = parseInt(options.userId);
      }
      if (options.reportedUserId) {
        this.reportedUserId = parseInt(options.reportedUserId);
      }
      if (options.contentId) {
        this.contentId = parseInt(options.contentId);
      }
      if (options.contentType) {
        this.contentType = options.contentType;
      }
      this.categoryId = this.getCategoryIdByReason(this.selectedReason);
    },
    methods: {
      goBack() {
        uni.navigateBack();
      },
      updateCharCount(event) {
        this.charCount = event.detail.value.length;
      },
      uploadImage() {
        uni.chooseImage({
          count: 9 - this.uploadedImages.length,
          success: (res) => {
            this.uploadedImages = this.uploadedImages.concat(res.tempFilePaths);
          }
        });
      },
      deleteImage(index) {
        this.uploadedImages.splice(index, 1);
      },
      async submitReport() {
        if (!this.descriptionText.trim()) {
          uni.showToast({
            title: "请填写举报描述",
            icon: "none"
          });
          return;
        }
        try {
          formatAppLog("log", "at pages/report/report-evidence.vue:161", "=== 开始提交举报 ===");
          formatAppLog("log", "at pages/report/report-evidence.vue:162", "用户ID:", this.userId);
          formatAppLog("log", "at pages/report/report-evidence.vue:163", "被举报用户ID:", this.reportedUserId);
          formatAppLog("log", "at pages/report/report-evidence.vue:164", "内容ID:", this.contentId);
          formatAppLog("log", "at pages/report/report-evidence.vue:165", "内容类型:", this.contentType);
          formatAppLog("log", "at pages/report/report-evidence.vue:166", "举报类别ID:", this.categoryId);
          formatAppLog("log", "at pages/report/report-evidence.vue:167", "举报描述:", this.descriptionText);
          formatAppLog("log", "at pages/report/report-evidence.vue:168", "证据图片:", this.uploadedImages);
          this.loading = true;
          this.hasError = false;
          this.errorMessage = "";
          const response = await uni.request({
            url: "http://localhost:8888/api/report/submit",
            method: "POST",
            data: {
              userId: this.userId,
              reportedUserId: this.reportedUserId,
              contentId: this.contentId,
              contentType: this.contentType,
              categoryId: this.categoryId,
              description: this.descriptionText,
              evidenceImg: JSON.stringify(this.uploadedImages)
            },
            header: {
              "Content-Type": "application/json"
            }
          });
          formatAppLog("log", "at pages/report/report-evidence.vue:191", "=== 举报API响应详情 ===");
          formatAppLog("log", "at pages/report/report-evidence.vue:192", "状态码:", response.statusCode);
          formatAppLog("log", "at pages/report/report-evidence.vue:193", "响应数据:", response.data);
          if (response.statusCode === 200 && response.data.success) {
            formatAppLog("log", "at pages/report/report-evidence.vue:196", "举报提交成功");
            uni.showToast({
              title: "举报提交成功",
              icon: "success"
            });
            setTimeout(() => {
              uni.navigateTo({
                url: `/pages/report/report-feedback?type=${encodeURIComponent(this.selectedReason)}&reportId=${response.data.reportId}`
              });
            }, 1500);
          } else {
            formatAppLog("error", "at pages/report/report-evidence.vue:210", "举报提交失败:", response.data.message);
            this.hasError = true;
            this.errorMessage = response.data.message || "举报提交失败";
            uni.showToast({
              title: response.data.message || "举报提交失败",
              icon: "error"
            });
          }
        } catch (error) {
          formatAppLog("error", "at pages/report/report-evidence.vue:219", "举报提交异常:", error);
          this.hasError = true;
          this.errorMessage = "网络连接失败，请检查网络设置";
          uni.showToast({
            title: "网络错误",
            icon: "error"
          });
        } finally {
          this.loading = false;
        }
      },
      // 根据举报原因获取类别ID
      getCategoryIdByReason(reason) {
        const reasonMap = {
          "色情低俗": 1,
          "政治敏感": 2,
          "诈骗信息": 3,
          "种族歧视": 4,
          "攻击谩骂": 5,
          "网络暴力": 6,
          "站外引流": 7,
          "违法违规": 8,
          "涉未成年人": 9,
          "其他违规": 10
        };
        return reasonMap[reason] || 10;
      }
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">9:41</text>\n			<view class="status-icons">\n				<view class="signal">\n					<view class="bar bar-1"></view>\n					<view class="bar bar-2"></view>\n					<view class="bar bar-3"></view>\n					<view class="bar bar-4"></view>\n				</view>\n				<view class="wifi">📶</view>\n				<view class="battery">\n					<view class="battery-body">\n						<view class="battery-level"></view>\n					</view>\n					<view class="battery-tip"></view>\n				</view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="nav-bar">\n			<view class="back-button" @click="goBack">\n				<text class="back-arrow">‹</text>\n			</view>\n			<text class="nav-title">举报证据</text>\n		</view> '),
      vue.createCommentVNode(" 说明横幅 "),
      vue.createElementVNode("view", { class: "instruction-banner" }, [
        vue.createElementVNode("text", { class: "instruction-text" }, "请详细填写举报描述及图片证据")
      ]),
      vue.createCommentVNode(" 举报理由 "),
      vue.createElementVNode("view", { class: "content-section" }, [
        vue.createElementVNode("view", { class: "section-header" }, [
          vue.createElementVNode("text", { class: "section-label" }, "举报理由"),
          vue.createElementVNode(
            "text",
            { class: "selected-reason" },
            vue.toDisplayString($data.selectedReason),
            1
            /* TEXT */
          )
        ])
      ]),
      vue.createCommentVNode(" 举报描述 "),
      vue.createElementVNode("view", { class: "content-section" }, [
        vue.createElementVNode("view", { class: "section-header" }, [
          vue.createElementVNode("text", { class: "section-label" }, "举报描述")
        ]),
        vue.createElementVNode("view", { class: "description-container" }, [
          vue.withDirectives(vue.createElementVNode(
            "textarea",
            {
              class: "description-input",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.descriptionText = $event),
              maxlength: 400,
              placeholder: "请详细填写,以提高举报通过率",
              onInput: _cache[1] || (_cache[1] = (...args) => $options.updateCharCount && $options.updateCharCount(...args))
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.descriptionText]
          ]),
          vue.createElementVNode(
            "view",
            { class: "char-count" },
            vue.toDisplayString($data.charCount) + "/400",
            1
            /* TEXT */
          )
        ])
      ]),
      vue.createCommentVNode(" 图片证据 "),
      vue.createElementVNode("view", { class: "content-section" }, [
        vue.createElementVNode("view", { class: "section-header" }, [
          vue.createElementVNode("text", { class: "section-label" }, "图片证据"),
          vue.createElementVNode("text", { class: "upload-limit" }, "最多上传9张")
        ]),
        vue.createElementVNode("view", { class: "image-upload-container" }, [
          vue.createElementVNode("view", {
            class: "upload-button",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.uploadImage && $options.uploadImage(...args))
          }, [
            vue.createElementVNode("text", { class: "plus-icon" }, "+")
          ]),
          $data.uploadedImages.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "uploaded-images"
          }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($data.uploadedImages, (image, index) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "image-item",
                  key: index
                }, [
                  vue.createElementVNode("image", {
                    src: image,
                    class: "uploaded-image"
                  }, null, 8, ["src"]),
                  vue.createElementVNode("view", {
                    class: "delete-button",
                    onClick: ($event) => $options.deleteImage(index)
                  }, "×", 8, ["onClick"])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])) : vue.createCommentVNode("v-if", true)
        ])
      ]),
      vue.createCommentVNode(" 提交说明 "),
      vue.createElementVNode("view", { class: "submit-info" }, [
        vue.createElementVNode("text", { class: "info-text" }, "提交后信息将发送给平台审核,结果将在三个工作日内发送至系统消息")
      ]),
      vue.createCommentVNode(" 提交按钮 "),
      vue.createElementVNode("view", {
        class: "submit-button",
        onClick: _cache[3] || (_cache[3] = (...args) => $options.submitReport && $options.submitReport(...args))
      }, [
        vue.createElementVNode("text", { class: "submit-text" }, "提交")
      ])
    ]);
  }
  const PagesReportReportEvidence = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/report/report-evidence.vue"]]);
  const _sfc_main$a = {
    name: "ReportFeedbackPage",
    data() {
      return {
        reportType: "色情低俗",
        // 从上一页传递过来的举报类型
        reportId: null,
        // 举报记录ID
        submitTime: this.formatDateTime(/* @__PURE__ */ new Date()),
        expectedTime: this.formatExpectedTime(/* @__PURE__ */ new Date())
      };
    },
    methods: {
      goBack() {
        uni.navigateBack({
          delta: 2
        });
      },
      formatDateTime(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, "0");
        const day = date.getDate().toString().padStart(2, "0");
        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        return `${year}-${month}-${day} ${hours}:${minutes}`;
      },
      formatExpectedTime(date) {
        const expectedDate = new Date(date);
        let workDays = 0;
        while (workDays < 3) {
          expectedDate.setDate(expectedDate.getDate() + 1);
          if (expectedDate.getDay() !== 0 && expectedDate.getDay() !== 6) {
            workDays++;
          }
        }
        const year = expectedDate.getFullYear();
        const month = (expectedDate.getMonth() + 1).toString().padStart(2, "0");
        const day = expectedDate.getDate().toString().padStart(2, "0");
        return `${year}-${month}-${day}`;
      }
    },
    onLoad(options) {
      if (options.type) {
        this.reportType = decodeURIComponent(options.type);
      }
      if (options.reportId) {
        this.reportId = parseInt(options.reportId);
      }
    }
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "report-feedback-page" }, [
      vue.createCommentVNode(" 状态栏 "),
      vue.createCommentVNode(' <view class="status-bar">\n			<text class="time">12:00</text>\n			<view class="status-icons">\n				<view class="signal"></view>\n				<view class="wifi"></view>\n				<view class="battery"></view>\n			</view>\n		</view> '),
      vue.createCommentVNode(" 导航栏 "),
      vue.createCommentVNode(' <view class="header">\n			<view class="back-button" @click="goBack">\n				<view class="back-arrow"></view>\n			</view>\n			<text class="title">举报反馈</text>\n			<view class="placeholder"></view>\n		</view> '),
      vue.createCommentVNode(" 主要内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 成功图标 "),
        vue.createElementVNode("view", { class: "success-icon-container" }, [
          vue.createElementVNode("view", { class: "success-icon" }, [
            vue.createElementVNode("view", { class: "checkmark" })
          ])
        ]),
        vue.createCommentVNode(" 成功消息 "),
        vue.createElementVNode("view", { class: "success-message" }, [
          vue.createElementVNode("text", { class: "message-text" }, "举报已提交成功，我们将在3个工作日内处理")
        ]),
        vue.createCommentVNode(" 举报信息卡片 "),
        vue.createElementVNode("view", { class: "report-card" }, [
          vue.createElementVNode("view", { class: "card-header" }, [
            vue.createElementVNode("view", { class: "card-icon" }, [
              vue.createElementVNode("view", { class: "report-icon" })
            ]),
            vue.createElementVNode("text", { class: "card-title" }, "举报信息")
          ]),
          vue.createElementVNode("view", { class: "card-content" }, [
            vue.createElementVNode("view", { class: "info-row" }, [
              vue.createElementVNode("text", { class: "info-label" }, "举报类型"),
              vue.createElementVNode(
                "text",
                { class: "info-value" },
                vue.toDisplayString($data.reportType),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "info-row" }, [
              vue.createElementVNode("text", { class: "info-label" }, "提交时间"),
              vue.createElementVNode(
                "text",
                { class: "info-value" },
                vue.toDisplayString($data.submitTime),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "info-row" }, [
              vue.createElementVNode("text", { class: "info-label" }, "处理状态"),
              vue.createElementVNode("text", { class: "info-value status-pending" }, "待审核")
            ]),
            vue.createElementVNode("view", { class: "info-row" }, [
              vue.createElementVNode("text", { class: "info-label" }, "预计完成"),
              vue.createElementVNode(
                "text",
                { class: "info-value" },
                vue.toDisplayString($data.expectedTime),
                1
                /* TEXT */
              )
            ])
          ])
        ]),
        vue.createCommentVNode(" 温馨提示 "),
        vue.createElementVNode("view", { class: "tips-section" }, [
          vue.createElementVNode("view", { class: "tips-header" }, [
            vue.createElementVNode("view", { class: "tips-icon" }, [
              vue.createElementVNode("view", { class: "lightbulb" })
            ]),
            vue.createElementVNode("text", { class: "tips-title" }, "温馨提示")
          ]),
          vue.createElementVNode("view", { class: "tips-content" }, [
            vue.createElementVNode("text", { class: "tip-item" }, "• 举报处理结果将通过系统消息通知您"),
            vue.createElementVNode("text", { class: "tip-item" }, "• 如发现紧急违规内容，请及时联系客服"),
            vue.createElementVNode("text", { class: "tip-item" }, "• 感谢您为维护平台环境做出的贡献")
          ])
        ])
      ]),
      vue.createCommentVNode(" 返回按钮 "),
      vue.createElementVNode("view", { class: "return-button-section" }, [
        vue.createElementVNode("view", {
          class: "return-button",
          onClick: _cache[0] || (_cache[0] = (...args) => $options.goBack && $options.goBack(...args))
        }, [
          vue.createElementVNode("text", { class: "return-text" }, "点击返回")
        ])
      ]),
      vue.createCommentVNode(" 底部指示器 "),
      vue.createElementVNode("view", { class: "home-indicator" })
    ]);
  }
  const PagesReportReportFeedback = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/report/report-feedback.vue"]]);
  const _sfc_main$9 = {
    data() {
      return {
        phone: ""
      };
    },
    methods: {
      handleLogin() {
        if (!this.phone) {
          uni.showToast({
            title: "请输入手机号",
            icon: "none"
          });
          return;
        }
        if (!/^1[3-9]\d{9}$/.test(this.phone)) {
          uni.showToast({
            title: "请输入正确的手机号",
            icon: "none"
          });
          return;
        }
        uni.showToast({
          title: "验证码已发送",
          icon: "success",
          duration: 1500
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/login/verification-code-login"
          });
        }, 1500);
      },
      goToPasswordLogin() {
        uni.navigateTo({
          url: "/pages/login/login-replica"
        });
      },
      goToRegister() {
        uni.navigateTo({
          url: "/pages/login/phone-register"
        });
      },
      goToWechatBind() {
        uni.navigateTo({
          url: "/pages/login/login-unbound"
        });
      },
      goToMainPage() {
        uni.navigateTo({
          url: "/pages/index/index"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToWechatLogin() {
        uni.showToast({
          title: "即将跳转至微信",
          icon: "none",
          duration: 2e3
        });
      },
      goToQQLogin() {
        uni.showToast({
          title: "即将跳转至QQ",
          icon: "none",
          duration: 2e3
        });
      },
      goToDouyinLogin() {
        uni.showToast({
          title: "即将跳转至抖音",
          icon: "none",
          duration: 2e3
        });
      }
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 应用Logo "),
        vue.createElementVNode("view", { class: "app-header" }, [
          vue.createElementVNode("image", {
            class: "app-logo",
            src: _imports_0$1,
            mode: "aspectFit"
          })
        ]),
        vue.createCommentVNode(" 问候语和欢迎文字 "),
        vue.createElementVNode("view", { class: "greeting-section" }, [
          vue.createElementVNode("text", { class: "greeting-text" }, "你好呀"),
          vue.createElementVNode("text", { class: "welcome-text" }, "欢迎来到Afriends, 请登录并开始你的交友之旅")
        ]),
        vue.createCommentVNode(" 登录表单 "),
        vue.createElementVNode("view", { class: "login-form" }, [
          vue.createCommentVNode(" 手机号输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "手机号"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "text",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phone = $event),
                  maxlength: "11"
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.phone]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 登录选项 "),
          vue.createElementVNode("view", { class: "login-options" }, [
            vue.createElementVNode("text", {
              class: "option-text",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.goToPasswordLogin && $options.goToPasswordLogin(...args))
            }, "使用账号密码登录")
          ]),
          vue.createCommentVNode(" 第三方登录 "),
          vue.createElementVNode("view", { class: "third-party-login" }, [
            vue.createElementVNode("text", { class: "section-title" }, "或者你可以通过这些来登录"),
            vue.createElementVNode("view", { class: "social-icons" }, [
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.goToWechatLogin && $options.goToWechatLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[3] || (_cache[3] = (...args) => $options.goToQQLogin && $options.goToQQLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_2,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.goToDouyinLogin && $options.goToDouyinLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ])
            ])
          ]),
          vue.createCommentVNode(" 用户协议 "),
          vue.createElementVNode("view", { class: "terms-section" }, [
            vue.createElementVNode("text", {
              class: "terms-link",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, "服务条款")
          ]),
          vue.createCommentVNode(" 登录按钮 "),
          vue.createElementVNode("button", {
            class: "login-btn",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.handleLogin && $options.handleLogin(...args))
          }, [
            vue.createElementVNode("text", { class: "btn-text" }, "获取验证码")
          ]),
          vue.createCommentVNode(" 注册链接 "),
          vue.createElementVNode("view", { class: "register-section" }, [
            vue.createElementVNode("text", { class: "register-text" }, "没有账号?"),
            vue.createElementVNode("text", {
              class: "register-link",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.goToRegister && $options.goToRegister(...args))
            }, "注册账号")
          ]),
          vue.createCommentVNode(" 主界面跳转按钮 "),
          vue.createCommentVNode(' <view class="main-page-section">\n          <button class="main-page-btn" @click="goToMainPage">进入主界面</button>\n        </view> ')
        ])
      ])
    ]);
  }
  const PagesLoginPhoneLogin = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__scopeId", "data-v-9c741f08"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/phone-login.vue"]]);
  const _sfc_main$8 = {
    data() {
      return {
        username: "",
        password: "",
        userId: null
        // 存储用户ID
      };
    },
    methods: {
      handleLogin() {
        if (!this.username || !this.password) {
          uni.showToast({
            title: "请输入用户名和密码",
            icon: "none"
          });
          return;
        }
        this.userId = 1000001;
        uni.setStorageSync("userId", this.userId);
        uni.setStorageSync("username", this.username);
        formatAppLog("log", "at pages/login/login-replica.vue:117", "登录信息:", {
          username: this.username,
          password: this.password,
          userId: this.userId
        });
        uni.showToast({
          title: "登录成功",
          icon: "success",
          duration: 1500
        });
        setTimeout(() => {
          uni.redirectTo({
            url: "/pages/feed/content-feed"
          });
        }, 1500);
      },
      goToRegister() {
        uni.navigateTo({
          url: "/pages/login/phone-register"
        });
      },
      goToPhoneLogin() {
        uni.navigateTo({
          url: "/pages/login/phone-login"
        });
      },
      goToWechatBind() {
        uni.navigateTo({
          url: "/pages/login/login-unbound"
        });
      },
      goToResetPassword() {
        uni.navigateTo({
          url: "/pages/login/reset-password"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToWechatLogin() {
        uni.showToast({
          title: "即将跳转至微信",
          icon: "none",
          duration: 2e3
        });
      },
      goToQQLogin() {
        uni.showToast({
          title: "即将跳转至QQ",
          icon: "none",
          duration: 2e3
        });
      },
      goToDouyinLogin() {
        uni.showToast({
          title: "即将跳转至抖音",
          icon: "none",
          duration: 2e3
        });
      }
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 应用Logo "),
        vue.createElementVNode("view", { class: "app-header" }, [
          vue.createElementVNode("image", {
            class: "app-logo",
            src: _imports_0$1,
            mode: "aspectFit"
          })
        ]),
        vue.createCommentVNode(" 问候语和欢迎文字 "),
        vue.createElementVNode("view", { class: "greeting-section" }, [
          vue.createElementVNode("text", { class: "greeting-text" }, "你好呀"),
          vue.createElementVNode("text", { class: "welcome-text" }, "欢迎来到Afriends, 请登录并开始你的交友之旅")
        ]),
        vue.createCommentVNode(" 登录表单 "),
        vue.createElementVNode("view", { class: "login-form" }, [
          vue.createCommentVNode(" 用户名/手机号输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "手机号/用户名"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "text",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.username = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.username]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 密码输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "密码"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "password",
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.password = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.password]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 忘记密码 "),
          vue.createElementVNode("view", { class: "forgot-password" }, [
            vue.createElementVNode("text", {
              class: "option-text",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.goToResetPassword && $options.goToResetPassword(...args))
            }, "忘记密码?")
          ]),
          vue.createCommentVNode(" 使用手机验证码登录 "),
          vue.createElementVNode("view", { class: "phone-login-option" }, [
            vue.createElementVNode("text", {
              class: "option-text",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.goToPhoneLogin && $options.goToPhoneLogin(...args))
            }, "使用手机验证码登录")
          ]),
          vue.createCommentVNode(" 第三方登录 "),
          vue.createElementVNode("view", { class: "third-party-login" }, [
            vue.createElementVNode("text", { class: "section-title" }, "或者你可以通过这些来登录"),
            vue.createElementVNode("view", { class: "social-icons" }, [
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.goToWechatLogin && $options.goToWechatLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[5] || (_cache[5] = (...args) => $options.goToQQLogin && $options.goToQQLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_2,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.goToDouyinLogin && $options.goToDouyinLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ])
            ])
          ]),
          vue.createCommentVNode(" 用户协议 "),
          vue.createElementVNode("view", { class: "terms-section" }, [
            vue.createElementVNode("text", {
              class: "terms-link",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, "服务条款")
          ]),
          vue.createCommentVNode(" 登录按钮 "),
          vue.createElementVNode("button", {
            class: "login-btn",
            onClick: _cache[8] || (_cache[8] = (...args) => $options.handleLogin && $options.handleLogin(...args))
          }, [
            vue.createElementVNode("text", { class: "btn-text" }, "登录")
          ]),
          vue.createCommentVNode(" 注册链接 "),
          vue.createElementVNode("view", { class: "register-section" }, [
            vue.createElementVNode("text", { class: "register-text" }, "没有账号?"),
            vue.createElementVNode("text", {
              class: "register-link",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.goToRegister && $options.goToRegister(...args))
            }, "注册账号")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginLoginReplica = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__scopeId", "data-v-5af65697"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/login-replica.vue"]]);
  const _sfc_main$7 = {
    data() {
      return {
        username: "",
        password: ""
      };
    },
    methods: {
      handleBind() {
        if (!this.username || !this.password) {
          uni.showToast({
            title: "请输入用户名和密码",
            icon: "none"
          });
          return;
        }
        formatAppLog("log", "at pages/login/login-unbound.vue:110", "绑定信息:", {
          username: this.username,
          password: this.password
        });
        uni.showToast({
          title: "绑定成功",
          icon: "success"
        });
      },
      goToRegister() {
        uni.navigateTo({
          url: "/pages/login/phone-register"
        });
      },
      goToPhoneLogin() {
        uni.navigateTo({
          url: "/pages/login/phone-login"
        });
      },
      handleWechatBind() {
        formatAppLog("log", "at pages/login/login-unbound.vue:135", "触发微信绑定");
        uni.showToast({
          title: "微信绑定功能开发中",
          icon: "none"
        });
      },
      goToWechatBind() {
        formatAppLog("log", "at pages/login/login-unbound.vue:144", "已在微信绑定页面");
      },
      goToResetPassword() {
        uni.navigateTo({
          url: "/pages/login/reset-password"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToWechatLogin() {
        uni.showToast({
          title: "即将跳转至微信",
          icon: "none",
          duration: 2e3
        });
      },
      goToQQLogin() {
        uni.showToast({
          title: "即将跳转至QQ",
          icon: "none",
          duration: 2e3
        });
      },
      goToDouyinLogin() {
        uni.showToast({
          title: "即将跳转至抖音",
          icon: "none",
          duration: 2e3
        });
      }
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 应用Logo "),
        vue.createElementVNode("view", { class: "app-header" }, [
          vue.createElementVNode("image", {
            class: "app-logo",
            src: _imports_0$1,
            mode: "aspectFit"
          })
        ]),
        vue.createCommentVNode(" 问候语和欢迎文字 "),
        vue.createElementVNode("view", { class: "greeting-section" }, [
          vue.createElementVNode("text", { class: "greeting-text" }, "需要绑定"),
          vue.createElementVNode("text", { class: "welcome-text" }, "您的社交账号似乎并没有绑定我们的账号"),
          vue.createElementVNode("text", { class: "welcome-text" }, "请先用其他方式登录")
        ]),
        vue.createCommentVNode(" 绑定表单 "),
        vue.createElementVNode("view", { class: "login-form" }, [
          vue.createCommentVNode(" 用户名/手机号输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "手机号/用户名"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "text",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.username = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.username]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 密码输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "密码"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "password",
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.password = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.password]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 忘记密码 "),
          vue.createElementVNode("view", { class: "forgot-password" }, [
            vue.createElementVNode("text", {
              class: "option-text",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.goToResetPassword && $options.goToResetPassword(...args))
            }, "忘记密码?")
          ]),
          vue.createCommentVNode(" 使用手机验证码登录 "),
          vue.createElementVNode("view", { class: "phone-login-option" }, [
            vue.createElementVNode("text", {
              class: "option-text",
              onClick: _cache[3] || (_cache[3] = (...args) => $options.goToPhoneLogin && $options.goToPhoneLogin(...args))
            }, "使用手机验证码登录")
          ]),
          vue.createCommentVNode(" 第三方登录 "),
          vue.createElementVNode("view", { class: "third-party-login" }, [
            vue.createElementVNode("text", { class: "section-title" }, "或者你可以通过这些来绑定"),
            vue.createElementVNode("view", { class: "social-icons" }, [
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.goToWechatLogin && $options.goToWechatLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[5] || (_cache[5] = (...args) => $options.goToQQLogin && $options.goToQQLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_2,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[6] || (_cache[6] = (...args) => $options.goToDouyinLogin && $options.goToDouyinLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ])
            ])
          ]),
          vue.createCommentVNode(" 用户协议 "),
          vue.createElementVNode("view", { class: "terms-section" }, [
            vue.createElementVNode("text", {
              class: "terms-link",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, "服务条款")
          ]),
          vue.createCommentVNode(" 绑定按钮 "),
          vue.createElementVNode("button", {
            class: "login-btn",
            onClick: _cache[8] || (_cache[8] = (...args) => $options.handleBind && $options.handleBind(...args))
          }, [
            vue.createElementVNode("text", { class: "btn-text" }, "绑定")
          ]),
          vue.createCommentVNode(" 注册链接 "),
          vue.createElementVNode("view", { class: "register-section" }, [
            vue.createElementVNode("text", { class: "register-text" }, "没有账号?"),
            vue.createElementVNode("text", {
              class: "register-link",
              onClick: _cache[9] || (_cache[9] = (...args) => $options.goToRegister && $options.goToRegister(...args))
            }, "注册账号")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginLoginUnbound = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__scopeId", "data-v-38ba827d"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/login-unbound.vue"]]);
  const _sfc_main$6 = {
    data() {
      return {
        phone: ""
      };
    },
    methods: {
      handleRegister() {
        if (!this.phone) {
          uni.showToast({
            title: "请输入手机号",
            icon: "none"
          });
          return;
        }
        if (!/^1[3-9]\d{9}$/.test(this.phone)) {
          uni.showToast({
            title: "请输入正确的手机号",
            icon: "none"
          });
          return;
        }
        formatAppLog("log", "at pages/login/phone-register.vue:101", "发送验证码到手机号:", this.phone);
        uni.showToast({
          title: "验证码已发送",
          icon: "success"
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/login/verification-code-register"
          });
        }, 1500);
      },
      goToPhoneLogin() {
        uni.navigateTo({
          url: "/pages/login/phone-login"
        });
      },
      goToWechatBind() {
        uni.navigateTo({
          url: "/pages/login/login-unbound"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      },
      goToWechatLogin() {
        uni.showToast({
          title: "即将跳转至微信",
          icon: "none",
          duration: 2e3
        });
      },
      goToQQLogin() {
        uni.showToast({
          title: "即将跳转至QQ",
          icon: "none",
          duration: 2e3
        });
      },
      goToDouyinLogin() {
        uni.showToast({
          title: "即将跳转至抖音",
          icon: "none",
          duration: 2e3
        });
      }
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 应用Logo "),
        vue.createElementVNode("view", { class: "app-header" }, [
          vue.createElementVNode("image", {
            class: "app-logo",
            src: _imports_0$1,
            mode: "aspectFit"
          })
        ]),
        vue.createCommentVNode(" 问候语和欢迎文字 "),
        vue.createElementVNode("view", { class: "greeting-section" }, [
          vue.createElementVNode("text", { class: "greeting-text" }, "你好呀"),
          vue.createElementVNode("text", { class: "welcome-text" }, "欢迎来到Afriends, 请注册并开始你的交友之旅")
        ]),
        vue.createCommentVNode(" 注册表单 "),
        vue.createElementVNode("view", { class: "login-form" }, [
          vue.createCommentVNode(" 手机号输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "手机号"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "text",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phone = $event),
                  maxlength: "11"
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.phone]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 注册选项 "),
          vue.createElementVNode("view", { class: "login-options" }, [
            vue.createElementVNode("text", {
              class: "option-text",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.goToPhoneLogin && $options.goToPhoneLogin(...args))
            }, "使用手机验证码登录")
          ]),
          vue.createCommentVNode(" 第三方登录 "),
          vue.createElementVNode("view", { class: "third-party-login" }, [
            vue.createElementVNode("text", { class: "section-title" }, "或者你可以通过这些来登录"),
            vue.createElementVNode("view", { class: "social-icons" }, [
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[2] || (_cache[2] = (...args) => $options.goToWechatLogin && $options.goToWechatLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_1,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[3] || (_cache[3] = (...args) => $options.goToQQLogin && $options.goToQQLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_2,
                  mode: "aspectFit"
                })
              ]),
              vue.createElementVNode("view", {
                class: "social-icon",
                onClick: _cache[4] || (_cache[4] = (...args) => $options.goToDouyinLogin && $options.goToDouyinLogin(...args))
              }, [
                vue.createElementVNode("image", {
                  class: "social-icon-img",
                  src: _imports_3,
                  mode: "aspectFit"
                })
              ])
            ])
          ]),
          vue.createCommentVNode(" 用户协议 "),
          vue.createElementVNode("view", { class: "terms-section" }, [
            vue.createElementVNode("text", {
              class: "terms-link",
              onClick: _cache[5] || (_cache[5] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, "服务条款")
          ]),
          vue.createCommentVNode(" 注册按钮 "),
          vue.createElementVNode("button", {
            class: "login-btn",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.handleRegister && $options.handleRegister(...args))
          }, [
            vue.createElementVNode("text", { class: "btn-text" }, "注册")
          ]),
          vue.createCommentVNode(" 登录链接 "),
          vue.createElementVNode("view", { class: "register-section" }, [
            vue.createElementVNode("text", { class: "register-text" }, "已有账号?"),
            vue.createElementVNode("text", {
              class: "register-link",
              onClick: _cache[7] || (_cache[7] = (...args) => $options.goToPhoneLogin && $options.goToPhoneLogin(...args))
            }, "登录账号")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginPhoneRegister = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-0701aea4"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/phone-register.vue"]]);
  const _sfc_main$5 = {
    data() {
      return {
        verificationCode: ["", "", "", ""],
        mainInputValue: "",
        activeIndex: 0
      };
    },
    computed: {
      isCodeComplete() {
        return this.verificationCode.every((digit) => digit !== "");
      }
    },
    mounted() {
      this.$nextTick(() => {
        setTimeout(() => {
          this.focusMainInput();
        }, 300);
      });
    },
    methods: {
      handleMainInput(event) {
        const value = event.detail.value.replace(/\D/g, "").slice(0, 4);
        this.mainInputValue = value;
        for (let i = 0; i < 4; i++) {
          this.verificationCode[i] = value[i] || "";
        }
        if (value.length > 0) {
          this.activeIndex = Math.min(value.length - 1, 3);
        } else {
          this.activeIndex = 0;
        }
      },
      handleMainFocus() {
        if (this.mainInputValue.length > 0) {
          this.activeIndex = Math.min(this.mainInputValue.length - 1, 3);
        } else {
          this.activeIndex = 0;
        }
      },
      handleMainBlur() {
        this.activeIndex = -1;
      },
      focusMainInput() {
        this.$nextTick(() => {
          if (this.$refs.mainInput) {
            const input = this.$refs.mainInput;
            if (input && input.focus) {
              input.focus();
            }
          }
        });
      },
      resendCode() {
        formatAppLog("log", "at pages/login/verification-code-login.vue:126", "重新发送验证码");
        uni.showToast({
          title: "验证码已重新发送",
          icon: "success"
        });
      },
      handleLogin() {
        if (!this.isCodeComplete) {
          uni.showToast({
            title: "请输入完整的验证码",
            icon: "none"
          });
          return;
        }
        const code = this.verificationCode.join("");
        formatAppLog("log", "at pages/login/verification-code-login.vue:145", "验证码:", code);
        uni.showToast({
          title: "登录成功",
          icon: "success",
          duration: 1500
        });
        setTimeout(() => {
          uni.redirectTo({
            url: "/pages/feed/content-feed"
          });
        }, 1500);
      },
      goBack() {
        uni.navigateBack();
      },
      changePhone() {
        uni.redirectTo({
          url: "/pages/login/phone-login"
        });
      }
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "verification-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 标题 "),
        vue.createElementVNode("text", { class: "title" }, "请输入验证码"),
        vue.createCommentVNode(" 说明文字 "),
        vue.createElementVNode("text", { class: "instruction" }, "我们刚刚向您发送了一条验证码,请查看您的信箱"),
        vue.createCommentVNode(" 验证码输入框 "),
        vue.createElementVNode("view", { class: "code-input-section" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.verificationCode, (digit, index) => {
              return vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: index,
                  class: vue.normalizeClass(["code-input-field", { "active": $data.activeIndex === index }]),
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.focusMainInput && $options.focusMainInput(...args))
                },
                [
                  digit ? (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 0,
                      class: "code-digit"
                    },
                    vue.toDisplayString(digit),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                2
                /* CLASS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createCommentVNode(" 隐藏的主输入框 "),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              class: "main-input",
              type: "number",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.mainInputValue = $event),
              maxlength: "4",
              placeholder: "",
              onInput: _cache[2] || (_cache[2] = (...args) => $options.handleMainInput && $options.handleMainInput(...args)),
              onFocus: _cache[3] || (_cache[3] = (...args) => $options.handleMainFocus && $options.handleMainFocus(...args)),
              onBlur: _cache[4] || (_cache[4] = (...args) => $options.handleMainBlur && $options.handleMainBlur(...args)),
              ref: "mainInput"
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.mainInputValue]
          ])
        ]),
        vue.createCommentVNode(" 重新输入手机号 "),
        vue.createElementVNode("view", { class: "change-phone-section" }, [
          vue.createElementVNode("text", {
            class: "change-phone-link",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.changePhone && $options.changePhone(...args))
          }, "重新输入手机号")
        ]),
        vue.createCommentVNode(" 重新发送选项 "),
        vue.createElementVNode("view", { class: "resend-section" }, [
          vue.createElementVNode("text", { class: "resend-text" }, "没有收到验证码?"),
          vue.createElementVNode("text", {
            class: "resend-link",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.resendCode && $options.resendCode(...args))
          }, "重新发送")
        ]),
        vue.createCommentVNode(" 登录按钮 "),
        vue.createElementVNode("button", {
          class: "login-btn",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.handleLogin && $options.handleLogin(...args)),
          disabled: !$options.isCodeComplete
        }, [
          vue.createElementVNode("text", { class: "btn-text" }, "登录")
        ], 8, ["disabled"])
      ])
    ]);
  }
  const PagesLoginVerificationCodeLogin = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-ad3101bf"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/verification-code-login.vue"]]);
  const _sfc_main$4 = {
    data() {
      return {
        verificationCode: ["", "", "", ""],
        mainInputValue: "",
        activeIndex: 0
      };
    },
    computed: {
      isCodeComplete() {
        return this.verificationCode.every((digit) => digit !== "");
      }
    },
    mounted() {
      this.$nextTick(() => {
        setTimeout(() => {
          this.focusMainInput();
        }, 300);
      });
    },
    methods: {
      handleMainInput(event) {
        const value = event.detail.value.replace(/\D/g, "").slice(0, 4);
        this.mainInputValue = value;
        for (let i = 0; i < 4; i++) {
          this.verificationCode[i] = value[i] || "";
        }
        if (value.length > 0) {
          this.activeIndex = Math.min(value.length - 1, 3);
        } else {
          this.activeIndex = 0;
        }
      },
      handleMainFocus() {
        if (this.mainInputValue.length > 0) {
          this.activeIndex = Math.min(this.mainInputValue.length - 1, 3);
        } else {
          this.activeIndex = 0;
        }
      },
      handleMainBlur() {
        this.activeIndex = -1;
      },
      focusMainInput() {
        this.$nextTick(() => {
          if (this.$refs.mainInput) {
            const input = this.$refs.mainInput;
            if (input && input.focus) {
              input.focus();
            }
          }
        });
      },
      resendCode() {
        formatAppLog("log", "at pages/login/verification-code-register.vue:126", "重新发送验证码");
        uni.showToast({
          title: "验证码已重新发送",
          icon: "success"
        });
      },
      handleRegister() {
        if (!this.isCodeComplete) {
          uni.showToast({
            title: "请输入完整的验证码",
            icon: "none"
          });
          return;
        }
        const code = this.verificationCode.join("");
        formatAppLog("log", "at pages/login/verification-code-register.vue:145", "验证码:", code);
        uni.showToast({
          title: "注册成功",
          icon: "success",
          duration: 1500
        });
        setTimeout(() => {
          uni.redirectTo({
            url: "/pages/login/login-replica"
          });
        }, 1500);
      },
      goBack() {
        uni.navigateBack();
      },
      changePhone() {
        uni.redirectTo({
          url: "/pages/login/phone-register"
        });
      }
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "verification-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 标题 "),
        vue.createElementVNode("text", { class: "title" }, "请输入验证码"),
        vue.createCommentVNode(" 说明文字 "),
        vue.createElementVNode("text", { class: "instruction" }, "我们刚刚向您发送了一条验证码,请查看您的信箱"),
        vue.createCommentVNode(" 验证码输入框 "),
        vue.createElementVNode("view", { class: "code-input-section" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.verificationCode, (digit, index) => {
              return vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: index,
                  class: vue.normalizeClass(["code-input-field", { "active": $data.activeIndex === index }]),
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.focusMainInput && $options.focusMainInput(...args))
                },
                [
                  digit ? (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 0,
                      class: "code-digit"
                    },
                    vue.toDisplayString(digit),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                2
                /* CLASS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createCommentVNode(" 隐藏的主输入框 "),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              class: "main-input",
              type: "number",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.mainInputValue = $event),
              maxlength: "4",
              placeholder: "",
              onInput: _cache[2] || (_cache[2] = (...args) => $options.handleMainInput && $options.handleMainInput(...args)),
              onFocus: _cache[3] || (_cache[3] = (...args) => $options.handleMainFocus && $options.handleMainFocus(...args)),
              onBlur: _cache[4] || (_cache[4] = (...args) => $options.handleMainBlur && $options.handleMainBlur(...args)),
              ref: "mainInput"
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.mainInputValue]
          ])
        ]),
        vue.createCommentVNode(" 重新输入手机号 "),
        vue.createElementVNode("view", { class: "change-phone-section" }, [
          vue.createElementVNode("text", {
            class: "change-phone-link",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.changePhone && $options.changePhone(...args))
          }, "重新输入手机号")
        ]),
        vue.createCommentVNode(" 重新发送选项 "),
        vue.createElementVNode("view", { class: "resend-section" }, [
          vue.createElementVNode("text", { class: "resend-text" }, "没有收到验证码?"),
          vue.createElementVNode("text", {
            class: "resend-link",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.resendCode && $options.resendCode(...args))
          }, "重新发送")
        ]),
        vue.createCommentVNode(" 注册按钮 "),
        vue.createElementVNode("button", {
          class: "login-btn",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.handleRegister && $options.handleRegister(...args)),
          disabled: !$options.isCodeComplete
        }, [
          vue.createElementVNode("text", { class: "btn-text" }, "注册")
        ], 8, ["disabled"])
      ])
    ]);
  }
  const PagesLoginVerificationCodeRegister = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__scopeId", "data-v-8bc8ce00"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/verification-code-register.vue"]]);
  const _sfc_main$3 = {
    data() {
      return {
        verificationCode: ["", "", "", ""],
        mainInputValue: "",
        activeIndex: 0
      };
    },
    computed: {
      isCodeComplete() {
        return this.verificationCode.every((digit) => digit !== "");
      }
    },
    mounted() {
      this.$nextTick(() => {
        setTimeout(() => {
          this.focusMainInput();
        }, 300);
      });
    },
    methods: {
      handleMainInput(event) {
        const value = event.detail.value.replace(/\D/g, "").slice(0, 4);
        this.mainInputValue = value;
        for (let i = 0; i < 4; i++) {
          this.verificationCode[i] = value[i] || "";
        }
        if (value.length > 0) {
          this.activeIndex = Math.min(value.length - 1, 3);
        } else {
          this.activeIndex = 0;
        }
      },
      handleMainFocus() {
        if (this.mainInputValue.length > 0) {
          this.activeIndex = Math.min(this.mainInputValue.length - 1, 3);
        } else {
          this.activeIndex = 0;
        }
      },
      handleMainBlur() {
        this.activeIndex = -1;
      },
      focusMainInput() {
        this.$nextTick(() => {
          if (this.$refs.mainInput) {
            const input = this.$refs.mainInput;
            if (input && input.focus) {
              input.focus();
            }
          }
        });
      },
      resendCode() {
        formatAppLog("log", "at pages/login/verification-code-resetPassword.vue:126", "重新发送验证码");
        uni.showToast({
          title: "验证码已重新发送",
          icon: "success"
        });
      },
      handleNext() {
        if (!this.isCodeComplete) {
          uni.showToast({
            title: "请输入完整的验证码",
            icon: "none"
          });
          return;
        }
        const code = this.verificationCode.join("");
        formatAppLog("log", "at pages/login/verification-code-resetPassword.vue:145", "验证码:", code);
        uni.showToast({
          title: "验证成功",
          icon: "success"
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/login/rest-verify-password"
          });
        }, 1e3);
      },
      goBack() {
        uni.navigateBack();
      },
      changePhone() {
        uni.redirectTo({
          url: "/pages/login/reset-password"
        });
      }
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "verification-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 标题 "),
        vue.createElementVNode("text", { class: "title" }, "请输入验证码"),
        vue.createCommentVNode(" 说明文字 "),
        vue.createElementVNode("text", { class: "instruction" }, "我们刚刚向您发送了一条验证码,请查看您的信箱"),
        vue.createCommentVNode(" 验证码输入框 "),
        vue.createElementVNode("view", { class: "code-input-section" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.verificationCode, (digit, index) => {
              return vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: index,
                  class: vue.normalizeClass(["code-input-field", { "active": $data.activeIndex === index }]),
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.focusMainInput && $options.focusMainInput(...args))
                },
                [
                  digit ? (vue.openBlock(), vue.createElementBlock(
                    "text",
                    {
                      key: 0,
                      class: "code-digit"
                    },
                    vue.toDisplayString(digit),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                2
                /* CLASS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createCommentVNode(" 隐藏的主输入框 "),
          vue.withDirectives(vue.createElementVNode(
            "input",
            {
              class: "main-input",
              type: "number",
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.mainInputValue = $event),
              maxlength: "4",
              placeholder: "",
              onInput: _cache[2] || (_cache[2] = (...args) => $options.handleMainInput && $options.handleMainInput(...args)),
              onFocus: _cache[3] || (_cache[3] = (...args) => $options.handleMainFocus && $options.handleMainFocus(...args)),
              onBlur: _cache[4] || (_cache[4] = (...args) => $options.handleMainBlur && $options.handleMainBlur(...args)),
              ref: "mainInput"
            },
            null,
            544
            /* NEED_HYDRATION, NEED_PATCH */
          ), [
            [vue.vModelText, $data.mainInputValue]
          ])
        ]),
        vue.createCommentVNode(" 重新输入手机号 "),
        vue.createElementVNode("view", { class: "change-phone-section" }, [
          vue.createElementVNode("text", {
            class: "change-phone-link",
            onClick: _cache[5] || (_cache[5] = (...args) => $options.changePhone && $options.changePhone(...args))
          }, "重新输入手机号")
        ]),
        vue.createCommentVNode(" 重新发送选项 "),
        vue.createElementVNode("view", { class: "resend-section" }, [
          vue.createElementVNode("text", { class: "resend-text" }, "没有收到验证码?"),
          vue.createElementVNode("text", {
            class: "resend-link",
            onClick: _cache[6] || (_cache[6] = (...args) => $options.resendCode && $options.resendCode(...args))
          }, "重新发送")
        ]),
        vue.createCommentVNode(" 下一步按钮 "),
        vue.createElementVNode("button", {
          class: "login-btn",
          onClick: _cache[7] || (_cache[7] = (...args) => $options.handleNext && $options.handleNext(...args)),
          disabled: !$options.isCodeComplete
        }, [
          vue.createElementVNode("text", { class: "btn-text" }, "下一步")
        ], 8, ["disabled"])
      ])
    ]);
  }
  const PagesLoginVerificationCodeResetPassword = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__scopeId", "data-v-d45d87a1"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/verification-code-resetPassword.vue"]]);
  const _sfc_main$2 = {
    data() {
      return {
        phone: ""
      };
    },
    methods: {
      handleLogin() {
        if (!this.phone) {
          uni.showToast({
            title: "请输入手机号",
            icon: "none"
          });
          return;
        }
        uni.navigateTo({
          url: "/pages/login/verification-code-resetPassword"
        });
      },
      goToPasswordLogin() {
        uni.navigateTo({
          url: "/pages/login/login-replica"
        });
      },
      goToRegister() {
        uni.navigateTo({
          url: "/pages/login/phone-register"
        });
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      }
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 应用Logo "),
        vue.createElementVNode("view", { class: "app-header" }, [
          vue.createElementVNode("image", {
            class: "app-logo",
            src: _imports_0$1,
            mode: "aspectFit"
          })
        ]),
        vue.createCommentVNode(" 问候语和欢迎文字 "),
        vue.createElementVNode("view", { class: "greeting-section" }, [
          vue.createElementVNode("text", { class: "greeting-text" }, "修改密码"),
          vue.createElementVNode("text", { class: "welcome-text" }, "请输入绑定的手机号码")
        ]),
        vue.createCommentVNode(" 登录表单 "),
        vue.createElementVNode("view", { class: "login-form" }, [
          vue.createCommentVNode(" 手机号输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "手机号"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "text",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.phone = $event),
                  maxlength: "11"
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.phone]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 返回登录链接 "),
          vue.createElementVNode("view", { class: "back-login-section" }, [
            vue.createElementVNode("text", {
              class: "back-login-text",
              onClick: _cache[1] || (_cache[1] = (...args) => $options.goToPasswordLogin && $options.goToPasswordLogin(...args))
            }, "返回登录")
          ]),
          vue.createCommentVNode(" 用户协议 "),
          vue.createElementVNode("view", { class: "terms-section" }, [
            vue.createElementVNode("text", {
              class: "terms-link",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, "服务条款")
          ]),
          vue.createCommentVNode(" 登录按钮 "),
          vue.createElementVNode("button", {
            class: "login-btn",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.handleLogin && $options.handleLogin(...args))
          }, [
            vue.createElementVNode("text", { class: "btn-text" }, "获取验证码")
          ]),
          vue.createCommentVNode(" 注册链接 "),
          vue.createElementVNode("view", { class: "register-section" }, [
            vue.createElementVNode("text", { class: "register-text" }, "没有账号?"),
            vue.createElementVNode("text", {
              class: "register-link",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.goToRegister && $options.goToRegister(...args))
            }, "注册账号")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginResetPassword = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-a620d4da"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/reset-password.vue"]]);
  const _sfc_main$1 = {
    data() {
      return {
        username: "",
        password: ""
      };
    },
    computed: {
      isFormValid() {
        return this.username && this.password && this.username === this.password;
      }
    },
    methods: {
      handleConfirm() {
        if (!this.username || !this.password) {
          uni.showToast({
            title: "请输入新密码和确认密码",
            icon: "none"
          });
          return;
        }
        if (this.username !== this.password) {
          uni.showToast({
            title: "两次输入的密码不一致",
            icon: "none"
          });
          return;
        }
        formatAppLog("log", "at pages/login/rest-verify-password.vue:99", "密码修改信息:", {
          newPassword: this.username
        });
        uni.showToast({
          title: "密码修改成功",
          icon: "success"
        });
        setTimeout(() => {
          uni.navigateTo({
            url: "/pages/login/login-replica"
          });
        }, 1500);
      },
      goToTermsOfService() {
        uni.navigateTo({
          url: "/pages/settings/terms-of-service"
        });
      }
    }
  };
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "login-container" }, [
      vue.createCommentVNode(" 主内容区域 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createCommentVNode(" 应用Logo "),
        vue.createElementVNode("view", { class: "app-header" }, [
          vue.createElementVNode("image", {
            class: "app-logo",
            src: _imports_0$1,
            mode: "aspectFit"
          })
        ]),
        vue.createCommentVNode(" 问候语和欢迎文字 "),
        vue.createElementVNode("view", { class: "greeting-section" }, [
          vue.createElementVNode("text", { class: "greeting-text" }, "修改密码"),
          vue.createElementVNode("text", { class: "welcome-text" }, "请您修改当前账号密码，在修改后需要重新登录")
        ]),
        vue.createCommentVNode(" 登录表单 "),
        vue.createElementVNode("view", { class: "login-form" }, [
          vue.createCommentVNode(" 新密码输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "新密码"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "password",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.username = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.username]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 确认密码输入框 "),
          vue.createElementVNode("view", { class: "input-group" }, [
            vue.createElementVNode("text", { class: "input-label" }, "请再次输入新密码"),
            vue.createElementVNode("view", { class: "input-wrapper" }, [
              vue.withDirectives(vue.createElementVNode(
                "input",
                {
                  class: "form-input",
                  type: "password",
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.password = $event)
                },
                null,
                512
                /* NEED_PATCH */
              ), [
                [vue.vModelText, $data.password]
              ]),
              vue.createElementVNode("view", { class: "input-underline" })
            ])
          ]),
          vue.createCommentVNode(" 用户协议 "),
          vue.createElementVNode("view", { class: "terms-section" }, [
            vue.createElementVNode("text", {
              class: "terms-link",
              onClick: _cache[2] || (_cache[2] = (...args) => $options.goToTermsOfService && $options.goToTermsOfService(...args))
            }, "服务条款")
          ]),
          vue.createCommentVNode(" 确认按钮 "),
          vue.createElementVNode("button", {
            class: "login-btn",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.handleConfirm && $options.handleConfirm(...args)),
            disabled: !$options.isFormValid
          }, [
            vue.createElementVNode("text", { class: "btn-text" }, "修改密码")
          ], 8, ["disabled"]),
          vue.createCommentVNode(" 返回登录链接 "),
          vue.createElementVNode("view", { class: "register-section" }, [
            vue.createElementVNode("text", { class: "register-text" }, "没有账号？"),
            vue.createElementVNode("text", {
              class: "register-link",
              onClick: _cache[4] || (_cache[4] = (...args) => _ctx.goToLogin && _ctx.goToLogin(...args))
            }, "注册账号")
          ])
        ])
      ])
    ]);
  }
  const PagesLoginRestVerifyPassword = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__scopeId", "data-v-05144a59"], ["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/pages/login/rest-verify-password.vue"]]);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/ai/ai", PagesAiAi);
  __definePage("pages/ai/customize-ai", PagesAiCustomizeAi);
  __definePage("pages/ai/gift", PagesAiGift);
  __definePage("pages/ai/level-up", PagesAiLevelUp);
  __definePage("pages/ai/permissions", PagesAiPermissions);
  __definePage("pages/ai/ai-list", PagesAiAiList);
  __definePage("pages/ai/pet-ai-detail", PagesAiPetAiDetail);
  __definePage("pages/ai/ai-chat", PagesAiAiChat);
  __definePage("pages/ai/ai-store", PagesAiAiStore);
  __definePage("pages/ai/tasks", PagesAiTasks);
  __definePage("pages/ai/task-detail", PagesAiTaskDetail);
  __definePage("pages/chat/chat", PagesChatChat);
  __definePage("pages/chat/search", PagesChatSearch);
  __definePage("pages/chat/date-search", PagesChatDateSearch);
  __definePage("pages/chat/search-results", PagesChatSearchResults);
  __definePage("pages/chat/chat-info", PagesChatChatInfo);
  __definePage("pages/chat/friend-card", PagesChatFriendCard);
  __definePage("pages/chat/friend-list", PagesChatFriendList);
  __definePage("pages/chat/chat-list", PagesChatChatList);
  __definePage("pages/feed/content-feed", PagesFeedContentFeed);
  __definePage("pages/feed/chat-feed", PagesFeedChatFeed);
  __definePage("pages/feed/post-detail", PagesFeedPostDetail);
  __definePage("pages/feed/user-profile", PagesFeedUserProfile);
  __definePage("pages/feed/my-comments", PagesFeedMyComments);
  __definePage("pages/feed/novel-detail", PagesFeedNovelDetail);
  __definePage("pages/feed/novel-more-reviews", PagesFeedNovelMoreReviews);
  __definePage("pages/feed/review-detail", PagesFeedReviewDetail);
  __definePage("pages/feed/achievements", PagesFeedAchievements);
  __definePage("pages/feed/search", PagesFeedSearch);
  __definePage("pages/feed/likes-dislikes", PagesFeedLikesDislikes);
  __definePage("pages/feed/interaction-messages", PagesFeedInteractionMessages);
  __definePage("pages/publish/publish", PagesPublishPublish);
  __definePage("pages/settings/settings", PagesSettingsSettings);
  __definePage("pages/settings/system-permissions", PagesSettingsSystemPermissions);
  __definePage("pages/settings/permissions", PagesSettingsPermissions);
  __definePage("pages/settings/album-permissions", PagesSettingsAlbumPermissions);
  __definePage("pages/settings/blocked-users", PagesSettingsBlockedUsers);
  __definePage("pages/settings/customer-service", PagesSettingsCustomerService);
  __definePage("pages/settings/terms-of-service", PagesSettingsTermsOfService);
  __definePage("pages/settings/switch-account", PagesSettingsSwitchAccount);
  __definePage("pages/settings/mode-selection", PagesSettingsModeSelection);
  __definePage("pages/settings/notification-settings", PagesSettingsNotificationSettings);
  __definePage("pages/settings/privacy-settings", PagesSettingsPrivacySettings);
  __definePage("pages/settings/account-security", PagesSettingsAccountSecurity);
  __definePage("pages/settings/device-management", PagesSettingsDeviceManagement);
  __definePage("pages/settings/third-party-binding", PagesSettingsThirdPartyBinding);
  __definePage("pages/settings/add-ways", PagesSettingsAddWays);
  __definePage("pages/settings/language", PagesSettingsLanguage);
  __definePage("pages/settings/notification-display", PagesSettingsNotificationDisplay);
  __definePage("pages/verification/official-certification", PagesVerificationOfficialCertification);
  __definePage("pages/verification/school-certification", PagesVerificationSchoolCertification);
  __definePage("pages/verification/professional-certification", PagesVerificationProfessionalCertification);
  __definePage("pages/verification/real-name-verification", PagesVerificationRealNameVerification);
  __definePage("pages/verification/face-recognition", PagesVerificationFaceRecognition);
  __definePage("pages/verification/verification-complete", PagesVerificationVerificationComplete);
  __definePage("pages/verification/certification-feedback", PagesVerificationCertificationFeedback);
  __definePage("pages/wallet/wallet", PagesWalletWallet);
  __definePage("pages/wallet/recharge", PagesWalletRecharge);
  __definePage("pages/wallet/purchase-record", PagesWalletPurchaseRecord);
  __definePage("pages/report/report", PagesReportReport);
  __definePage("pages/report/report-evidence", PagesReportReportEvidence);
  __definePage("pages/report/report-feedback", PagesReportReportFeedback);
  __definePage("pages/login/phone-login", PagesLoginPhoneLogin);
  __definePage("pages/login/login-replica", PagesLoginLoginReplica);
  __definePage("pages/login/login-unbound", PagesLoginLoginUnbound);
  __definePage("pages/login/phone-register", PagesLoginPhoneRegister);
  __definePage("pages/login/verification-code-login", PagesLoginVerificationCodeLogin);
  __definePage("pages/login/verification-code-register", PagesLoginVerificationCodeRegister);
  __definePage("pages/login/verification-code-resetPassword", PagesLoginVerificationCodeResetPassword);
  __definePage("pages/login/reset-password", PagesLoginResetPassword);
  __definePage("pages/login/rest-verify-password", PagesLoginRestVerifyPassword);
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:4", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:7", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:10", "App Hide");
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "D:/中文/Desktop/Afriends/Afriends_v3-master/Afriends_v3-master/AFriendsVue_v3.0.0/App.vue"]]);
  function createApp() {
    const app = vue.createVueApp(App);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
